{"version":3,"mappings":"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","names":["CELL_TYPE_ITEM","CELL_TYPE_HEADER","CELL_TYPE_FOOTER","createNode","el","type","template","getTemplate","ownerDocument","importNode","content","children","querySelector","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","offset","len","cells","end","i","item","value","push","index","height","reads","visible","VirtualScroll","constructor","hostRef","registerInstance","this","range","length","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","itemsChanged","componentWillLoad","console","warn","connectedCallback","contentEl","t","closest","scrollEl","_context","getScrollElement","updateState","error","componentDidUpdate","disconnectedCallback","onResize","positionForItem","Promise","resolve","heightIndex","cell","find","c","getHeightIndex","checkRange","arguments","cellIndex","findIndex","dst","src","Math","max","scheduleUpdate","checkEnd","timerUpdate","clearTimeout","undefined","readTask","readVS","bind","writeTask","writeVS","topOffset","node","offsetTop","offsetParent","offsetHeight","scrollTop","dirtyIndex","viewport","vierportHeight","margin","top","bottom","buffer","topPos","bottomPos","min","currentRange","dom","_step","change","d","toMutate","n","_loop","pool","filter","_i","_loop2","forEach","nodeRender","updateCellHeight","child","Array","from","tagName","childrenNu","newChild","classList","add","appendChild","$ionCell","style","transform","remove","domRender","renderItem","forceUpdate","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","setTimeout","shouldEnable","enableScrollEvents","Infinity","calcHeightIndex","buf","Uint32Array","newBuf","set","subarray","acum","shouldListen","rmEvent","addEventListener","removeEventListener","renderVirtualNode","_t$cell","renderHeader","renderFooter","render","h","Host","VirtualProxy","map","getElement","utils","_ref","vattrs","classes","Object","assign","class"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"sourcesContent":["import { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\nimport { c as componentOnReady } from './helpers-dd7e4b7b.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n  // reset dom\n  for (const node of dom) {\n    node.change = NODE_CHANGE_NONE;\n    node.d = true;\n  }\n  // try to match into exisiting dom\n  const toMutate = [];\n  const end = range.offset + range.length;\n  for (let i = range.offset; i < end; i++) {\n    const cell = cells[i];\n    const node = dom.find(n => n.d && n.cell === cell);\n    if (node) {\n      const top = heightIndex[i];\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n      node.d = false;\n    }\n    else {\n      toMutate.push(cell);\n    }\n  }\n  // needs to append\n  const pool = dom.filter(n => n.d);\n  for (const cell of toMutate) {\n    const node = pool.find(n => n.d && n.cell.type === cell.type);\n    const index = cell.i;\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    }\n    else {\n      dom.push({\n        d: false,\n        cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index],\n      });\n    }\n  }\n  dom\n    .filter(n => n.d && n.top !== -9999)\n    .forEach(n => {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n  const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n  const childrenNu = children.length;\n  let child;\n  for (let i = 0; i < dom.length; i++) {\n    const node = dom[i];\n    const cell = node.cell;\n    // the cell change, the content must be updated\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      }\n      else {\n        const newChild = createNode(el, cell.type);\n        child = nodeRender(newChild, cell, i) || newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n      child['$ionCell'] = cell;\n    }\n    else {\n      child = children[i];\n    }\n    // only update position when it changes\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\n    }\n    // update visibility\n    const visible = cell.visible;\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      }\n      else {\n        child.classList.add('virtual-loading');\n      }\n      node.visible = visible;\n    }\n    // dynamic height\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\nconst createNode = (el, type) => {\n  const template = getTemplate(el, type);\n  if (template && el.ownerDocument) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n  return null;\n};\nconst getTemplate = (el, type) => {\n  switch (type) {\n    case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n    case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n    case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n  }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin\n  };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n  const topPos = viewport.top;\n  const bottomPos = viewport.bottom;\n  // find top index\n  let i = 0;\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n  const offset = Math.max(i - buffer - 1, 0);\n  // find bottom index\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n  const end = Math.min(i + buffer, heightIndex.length);\n  const length = end - offset;\n  return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n  const end = range.offset + range.length;\n  return (dirtyIndex <= end ||\n    currentRange.offset !== range.offset ||\n    currentRange.length !== range.length);\n};\nconst findCellIndex = (cells, index) => {\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n  if (index === 0) {\n    return 0;\n  }\n  else if (index === max + 1) {\n    return cells.length;\n  }\n  else {\n    return cells.findIndex(c => c.index === index);\n  }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n  for (let i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n  return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n  const cells = [];\n  const end = len + offset;\n  for (let i = offset; i < end; i++) {\n    const item = items[i];\n    if (headerFn) {\n      const value = headerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight,\n        });\n      }\n    }\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight,\n    });\n    if (footerFn) {\n      const value = footerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value,\n          index: i,\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight,\n        });\n      }\n    }\n  }\n  return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n  let acum = buf[index];\n  for (let i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n  return acum;\n};\nconst resizeBuffer = (buf, len) => {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n  if (buf.length === len) {\n    return buf;\n  }\n  else if (len > buf.length) {\n    const newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  }\n  else {\n    return buf.subarray(0, len);\n  }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n  const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n  return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.range = { offset: 0, length: 0 };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxFooterHeight = 30;\n    this.onScroll = () => {\n      this.updateVirtualScroll();\n    };\n  }\n  itemsChanged() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  componentWillLoad() {\n    console.warn(`[Deprecation Warning]: ion-virtual-scroll has been deprecated and will be removed in Ionic Framework v7.0. See https://ionicframework.com/docs/angular/virtual-scroll for migration steps.`);\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    this.scrollEl = await contentEl.getScrollElement();\n    this.contentEl = contentEl;\n    this.calcCells();\n    this.updateState();\n  }\n  componentDidUpdate() {\n    this.updateState();\n  }\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n  }\n  onResize() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  /**\n   * Returns the position of the virtual item at the given index.\n   */\n  positionForItem(index) {\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n  }\n  /**\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n   * dirty any time the content or their style changes.\n   *\n   * The subset of items to be updated can are specifing by an offset and a length.\n   */\n  async checkRange(offset, len = -1) {\n    // TODO: kind of hacky how we do in-place updated of the cells\n    // array. this part needs a complete refactor\n    if (!this.items) {\n      return;\n    }\n    const length = (len === -1)\n      ? this.items.length - offset\n      : len;\n    const cellIndex = findCellIndex(this.cells, offset);\n    const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n    this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n    this.lastItemLen = this.items.length;\n    this.indexDirty = Math.max(offset - 1, 0);\n    this.scheduleUpdate();\n  }\n  /**\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\n   *\n   * It's equivalent to calling:\n   *\n   * ```js\n   * virtualScroll.checkRange(lastItemLen);\n   * ```\n   */\n  async checkEnd() {\n    if (this.items) {\n      this.checkRange(this.lastItemLen);\n    }\n  }\n  updateVirtualScroll() {\n    // do nothing if virtual-scroll is disabled\n    if (!this.isEnabled || !this.scrollEl) {\n      return;\n    }\n    // unschedule future updates\n    if (this.timerUpdate) {\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = undefined;\n    }\n    // schedule DOM operations into the stencil queue\n    readTask(this.readVS.bind(this));\n    writeTask(this.writeVS.bind(this));\n  }\n  readVS() {\n    const { contentEl, scrollEl, el } = this;\n    let topOffset = 0;\n    let node = el;\n    while (node && node !== contentEl) {\n      topOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n    this.viewportOffset = topOffset;\n    if (scrollEl) {\n      this.viewportHeight = scrollEl.offsetHeight;\n      this.currentScrollTop = scrollEl.scrollTop;\n    }\n  }\n  writeVS() {\n    const dirtyIndex = this.indexDirty;\n    // get visible viewport\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n    // compute lazily the height index\n    const heightIndex = this.getHeightIndex();\n    // get array bounds of visible cells base in the viewport\n    const range = getRange(heightIndex, viewport, 2);\n    // fast path, do nothing\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n    if (!shouldUpdate) {\n      return;\n    }\n    this.range = range;\n    // in place mutation of the virtual DOM\n    updateVDom(this.virtualDom, heightIndex, this.cells, range);\n    // Write DOM\n    // Different code paths taken depending of the render API used\n    if (this.nodeRender) {\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n    }\n    else if (this.domRender) {\n      this.domRender(this.virtualDom);\n    }\n    else if (this.renderItem) {\n      forceUpdate(this);\n    }\n  }\n  updateCellHeight(cell, node) {\n    const update = () => {\n      if (node['$ionCell'] === cell) {\n        const style = window.getComputedStyle(node);\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n        this.setCellHeight(cell, height);\n      }\n    };\n    if (node) {\n      componentOnReady(node, update);\n    }\n    else {\n      update();\n    }\n  }\n  setCellHeight(cell, height) {\n    const index = cell.i;\n    // the cell might changed since the height update was scheduled\n    if (cell !== this.cells[index]) {\n      return;\n    }\n    if (cell.height !== height || cell.visible !== true) {\n      cell.visible = true;\n      cell.height = height;\n      this.indexDirty = Math.min(this.indexDirty, index);\n      this.scheduleUpdate();\n    }\n  }\n  scheduleUpdate() {\n    clearTimeout(this.timerUpdate);\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n  }\n  updateState() {\n    const shouldEnable = !!(this.scrollEl &&\n      this.cells);\n    if (shouldEnable !== this.isEnabled) {\n      this.enableScrollEvents(shouldEnable);\n      if (shouldEnable) {\n        this.updateVirtualScroll();\n      }\n    }\n  }\n  calcCells() {\n    if (!this.items) {\n      return;\n    }\n    this.lastItemLen = this.items.length;\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n    this.indexDirty = 0;\n  }\n  getHeightIndex() {\n    if (this.indexDirty !== Infinity) {\n      this.calcHeightIndex(this.indexDirty);\n    }\n    return this.heightIndex;\n  }\n  calcHeightIndex(index = 0) {\n    // TODO: optimize, we don't need to calculate all the cells\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n    this.indexDirty = Infinity;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.rmEvent) {\n      this.rmEvent();\n      this.rmEvent = undefined;\n    }\n    const scrollEl = this.scrollEl;\n    if (scrollEl) {\n      this.isEnabled = shouldListen;\n      scrollEl.addEventListener('scroll', this.onScroll);\n      this.rmEvent = () => {\n        scrollEl.removeEventListener('scroll', this.onScroll);\n      };\n    }\n  }\n  renderVirtualNode(node) {\n    const { type, value, index } = node.cell;\n    switch (type) {\n      case CELL_TYPE_ITEM: return this.renderItem(value, index);\n      case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n      case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n    }\n  }\n  render() {\n    return (h(Host, { style: {\n        height: `${this.totalHeight}px`\n      } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"itemHeight\": [\"itemsChanged\"],\n    \"headerHeight\": [\"itemsChanged\"],\n    \"footerHeight\": [\"itemsChanged\"],\n    \"items\": [\"itemsChanged\"]\n  }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n  return utils.map(children, (child, i) => {\n    const node = dom[i];\n    const vattrs = child.vattrs || {};\n    let classes = vattrs.class || '';\n    classes += 'virtual-item ';\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n    return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n  });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"]}