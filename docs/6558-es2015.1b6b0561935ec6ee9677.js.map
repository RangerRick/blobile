{"version":3,"mappings":"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","names":["readBlobAsBase64","blob","Promise","resolve","reject","reader","FileReader","onload","base64String","result","base64StringWithoutTags","substr","indexOf","onerror","error","readAsDataURL","encode","str","encodeURIComponent","replace","decodeURIComponent","escape","decode","getCookies","output","map","document","cookie","cookies","split","k","v","trim","entries","Object","key","value","push","buildRequestInit","options","extra","assign","method","headers","type","originalKeys","keys","loweredKeys","toLocaleLowerCase","reduce","acc","index","includes","params","URLSearchParams","data","set","body","toString","form","FormData","forEach","append","Headers","delete","JSON","stringify","request","requestInit","webFetchExtra","urlParams","shouldEncode","accumulator","entry","encodedValue","item","Array","isArray","slice","shouldEncodeUrlParams","url","response","fetch","contentType","get","responseType","ok","json","text","status","post","put","patch","del","WebPlugin","constructor","super","r","this","Request","getCookiesMap","u","Cookie","setCookie","expires","path","encodedKey","getCookie","deleteCookie","clearCookies","Date","toUTCString","uploadFile","formData","name","fetchOptions","downloadFile"],"sources":["webpack:///node_modules/@capacitor-community/http/dist/esm/utils.js","webpack:///node_modules/@capacitor-community/http/dist/esm/cookie.js","webpack:///node_modules/@capacitor-community/http/dist/esm/request.js","webpack:///node_modules/@capacitor-community/http/dist/esm/web.js"],"sourcesContent":["/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64StringWithoutTags);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nexport const encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nexport const decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n","import { encode, decode } from './utils';\n/**\n * Set a cookie\n * @param key The key to set\n * @param value The value to set\n * @param options Optional additional parameters\n */\nexport const setCookie = (key, value, options = {}) => {\n    // Safely Encoded Key/Value\n    const encodedKey = encode(key);\n    const encodedValue = encode(value);\n    // Clean & sanitize options\n    const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n    const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n    document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}`;\n};\n/**\n * Gets all HttpCookies\n */\nexport const getCookies = () => {\n    const output = [];\n    const map = {};\n    if (!document.cookie) {\n        return output;\n    }\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n        let [k, v] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n        k = decode(k).trim();\n        v = decode(v).trim();\n        map[k] = v;\n    }\n    const entries = Object.entries(map);\n    for (const [key, value] of entries) {\n        output.push({\n            key,\n            value,\n        });\n    }\n    return output;\n};\n/**\n * Gets a single HttpCookie given a key\n */\nexport const getCookie = (key) => {\n    const cookies = getCookies();\n    for (const cookie of cookies) {\n        if (cookie.key === key) {\n            return cookie;\n        }\n    }\n    return {\n        key,\n        value: '',\n    };\n};\n/**\n * Deletes a cookie given a key\n * @param key The key of the cookie to delete\n */\nexport const deleteCookie = (key) => {\n    document.cookie = `${key}=; Max-Age=0`;\n};\n/**\n * Clears out cookies by setting them to expire immediately\n */\nexport const clearCookies = () => {\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        document.cookie = cookie\n            .replace(/^ +/, '')\n            .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n    }\n};\n","import { readBlobAsBase64 } from './utils';\n/**\n * Normalize an HttpHeaders map by lowercasing all of the values\n * @param headers The HttpHeaders object to normalize\n */\nconst normalizeHttpHeaders = (headers = {}) => {\n    const originalKeys = Object.keys(headers);\n    const loweredKeys = Object.keys(headers).map(k => k.toLocaleLowerCase());\n    const normalized = loweredKeys.reduce((acc, key, index) => {\n        acc[key] = headers[originalKeys[index]];\n        return acc;\n    }, {});\n    return normalized;\n};\n/**\n * Builds a string of url parameters that\n * @param params A map of url parameters\n * @param shouldEncode true if you should encodeURIComponent() the values (true by default)\n */\nconst buildUrlParams = (params, shouldEncode = true) => {\n    if (!params)\n        return null;\n    const output = Object.entries(params).reduce((accumulator, entry) => {\n        const [key, value] = entry;\n        let encodedValue;\n        let item;\n        if (Array.isArray(value)) {\n            item = '';\n            value.forEach(str => {\n                encodedValue = shouldEncode ? encodeURIComponent(str) : str;\n                item += `${key}=${encodedValue}&`;\n            });\n            // last character will always be \"&\" so slice it off\n            item.slice(0, -1);\n        }\n        else {\n            encodedValue = shouldEncode ? encodeURIComponent(value) : value;\n            item = `${key}=${encodedValue}`;\n        }\n        return `${accumulator}&${item}`;\n    }, '');\n    // Remove initial \"&\" from the reduce\n    return output.substr(1);\n};\n/**\n * Build the RequestInit object based on the options passed into the initial request\n * @param options The Http plugin options\n * @param extra Any extra RequestInit values\n */\nexport const buildRequestInit = (options, extra = {}) => {\n    const output = Object.assign({ method: options.method || 'GET', headers: options.headers }, extra);\n    // Get the content-type\n    const headers = normalizeHttpHeaders(options.headers);\n    const type = headers['content-type'] || '';\n    // Build request initializers based off of content-type\n    if (type.includes('application/x-www-form-urlencoded')) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            params.set(key, value);\n        }\n        output.body = params.toString();\n    }\n    else if (type.includes('multipart/form-data')) {\n        const form = new FormData();\n        if (options.data instanceof FormData) {\n            options.data.forEach((value, key) => {\n                form.append(key, value);\n            });\n        }\n        else {\n            for (let key of Object.keys(options.data)) {\n                form.append(key, options.data[key]);\n            }\n        }\n        output.body = form;\n        const headers = new Headers(output.headers);\n        headers.delete('content-type'); // content-type will be set by `window.fetch` to includy boundary\n        output.headers = headers;\n    }\n    else if (type.includes('application/json') ||\n        typeof options.data === 'object') {\n        output.body = JSON.stringify(options.data);\n    }\n    return output;\n};\n/**\n * Perform an Http request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const request = async (options) => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);\n    const url = urlParams ? `${options.url}?${urlParams}` : options.url;\n    const response = await fetch(url, requestInit);\n    const contentType = response.headers.get('content-type') || '';\n    // Default to 'text' responseType so no parsing happens\n    let { responseType = 'text' } = response.ok ? options : {};\n    // If the response content-type is json, force the response to be json\n    if (contentType.includes('application/json')) {\n        responseType = 'json';\n    }\n    let data;\n    switch (responseType) {\n        case 'arraybuffer':\n        case 'blob':\n            const blob = await response.blob();\n            data = await readBlobAsBase64(blob);\n            break;\n        case 'json':\n            data = await response.json();\n            break;\n        case 'document':\n        case 'text':\n        default:\n            data = await response.text();\n    }\n    // Convert fetch headers to Capacitor HttpHeaders\n    const headers = {};\n    response.headers.forEach((value, key) => {\n        headers[key] = value;\n    });\n    return {\n        data,\n        headers,\n        status: response.status,\n        url: response.url,\n    };\n};\n/**\n * Perform an Http GET request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const get = async (options) => request(Object.assign(Object.assign({}, options), { method: 'GET' }));\n/**\n * Perform an Http POST request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const post = async (options) => request(Object.assign(Object.assign({}, options), { method: 'POST' }));\n/**\n * Perform an Http PUT request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const put = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PUT' }));\n/**\n * Perform an Http PATCH request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const patch = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PATCH' }));\n/**\n * Perform an Http DELETE request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const del = async (options) => request(Object.assign(Object.assign({}, options), { method: 'DELETE' }));\n","import { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n    constructor() {\n        super();\n        /**\n         * Perform an Http request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.request = async (options) => Request.request(options);\n        /**\n         * Perform an Http GET request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.get = async (options) => Request.get(options);\n        /**\n         * Perform an Http POST request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.post = async (options) => Request.post(options);\n        /**\n         * Perform an Http PUT request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.put = async (options) => Request.put(options);\n        /**\n         * Perform an Http PATCH request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.patch = async (options) => Request.patch(options);\n        /**\n         * Perform an Http DELETE request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.del = async (options) => Request.del(options);\n        /**\n         * Gets all HttpCookies as a Map\n         */\n        this.getCookiesMap = async () => {\n            const cookies = Cookie.getCookies();\n            const output = {};\n            for (const cookie of cookies) {\n                output[cookie.key] = cookie.value;\n            }\n            return output;\n        };\n        /**\n         * Get all HttpCookies as an object with the values as an HttpCookie[]\n         */\n        this.getCookies = async (options) => {\n            // @ts-ignore\n            const { url } = options;\n            const cookies = Cookie.getCookies();\n            return { cookies };\n        };\n        /**\n         * Set a cookie\n         * @param key The key to set\n         * @param value The value to set\n         * @param options Optional additional parameters\n         */\n        this.setCookie = async (options) => {\n            const { key, value, expires = '', path = '' } = options;\n            Cookie.setCookie(key, value, { expires, path });\n        };\n        /**\n         * Gets all cookie values unless a key is specified, then return only that value\n         * @param key The key of the cookie value to get\n         */\n        this.getCookie = async (options) => Cookie.getCookie(options.key);\n        /**\n         * Deletes a cookie given a key\n         * @param key The key of the cookie to delete\n         */\n        this.deleteCookie = async (options) => Cookie.deleteCookie(options.key);\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearCookies = async (\n        // @ts-ignore\n        options) => Cookie.clearCookies();\n        /**\n         * Uploads a file through a POST request\n         * @param options TODO\n         */\n        this.uploadFile = async (options) => {\n            const formData = new FormData();\n            formData.append(options.name, options.blob || 'undefined');\n            const fetchOptions = Object.assign(Object.assign({}, options), { body: formData, method: 'POST' });\n            return this.post(fetchOptions);\n        };\n        /**\n         * Downloads a file\n         * @param options TODO\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            const blob = await response.blob();\n            return {\n                blob,\n            };\n        };\n    }\n}\n"]}