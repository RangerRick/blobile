{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":["Route","constructor","hostRef","registerInstance","this","ionRouteDataChanged","createEvent","url","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","connectedCallback","RouteRedirect","ionRouteRedirectChanged","propDidChange","generatePath","segments","filter","s","join","parsePath","path","queryString","qsStart","indexOf","substr","split","map","trim","writeNavState","async","root","chain","direction","index","changed","animation","outlet","searchNavNode","Promise","resolve","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","QUERY","matches","querySelector","undefined","findRouteRedirect","redirects","find","redirect","from","to","i","expected","matchesIDs","ids","len","Math","min","toLowerCase","matchesPath","inputPath","RouterSegments","allparams","matchesDefault","segment","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","assign","routerPathToChain","chains","match","matchedChain","score","computePriority","level","pow","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","node","component","componentProps","nodes","flattenNode","push","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","document","body","window","addEventListener","once","canProceed","runGuards","getPath","setPath","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","startsWith","URL","location","href","pathname","parsedPath","history","waitPromise","routes","group","forEach","r","debug","groupEnd","warn","getRouteId","maxMatches","plainIDs","param","safeWriteNavState","_a","win","replaceState","title","redirectFrom","unlock","lock","p","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","pushState","loc","prefix","hash","redirectFromPath","redirectedFrom","getElement","RouterLink","routerDirection","onClick","openURL","routerAnimation","render","mode","getIonMode","attrs","rel","target","h","Host","class","createColorClasses","color","style"],"mappings":"qTAKA,MAAMA,EAAQ,MACZC,YAAYC,IACVC,OAAiBC,KAAMF,GACvBE,KAAKC,qBAAsBC,OAAYF,KAAM,sBAAuB,GAOpEA,KAAKG,IAAM,GAEbC,SAASC,GACPL,KAAKC,oBAAoBK,KAAKD,GAEhCE,iBAAiBF,EAAUG,GACzB,GAAIH,IAAaG,EACf,OAEF,MAAMC,EAAQJ,EAAWK,OAAOC,KAAKN,GAAY,GAC3CO,EAAQJ,EAAWE,OAAOC,KAAKH,GAAY,GACjD,GAAIC,EAAMI,SAAWD,EAAMC,OAAO,CAIlC,IAAK,MAAMC,KAAOL,EAChB,GAAIJ,EAASS,KAASN,EAASM,GAE7B,YADAd,KAAKI,SAASC,QALhBL,KAAKI,SAASC,GAUlBU,oBACEf,KAAKC,oBAAoBK,OAER,sBAAK,MAAO,CAC7B,IAAO,CAAC,YACR,UAAa,CAAC,YACd,eAAkB,CAAC,uBAIjBU,EAAgB,MACpBnB,YAAYC,IACVC,OAAiBC,KAAMF,GACvBE,KAAKiB,yBAA0Bf,OAAYF,KAAM,0BAA2B,GAE9EkB,gBACElB,KAAKiB,wBAAwBX,OAE/BS,oBACEf,KAAKiB,wBAAwBX,OAEZ,sBAAK,MAAO,CAC7B,KAAQ,CAAC,iBACT,GAAM,CAAC,oBASLa,EAAgBC,GAIb,IAHMA,EACVC,OAAOC,GAAKA,EAAET,OAAS,GACvBU,KAAK,KAuEJC,EAAaC,IACjB,IACIC,EADAN,EAAW,CAAC,IAEhB,GAAY,MAARK,EAAc,CAChB,MAAME,EAAUF,EAAKG,QAAQ,KACzBD,GAAW,IACbD,EAAcD,EAAKI,OAAOF,EAAU,GACpCF,EAAOA,EAAKI,OAAO,EAAGF,IAExBP,EAAWK,EAAKK,MAAM,KACnBC,IAAIT,GAAKA,EAAEU,QACXX,OAAOC,GAAKA,EAAET,OAAS,GACF,IAApBO,EAASP,SACXO,EAAW,CAAC,KAGhB,MAAO,CAAEA,WAAUM,gBAuBfO,EAAgBC,MAAOC,EAAMC,EAAOC,EAAWC,EAAOC,GAAU,EAAOC,KAC3E,IAEE,MAAMC,EAASC,EAAcP,GAE7B,GAAIG,GAASF,EAAMvB,SAAW4B,EAC5B,OAAOF,QAEH,IAAII,QAAQC,IAAWC,OAAiBJ,EAAQG,IACtD,MAAME,EAAQV,EAAME,GACdS,QAAeN,EAAOO,WAAWF,EAAMG,GAAIH,EAAMI,OAAQb,EAAWG,GAc1E,OAXIO,EAAOR,UACTF,EApIqB,OAqIrBE,GAAU,GAGZA,QAAgBN,EAAcc,EAAOI,QAASf,EAAOC,EAAWC,EAAQ,EAAGC,EAASC,GAGhFO,EAAOK,mBACHL,EAAOK,cAERb,EAET,MAAOc,GAEL,OADAC,QAAQC,MAAMF,IACP,IAmCLG,EAAQ,6FACRd,EAAiBP,IACrB,IAAKA,EACH,OAEF,GAAIA,EAAKsB,QAAQD,GACf,OAAOrB,EAET,MAAMM,EAASN,EAAKuB,cAAcF,GAClC,OAAOf,QAAuCA,OAASkB,GA4BnDC,EAAoB,CAACnC,EAAMoC,IACxBA,EAAUC,KAAKC,GArBA,EAACtC,EAAMsC,KAC7B,MAAM,KAAEC,EAAF,GAAQC,GAAOF,EACrB,QAAWJ,IAAPM,EACF,OAAO,EAET,GAAID,EAAKnD,OAASY,EAAKZ,OACrB,OAAO,EAET,IAAK,IAAIqD,EAAI,EAAGA,EAAIF,EAAKnD,OAAQqD,IAAK,CACpC,MAAMC,EAAWH,EAAKE,GACtB,GAAiB,MAAbC,EACF,OAAO,EAET,GAAIA,IAAa1C,EAAKyC,GACpB,OAAO,EAGX,OAAOF,EAAKnD,SAAWY,EAAKZ,QAjBN,CAqB4BY,EAAMsC,IAEpDK,EAAa,CAACC,EAAKjC,KACvB,MAAMkC,EAAMC,KAAKC,IAAIH,EAAIxD,OAAQuB,EAAMvB,QACvC,IAAIqD,EAAI,EACR,KAAOA,EAAII,GACLD,EAAIH,GAAGO,gBAAkBrC,EAAM8B,GAAGjB,GADxBiB,KAKhB,OAAOA,GAEHQ,EAAc,CAACC,EAAWvC,KAC9B,MAAMhB,EAAW,IAAIwD,EAAeD,GACpC,IACIE,EADAC,GAAiB,EAErB,IAAK,IAAIZ,EAAI,EAAGA,EAAI9B,EAAMvB,OAAQqD,IAAK,CACrC,MAAMzC,EAAOW,EAAM8B,GAAGzC,KACtB,GAAgB,KAAZA,EAAK,GACPqD,GAAiB,MAEd,CACH,IAAK,MAAMC,KAAWtD,EAAM,CAC1B,MAAMuD,EAAO5D,EAAS6D,OAEtB,GAAmB,MAAfF,EAAQ,GAAY,CACtB,GAAa,KAATC,EACF,OAAO,KAETH,EAAYA,GAAa,IACVA,EAAUX,KAAOW,EAAUX,GAAK,KACxCa,EAAQG,MAAM,IAAMF,OAExB,GAAIA,IAASD,EAChB,OAAO,KAGXD,GAAiB,GAMrB,OAHiBA,GACbA,KAAwC,KAApB1D,EAAS6D,QAGxB,KAELJ,EACKzC,EAAML,IAAI,CAACe,EAAOoB,MACvBjB,GAAIH,EAAMG,GACVxB,KAAMqB,EAAMrB,KACZyB,OAAQiC,EAAYrC,EAAMI,OAAQ2B,EAAUX,IAC5CkB,YAAatC,EAAMsC,YACnBC,YAAavC,EAAMuC,eAGhBjD,GAIH+C,EAAc,CAACG,EAAGC,IACfD,GAAKC,EAAI7E,OAAO8E,OAAO9E,OAAO8E,OAAO,GAAIF,GAAIC,QAAK5B,EAsBrD8B,EAAoB,CAAChE,EAAMiE,KAC/B,IAAIC,EAAQ,KACRlC,EAAU,EACd,IAAK,MAAMrB,KAASsD,EAAQ,CAC1B,MAAME,EAAelB,EAAYjD,EAAMW,GACvC,GAAqB,OAAjBwD,EAAuB,CACzB,MAAMC,EAAQC,EAAgBF,GAC1BC,EAAQpC,IACVA,EAAUoC,EACVF,EAAQC,IAId,OAAOD,GAEHG,EAAmB1D,IACvB,IAAIyD,EAAQ,EACRE,EAAQ,EACZ,IAAK,MAAMjD,KAASV,EAClB,IAAK,MAAMX,KAAQqB,EAAMrB,KACP,MAAZA,EAAK,GACPoE,GAAStB,KAAKyB,IAAI,EAAGD,GAEL,KAATtE,IACPoE,GAAStB,KAAKyB,IAAI,EAAGD,IAEvBA,IAGJ,OAAOF,GAET,MAAMjB,EACJ/E,YAAY4B,GACVzB,KAAKyB,KAAOA,EAAKyD,QAEnBD,OACE,OAAIjF,KAAKyB,KAAKZ,OAAS,EACdb,KAAKyB,KAAKwE,QAEZ,IAIX,MAAMC,EAAW,CAACC,EAAIC,IAChBA,KAAQD,EACHA,EAAGC,GAERD,EAAGE,aAAaD,GACXD,EAAGG,aAAaF,GAElB,KAEHG,EAAiBpE,GACdqE,MAAMxC,KAAK7B,EAAKsE,UACpBpF,OAAO8E,GAAqB,uBAAfA,EAAGO,SAChB3E,IAAIoE,IACL,MAAMlC,EAAKiC,EAASC,EAAI,MACxB,MAAO,CACLnC,KAAMxC,EAAU0E,EAASC,EAAI,SAAS/E,SACtC6C,GAAU,MAANA,OAAaN,EAAYnC,EAAUyC,MAIvC0C,EAAcxE,GACXyE,EAAkBC,EAAe1E,IAEpC0E,EAAkBC,GACfN,MAAMxC,KAAK8C,EAAKL,UACpBpF,OAAO8E,GAAqB,cAAfA,EAAGO,SAA2BP,EAAGY,WAC9ChF,IAAIoE,IACL,MAAMY,EAAYb,EAASC,EAAI,aAC/B,MAAO,CACL1E,KAAMD,EAAU0E,EAASC,EAAI,QAAQ/E,SACrC6B,GAAI8D,EAAUtC,cACdvB,OAAQiD,EAAGa,eACX3B,YAAac,EAAGd,YAChBD,YAAae,EAAGf,YAChBqB,SAAUI,EAAeV,MAIzBS,EAAqBK,IACzB,MAAMvB,EAAS,GACf,IAAK,MAAMoB,KAAQG,EACjBC,EAAY,GAAIxB,EAAQoB,GAE1B,OAAOpB,GAEHwB,EAAc,CAAC9E,EAAOsD,EAAQoB,KASlC,IARA1E,EAAQA,EAAM8C,SACRiC,KAAK,CACTlE,GAAI6D,EAAK7D,GACTxB,KAAMqF,EAAKrF,KACXyB,OAAQ4D,EAAK5D,OACbmC,YAAayB,EAAKzB,YAClBD,YAAa0B,EAAK1B,cAES,IAAzB0B,EAAKL,SAAS5F,OAIlB,IAAK,MAAMuG,KAASN,EAAKL,SACvBS,EAAY9E,EAAOsD,EAAQ0B,QAJ3B1B,EAAOyB,KAAK/E,IAQViF,EAAS,MACbxH,YAAYC,IACVC,OAAiBC,KAAMF,GACvBE,KAAKsH,oBAAqBpH,OAAYF,KAAM,qBAAsB,GAClEA,KAAKuH,mBAAoBrH,OAAYF,KAAM,oBAAqB,GAChEA,KAAKwH,aAAe,KACpBxH,KAAKyH,MAAO,EACZzH,KAAK0H,MAAQ,EACb1H,KAAK2H,UAAY,EAMjB3H,KAAKmC,KAAO,IAeZnC,KAAK4H,SAAU,EAEM,gCAxQnBlF,EAAcmF,SAASC,MAClBnF,QAAQC,UAEV,IAAID,QAAQC,IACjBmF,OAAOC,iBAAiB,iBAAkBpF,EAAS,CAAEqF,MAAM,OAsQ3D,MAAMC,QAAmBlI,KAAKmI,UAAUnI,KAAKoI,WAC7C,IAAmB,IAAfF,GACF,GAA0B,iBAAfA,EAAyB,CAClC,MAAM,SAAEnE,GAAamE,EACfzG,EAAOD,EAAUuC,GACvB/D,KAAKqI,QAAQ5G,EAAKL,SA7bC,OA6b6BK,EAAKC,mBAC/C1B,KAAKsI,kBAAkB7G,EAAKL,SA9bf,oBAkcfpB,KAAKuI,kBAGfC,mBACET,OAAOC,iBAAiB,2BAA2BS,OAASzI,KAAK0I,kBAAkBC,KAAK3I,MAAO,KAC/F+H,OAAOC,iBAAiB,uBAAuBS,OAASzI,KAAKuI,gBAAgBI,KAAK3I,MAAO,MAE3E,mBACd,MAAMqC,EAAYrC,KAAK4I,mBACvB,IAAIxH,EAAWpB,KAAKoI,UACpB,MAAMF,QAAmBlI,KAAKmI,UAAU/G,GACxC,IAAmB,IAAf8G,EAAqB,CACvB,GAA0B,iBAAfA,EAIT,OAAO,EAHP9G,EAAWI,EAAU0G,EAAWnE,UAAU3C,SAM9C,OAAOpB,KAAKsI,kBAAkBlH,EAAUiB,GAE1CwG,aAAaC,GACXA,EAAGC,OAAOC,SAAS,EAAGC,IACpBjJ,KAAKkJ,OACLD,MAIe,sBACjB,MAAMf,QAAmBlI,KAAKmI,YAC9B,OAAmB,IAAfD,GACwB,iBAAfA,GACFA,EAAWnE,SAcd,WAAC5D,EAAKkC,EAAY,UAAWG,GACjCrC,EAAIgJ,WAAW,OACjBhJ,EAAO,IAAIiJ,IAAIjJ,EAAK4H,OAAOsB,SAASC,MAAOC,UAE7C,IAAIC,EAAahI,EAAUrB,GAC3B,MAAM+H,QAAmBlI,KAAKmI,UAAUqB,EAAWpI,UACnD,IAAmB,IAAf8G,EAAqB,CACvB,GAA0B,iBAAfA,EAIT,OAAO,EAHPsB,EAAahI,EAAU0G,EAAWnE,UAOtC,OADA/D,KAAKqI,QAAQmB,EAAWpI,SAAUiB,EAAWmH,EAAW9H,aACjD1B,KAAKsI,kBAAkBkB,EAAWpI,SAAUiB,EAAWG,GAKhE0G,OAEE,OADAnB,OAAO0B,QAAQP,OACRvG,QAAQC,QAAQ5C,KAAK0J,aAGd,mBAvaGC,KACnBrG,QAAQsG,MAAO,qBAAoBD,EAAO9I,WAC1C,IAAK,MAAMuB,KAASuH,EAAQ,CAC1B,MAAMlI,EAAO,GACbW,EAAMyH,QAAQC,GAAKrI,EAAK0F,QAAQ2C,EAAErI,OAClC,MAAM4C,EAAMjC,EAAML,IAAI+H,GAAKA,EAAE7G,IAC7BK,QAAQyG,MAAO,MAAK5I,EAAaM,KAAS,wCAAyC,OAAS,IAAG4C,EAAI9C,KAAK,UAE1G+B,QAAQ0G,YARWL,CAwaLhD,EAAW3G,KAAKmG,KA9ZRtC,KACtBP,QAAQsG,MAAO,wBAAuB/F,EAAUhD,WAChD,IAAK,MAAMkD,KAAYF,EACjBE,EAASE,IACXX,QAAQyG,MAAM,SAAW,MAAK5I,EAAa4C,EAASC,QAAS,oBAAqB,QAAU,MAAK7C,EAAa4C,EAASE,GAAG7C,YAAa,qBAG3IkC,QAAQ0G,YAPcnG,CA+ZL0C,EAAcvG,KAAKmG,KAGpB,iBAAC9D,GACf,GAAIrC,KAAKyH,KAEP,OADAnE,QAAQ2G,KAAK,0DACN,EAET,MAAM,IAAE5F,EAAF,OAAO5B,QA9XIP,WACnB,MAAMmC,EAAM,GACZ,IAAI5B,EACAqE,EA2XyCiB,OAAOF,SAASC,KAzX7D,KACErF,EAASC,EAAcoE,GACnBrE,GAAQ,CACV,MAAMQ,QAAWR,EAAOyH,aACxB,IAAIjH,EAMF,MALA6D,EAAO7D,EAAGE,QACVF,EAAGE,aAAUQ,EACbU,EAAI8C,KAAKlE,GAUf,MAAO,CAAEoB,MAAK5B,WAtBKP,GAgYXE,EA5Pe,EAACiC,EAAKqB,KAC7B,IAAIC,EAAQ,KACRwE,EAAa,EACjB,MAAMC,EAAW/F,EAAItC,IAAImC,GAAKA,EAAEjB,IAChC,IAAK,MAAMb,KAASsD,EAAQ,CAC1B,MAAMG,EAAQzB,EAAWgG,EAAUhI,GAC/ByD,EAAQsE,IACVxE,EAAQvD,EACR+H,EAAatE,GAGjB,OAAIF,EACKA,EAAM5D,IAAI,CAACe,EAAOoB,MACvBjB,GAAIH,EAAMG,GACVxB,KAAMqB,EAAMrB,KACZyB,OAAQiC,EAAYrC,EAAMI,OAAQmB,EAAIH,IAAMG,EAAIH,GAAGhB,WAGhD,MAlBgB,CA4PUmB,EADhBsC,EAAW3G,KAAKmG,KAE/B,IAAK/D,EAEH,OADAkB,QAAQ2G,KAAK,oCAAqC5F,EAAItC,IAAImC,GAAKA,EAAEjB,MAC1D,EAET,MAAMxB,EA5fWW,KACnB,MAAMX,EAAO,GACb,IAAK,MAAMqB,KAASV,EAClB,IAAK,MAAM2C,KAAWjC,EAAMrB,KAC1B,GAAmB,MAAfsD,EAAQ,GAAY,CACtB,MAAMsF,EAAQvH,EAAMI,QAAUJ,EAAMI,OAAO6B,EAAQG,MAAM,IACzD,IAAKmF,EACH,OAAO,KAET5I,EAAK0F,KAAKkD,OAES,KAAZtF,GACPtD,EAAK0F,KAAKpC,GAIhB,OAAOtD,GAhBYW,CA4fQA,GACzB,OAAKX,GAILzB,KAAKqI,QAAQ5G,EAAMY,SACbrC,KAAKsK,kBAAkB7H,EAAQL,EAhiBd,OAgiByCX,EAAM,KAAM4C,EAAIxD,SACzE,IALLyC,QAAQ2G,KAAK,oFACN,GAOXvB,oBACE,MAAMjH,EAAOzB,KAAKoI,UACd3G,GAAQmC,EAAkBnC,EAAM8E,EAAcvG,KAAKmG,MACrDnG,KAAKsI,kBAAkB7G,EAviBF,QA2iBzB8G,kBACE,OAAOvI,KAAKsI,kBAAkBtI,KAAKoI,UA5iBZ,QA8iBzBQ,mBACE,IAAI2B,EACJ,MAAMC,EAAMzC,OACc,OAAtByC,EAAIf,QAAQ/B,QACd1H,KAAK0H,QACL8C,EAAIf,QAAQgB,aAAazK,KAAK0H,MAAO8C,EAAI3C,SAAS6C,MAAwC,QAAhCH,EAAKC,EAAI3C,SAASwB,gBAA6B,IAAPkB,OAAgB,EAASA,EAAGjB,OAEhI,MAAM5B,EAAQ8C,EAAIf,QAAQ/B,MACpBC,EAAY3H,KAAK2H,UAEvB,OADA3H,KAAK2H,UAAYD,EACbA,EAAQC,GAAcD,GAASC,GAAaA,EAAY,EAvjBlC,UA0jBtBD,EAAQC,EAzjBW,OAFA,OAgkBF,wBAAClG,EAAMY,EAAWG,GACvC,IAAKf,EAEH,OADA6B,QAAQC,MAAM,oDACP,EAGT,MAAMM,EAAY0C,EAAcvG,KAAKmG,IAC/BpC,EAAWH,EAAkBnC,EAAMoC,GACzC,IAAI8G,EAAe,KACnB,GAAI5G,EAAU,CACZ,MAAM,SAAE3C,EAAF,YAAYM,GAAgBqC,EAASE,GAC3CjE,KAAKqI,QAAQjH,EAAUiB,EAAWX,GAClCiJ,EAAe5G,EAASC,KACxBvC,EAAOL,EAGT,MAAMuI,EAAShD,EAAW3G,KAAKmG,IACzB/D,EAAQqD,EAAkBhE,EAAMkI,GACtC,OAAKvH,EAKEpC,KAAKsK,kBAAkBzC,SAASC,KAAM1F,EAAOC,EAAWZ,EAAMkJ,EAAc,EAAGnI,IAJpFc,QAAQC,MAAM,mDACP,GAKY,wBAACuD,EAAM1E,EAAOC,EAAWZ,EAAMkJ,EAAcrI,EAAQ,EAAGE,GAC7E,MAAMoI,QAAe5K,KAAK6K,OAC1B,IAAItI,GAAU,EACd,IACEA,QAAgBvC,KAAKiC,cAAc6E,EAAM1E,EAAOC,EAAWZ,EAAMkJ,EAAcrI,EAAOE,GAExF,MAAOa,GACLC,QAAQC,MAAMF,GAGhB,OADAuH,IACOrI,EAEC,aACR,MAAMuI,EAAI9K,KAAK0J,YACf,IAAI9G,EAKJ,OAJA5C,KAAK0J,YAAc,IAAI/G,QAAQmH,GAAKlH,EAAUkH,QACpCnG,IAANmH,SACIA,EAEDlI,EAMM,gBAACqB,EAAKjE,KAAKoI,UAAWpE,GAInC,QAHaL,IAATK,IACFA,EAAOxC,EAAUxB,KAAKwH,cAAcpG,WAEjC6C,IAAOD,EACV,OAAO,EAET,MAAM2F,EAAShD,EAAW3G,KAAKmG,IACzB4E,EAAYtF,EAAkBzB,EAAM2F,GACpCqB,EAAkBD,GAAaA,EAAUA,EAAUlK,OAAS,GAAGwE,YAC/D4F,GAAWD,SAAwBA,IACzC,IAAiB,IAAbC,GAA0C,iBAAbA,EAC/B,OAAOA,EAET,MAAMC,EAAUzF,EAAkBxB,EAAI0F,GAChCwB,EAAkBD,GAAWA,EAAQA,EAAQrK,OAAS,GAAGuE,YAC/D,OAAO+F,GAAkBA,IAER,oBAACrE,EAAM1E,EAAOC,EAAWZ,EAAMkJ,EAAcrI,EAAQ,EAAGE,GACzE,GAAIxC,KAAKyH,KAEP,OADAnE,QAAQ2G,KAAK,0DACN,EAETjK,KAAKyH,MAAO,EAEZ,MAAM2D,EAAapL,KAAKqL,iBAAiB5J,EAAMkJ,GAC3CS,GACFpL,KAAKsH,mBAAmBhH,KAAK8K,GAE/B,MAAM7I,QAAgBN,EAAc6E,EAAM1E,EAAOC,EAAWC,GAAO,EAAOE,GAM1E,OALAxC,KAAKyH,MAAO,EAER2D,GACFpL,KAAKuH,kBAAkBjH,KAAK8K,GAEvB7I,EAET8F,QAAQ5G,EAAMY,EAAWX,GACvB1B,KAAK0H,QAnoBS,EAAC+B,EAAStH,EAAMyF,EAASnG,EAAMY,EAAWqF,EAAOhG,KACjE,MAAMvB,EAXY,EAACiB,EAAUwG,EAASlG,KACtC,IAAIvB,EAAMgB,EAAaC,GAOvB,OANIwG,IACFzH,EAAM,IAAMA,QAEMwD,IAAhBjC,IACFvB,GAAO,IAAMuB,GAERvB,GARW,CAWM,IAAIqB,EAmoBAxB,KAAKmC,MAnoBWf,YAAaK,GAAOmG,EAASlG,GArB7C,YAsBxBW,EACFoH,EAAQ6B,UAAU5D,EAAO,GAAIvH,GAG7BsJ,EAAQgB,aAAa/C,EAAO,GAAIvH,IANlB,CAooBJ4H,OAAO0B,QAASzJ,EAAWA,KAAK4H,QAASnG,EAAMY,EAAWrC,KAAK0H,MAAOhG,GAElF0G,UACE,MAtlBa,EAACmD,EAAKpJ,EAAMyF,KAC3B,MAAM4D,EAAShK,EAqlBoBxB,KAAKmC,MArlBTf,SACzBmI,EAAW3B,EAAU2D,EAAIE,KAAKvG,MAAM,GAAKqG,EAAIhC,SAEnD,MArBmB,EAACiC,EAAQ/J,KAC5B,GAAI+J,EAAO3K,OAASY,EAAKZ,OACvB,OAAO,KAET,GAAI2K,EAAO3K,QAAU,GAAmB,KAAd2K,EAAO,GAC/B,OAAO/J,EAET,IAAK,IAAIyC,EAAI,EAAGA,EAAIsH,EAAO3K,OAAQqD,IACjC,GAAIsH,EAAOtH,KAAOzC,EAAKyC,GACrB,OAAO,KAGX,OAAIzC,EAAKZ,SAAW2K,EAAO3K,OAClB,CAAC,IAEHY,EAAKyD,MAAMsG,EAAO3K,SAfN,CAqBC2K,EADPhK,EAAU+H,GAAUnI,WAHlB,CAslBG2G,OAAOsB,SAAUrJ,EAAWA,KAAK4H,SAEnDyD,iBAAiB5J,EAAMiK,GACrB,MAAM1H,EAAOhE,KAAKwH,aACZvD,EAAK9C,EAAaM,GAExB,OADAzB,KAAKwH,aAAevD,EAChBA,IAAOD,EACF,KAGF,CACLA,OACA2H,eAHqBD,EAAmBvK,EAAauK,GAAoB,KAIzEzH,MAGE,SAAK,OAAO2H,OAAW5L,QAKzB6L,EAAa,MACjBhM,YAAYC,IACVC,OAAiBC,KAAMF,GAKvBE,KAAK8L,gBAAkB,UACvB9L,KAAK+L,QAAWjD,KACdkD,OAAQhM,KAAKsJ,KAAMR,EAAI9I,KAAK8L,gBAAiB9L,KAAKiM,kBAGtDC,SACE,MAAMC,GAAOC,OAAWpM,MAClBqM,EAAQ,CACZ/C,KAAMtJ,KAAKsJ,KACXgD,IAAKtM,KAAKsM,IACVC,OAAQvM,KAAKuM,QAEf,OAAQC,OAAEC,IAAM,CAAEV,QAAS/L,KAAK+L,QAASW,OAAOC,OAAmB3M,KAAK4M,MAAO,CAC3E,CAACT,IAAO,EACR,mBAAmB,MACfK,OAAE,IAAK9L,OAAO8E,OAAO,GAAI6G,IAAQG,OAAE,OAAQ,UAGvDX,EAAWgB,MA3BW","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\nimport { c as componentOnReady, n as debounce } from './helpers-dd7e4b7b.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let i = 0;\n  for (; i < len; i++) {\n    if (ids[i].toLowerCase() !== chain[i].id) {\n      break;\n    }\n  }\n  return i;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  const plainIDs = ids.map(i => i.id);\n  for (const chain of chains) {\n    const score = matchesIDs(plainIDs, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * By default `ion-router` will match the routes at the root path (\"/\").\n     * That can be changed when\n     *\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getPath());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getPath();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    let parsedPath = parsePath(url);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments, queryString } = redirect.to;\n      this.setPath(segments, direction, queryString);\n      redirectFrom = redirect.from;\n      path = segments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  async runGuards(to = this.getPath(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = routerPathToChain(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"]}