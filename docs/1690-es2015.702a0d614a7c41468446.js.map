{"version":3,"mappings":"wNAAWA,EAAW,MACrB,OAAUA,EAIRA,IAAgBA,EAAc,KAHjBA,EAAYC,WAAgB,GAAK,aAC7CD,EAAYA,EAAYE,KAAU,GAAK,OACvCF,EAAYA,EAAYG,OAAY,GAAK,SAJlCH,EACV,IAAUA,GADW,GCEf,gBAA6BI,KAChCC,cACIC,MAAM,CACFC,KAAM,cACNC,UAAW,CAAC,SAEhBC,KAAKC,QAAS,EAEZC,UAAUC,GAAS,qCAErB,GADAC,QAAQC,MAAO,4BAA2BF,EAAQG,SAC9CH,EAAQG,IAIR,MAAM,IAAIC,MAAM,mBAHhBC,EAAKF,IAAMH,EAAQG,KAHF,GASnBG,OAAO,qCAET,GADAL,QAAQC,MAAO,0BACVK,EAAKJ,IACN,MAAM,IAAIC,MAAM,kCAEpBG,EAAKC,gBAAgB,oBAAqB,CACtCC,MAAOrB,eAEXmB,EAAKG,YAAc,IAAIC,OAAOC,YAAYL,EAAKJ,KAC/CI,EAAKG,YAAYG,OAASN,EAAKO,OAAOC,KAAKR,GAC3CA,EAAKG,YAAYM,UAAYT,EAAKU,UAAUF,KAAKR,GACjDA,EAAKG,YAAYQ,QAAUX,EAAKY,QAAQJ,KAAKR,IAXpC,GAabY,QAAQC,GACJvB,KAAKW,gBAAgB,QAAS,CAAEa,MAAc,MAAPD,OAA+B,EAASA,EAAGE,UAEtFL,UAAUG,GACFvB,KAAKC,QACLD,KAAKW,gBAAgB,UAAW,CAAEc,QAAgB,MAAPF,OAA+B,EAASA,EAAGG,OAG9FT,OAAOM,GACHvB,KAAKC,QAAS,EACdD,KAAKW,gBAAgB,OAAQ,CAAEc,QAAgB,MAAPF,OAA+B,EAASA,EAAGE,UACnFzB,KAAKW,gBAAgB,oBAAqB,CAAEC,MAAOrB,SAEjDoC,QAAQ,qCACVvB,QAAQC,MAAO,0BACfK,EAAKT,QAAS,EACVS,EAAKG,cACLH,EAAKG,YAAYc,QACjBjB,EAAKG,YAAYG,OAAS,KAC1BN,EAAKG,YAAYM,UAAY,KAC7BT,EAAKG,YAAYQ,QAAU,KAC3BX,EAAKG,YAAc,KACnBH,EAAKC,gBAAgB,oBAAqB,CACtCC,MAAOrB,aAVL,IAelB,MAAMqC,EAAwB,IAAIC,KAGlCC,MAAkBF","names":["READY_STATE","CONNECTING","OPEN","CLOSED","WebPlugin","constructor","super","name","platforms","this","opened","configure","options","console","debug","url","Error","c","open","e","notifyListeners","state","eventSource","window","EventSource","onopen","onOpen","bind","onmessage","onMessage","onerror","onError","ev","error","message","data","close","EventSourcePluginImpl","EventSourceWeb","registerWebPlugin"],"sources":["webpack:///node_modules/capacitor-eventsource/dist/esm/definitions.js","webpack:///node_modules/capacitor-eventsource/dist/esm/web.js"],"sourcesContent":["export var READY_STATE;\n(function (READY_STATE) {\n    READY_STATE[READY_STATE[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    READY_STATE[READY_STATE[\"OPEN\"] = 1] = \"OPEN\";\n    READY_STATE[READY_STATE[\"CLOSED\"] = 2] = \"CLOSED\";\n})(READY_STATE || (READY_STATE = {}));\n","import { WebPlugin } from '@capacitor/core';\nimport { READY_STATE, } from './definitions';\nexport class EventSourceWeb extends WebPlugin {\n    constructor() {\n        super({\n            name: 'EventSource',\n            platforms: ['web'],\n        });\n        this.opened = false;\n    }\n    async configure(options) {\n        console.debug(`EventSourceWeb.configure(${options.url})`);\n        if (options.url) {\n            this.url = options.url;\n        }\n        else {\n            throw new Error('url is required');\n        }\n    }\n    async open() {\n        console.debug(`EventSourceWeb.open()`);\n        if (!this.url) {\n            throw new Error('You must call configure first!');\n        }\n        this.notifyListeners('readyStateChanged', {\n            state: READY_STATE.CONNECTING,\n        });\n        this.eventSource = new window.EventSource(this.url);\n        this.eventSource.onopen = this.onOpen.bind(this);\n        this.eventSource.onmessage = this.onMessage.bind(this);\n        this.eventSource.onerror = this.onError.bind(this);\n    }\n    onError(ev) {\n        this.notifyListeners('error', { error: ev === null || ev === void 0 ? void 0 : ev.message });\n    }\n    onMessage(ev) {\n        if (this.opened) {\n            this.notifyListeners('message', { message: ev === null || ev === void 0 ? void 0 : ev.data });\n        }\n    }\n    onOpen(ev) {\n        this.opened = true;\n        this.notifyListeners('open', { message: ev === null || ev === void 0 ? void 0 : ev.message });\n        this.notifyListeners('readyStateChanged', { state: READY_STATE.OPEN });\n    }\n    async close() {\n        console.debug(`EventSourceWeb.close()`);\n        this.opened = false;\n        if (this.eventSource) {\n            this.eventSource.close();\n            this.eventSource.onopen = null;\n            this.eventSource.onmessage = null;\n            this.eventSource.onerror = null;\n            this.eventSource = null;\n            this.notifyListeners('readyStateChanged', {\n                state: READY_STATE.CLOSED,\n            });\n        }\n    }\n}\nconst EventSourcePluginImpl = new EventSourceWeb();\nexport { EventSourcePluginImpl as EventSource };\nimport { registerWebPlugin } from '@capacitor/core';\nregisterWebPlugin(EventSourcePluginImpl);\n"]}