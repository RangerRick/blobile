{"version":3,"sources":["webpack:///node_modules/@capacitor/device/dist/esm/web.js"],"names":["DeviceWeb","uuid","this","getUid","navigator","userAgent","unavailable","ua","uaFields","parseUa","model","platform","operatingSystem","osVersion","manufacturer","vendor","isVirtual","webViewVersion","browserVersion","getBattery","battery","batteryLevel","level","isCharging","charging","value","language","start","indexOf","end","fields","substring","tmpFields","replace","split","pop","oscpu","lastParts","length","test","window","MSStream","isFirefox","InstallTrigger","isSafari","ApplePaySession","isChrome","chrome","isEdge","isFirefoxIOS","isChromeIOS","isEdgeIOS","searchWord","word","includes","version","reverse","join","uid","localStorage","getItem","uuid4","setItem","c","r","Math","random","toString","WebPlugin"],"mappings":"8jFACaA,E,mYACE,qHACA,CACHC,KAAMC,KAAKC,WAFR,8C,+FAKE,uGACgB,oBAAdC,WAA8BA,UAAUC,UAD1C,sBAECH,KAAKI,YAAY,4CAFlB,cAIHC,EAAKH,UAAUC,UACfG,EAAWN,KAAKO,QAAQF,GALrB,kBAMF,CACHG,MAAOF,EAASE,MAChBC,SAAU,MACVC,gBAAiBJ,EAASI,gBAC1BC,UAAWL,EAASK,UACpBC,aAAcV,UAAUW,OACxBC,WAAU,EACVC,eAAgBT,EAASU,iBAbpB,8C,sGAgBO,qGACS,oBAAdd,WAA8BA,UAAUe,WADnC,sBAENjB,KAAKI,YAAY,4CAFX,cAIZc,EAAU,GAJE,kBAMIhB,UAAUe,aANd,OAMZC,EANY,wFAWT,CACHC,aAAcD,EAAQE,MACtBC,WAAYH,EAAQI,WAbR,uD,uGAgBC,qHACV,CACHC,MAAOrB,UAAUsB,WAFJ,yC,kEAKrBjB,SAAQF,GACJ,IAAMC,EAAW,GACXmB,EAAQpB,EAAGqB,QAAQ,KAAO,EAC5BC,EAAMtB,EAAGqB,QAAQ,kBACU,IAA3BrB,EAAGqB,QAAQ,aACXC,EAAMtB,EAAGqB,QAAQ,YAErB,IAAME,EAASvB,EAAGwB,UAAUJ,EAAOE,GACnC,IAA+B,IAA3BtB,EAAGqB,QAAQ,WAAmB,CAC9B,IAAMI,EAAYF,EAAOG,QAAQ,OAAQ,IAAIC,MAAM,MAAMC,MACrDH,IACAxB,EAASE,MAAQsB,EAAUE,MAAM,UAAU,IAE/C1B,EAASK,UAAYiB,EAAOI,MAAM,MAAM,QAIxC,GADA1B,EAASE,MAAQoB,EAAOI,MAAM,MAAM,GACX,oBAAd9B,WAA6BA,UAAUgC,MAC9C5B,EAASK,UAAYT,UAAUgC,WAG/B,IAA+B,IAA3B7B,EAAGqB,QAAQ,WACXpB,EAASK,UAAYiB,MAEpB,CACD,IAAME,EAAYF,EAAOI,MAAM,MAAMC,MACrC,GAAIH,EAAW,CACX,IAAMK,EAAYL,EACbC,QAAQ,iBAAkB,IAC1BC,MAAM,KACX1B,EAASK,UAAYwB,EAAUA,EAAUC,OAAS,GAAGL,QAAQ,KAAM,MAM/EzB,EAASI,gBADT,WAAW2B,KAAKhC,GACW,UAEtB,mBAAmBgC,KAAKhC,KAAQiC,OAAOC,SACjB,MAEtB,MAAMF,KAAKhC,GACW,UAEtB,OAAOgC,KAAKhC,GACU,MAGA,UAG/B,IAAMmC,IAAcF,OAAOG,eACrBC,IAAaJ,OAAOK,gBACpBC,IAAaN,OAAOO,OACpBC,EAAS,MAAMT,KAAKhC,GACpB0C,EAAe,QAAQV,KAAKhC,GAC5B2C,EAAc,QAAQX,KAAKhC,GAC3B4C,EAAY,SAASZ,KAAKhC,GAEhC,GAAIqC,GACCE,IAAaE,GACdC,GACAC,GACAC,EAAW,CAKX,IAAIC,EAEAA,EADAH,EACa,QAERC,EACQ,QAERC,EACQ,SAERP,EACQ,UAGA,SAEjB,IArBW,MAqBGrC,EAAG2B,MAAM,MArBZ,IAsBX,gCAAWmB,EAAX,QACI,GAAIA,EAAKC,SAASF,GAAa,CAC3B,IAAMG,EAAUF,EAAKnB,MAAM,KAAK,GAChC1B,EAASU,eAAiBqC,IAzBvB,oCA6BV,GAAIb,GAAaM,EAAQ,CAC1B,IAEMO,EAFYhD,EAAG2B,MAAM,IAAIsB,UAAUC,KAAK,IACbvB,MAAM,KAAK,GACbA,MAAM,IAAIsB,UAAUC,KAAK,IACxDjD,EAASU,eAAiBqC,EAE9B,OAAO/C,I,oBAEXL,WACI,GAAsB,oBAAXqC,OAAwB,CAC/B,IAAIkB,EAAMlB,OAAOmB,aAAaC,QAAQ,WACtC,OAAIF,IAGJA,EAAMxD,KAAK2D,QACXrB,OAAOmB,aAAaG,QAAQ,UAAWJ,GAChCA,GAEX,OAAOxD,KAAK2D,U,mBAEhBA,WACI,MAAO,uCAAuC5B,QAAQ,QAAS,SAAU8B,GACrE,IAAMC,EAAqB,GAAhBC,KAAKC,SAAiB,EACjC,OAD8C,MAANH,EAAYC,EAAS,EAAJA,EAAW,GAC3DG,SAAS,W,uCA9JCC,Q","file":"x","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class DeviceWeb extends WebPlugin {\n    async getId() {\n        return {\n            uuid: this.getUid(),\n        };\n    }\n    async getInfo() {\n        if (typeof navigator === 'undefined' || !navigator.userAgent) {\n            throw this.unavailable('Device API not available in this browser');\n        }\n        const ua = navigator.userAgent;\n        const uaFields = this.parseUa(ua);\n        return {\n            model: uaFields.model,\n            platform: 'web',\n            operatingSystem: uaFields.operatingSystem,\n            osVersion: uaFields.osVersion,\n            manufacturer: navigator.vendor,\n            isVirtual: false,\n            webViewVersion: uaFields.browserVersion,\n        };\n    }\n    async getBatteryInfo() {\n        if (typeof navigator === 'undefined' || !navigator.getBattery) {\n            throw this.unavailable('Device API not available in this browser');\n        }\n        let battery = {};\n        try {\n            battery = await navigator.getBattery();\n        }\n        catch (e) {\n            // Let it fail, we don't care\n        }\n        return {\n            batteryLevel: battery.level,\n            isCharging: battery.charging,\n        };\n    }\n    async getLanguageCode() {\n        return {\n            value: navigator.language,\n        };\n    }\n    parseUa(ua) {\n        const uaFields = {};\n        const start = ua.indexOf('(') + 1;\n        let end = ua.indexOf(') AppleWebKit');\n        if (ua.indexOf(') Gecko') !== -1) {\n            end = ua.indexOf(') Gecko');\n        }\n        const fields = ua.substring(start, end);\n        if (ua.indexOf('Android') !== -1) {\n            const tmpFields = fields.replace('; wv', '').split('; ').pop();\n            if (tmpFields) {\n                uaFields.model = tmpFields.split(' Build')[0];\n            }\n            uaFields.osVersion = fields.split('; ')[1];\n        }\n        else {\n            uaFields.model = fields.split('; ')[0];\n            if (typeof navigator !== 'undefined' && navigator.oscpu) {\n                uaFields.osVersion = navigator.oscpu;\n            }\n            else {\n                if (ua.indexOf('Windows') !== -1) {\n                    uaFields.osVersion = fields;\n                }\n                else {\n                    const tmpFields = fields.split('; ').pop();\n                    if (tmpFields) {\n                        const lastParts = tmpFields\n                            .replace(' like Mac OS X', '')\n                            .split(' ');\n                        uaFields.osVersion = lastParts[lastParts.length - 1].replace(/_/g, '.');\n                    }\n                }\n            }\n        }\n        if (/android/i.test(ua)) {\n            uaFields.operatingSystem = 'android';\n        }\n        else if (/iPad|iPhone|iPod/.test(ua) && !window.MSStream) {\n            uaFields.operatingSystem = 'ios';\n        }\n        else if (/Win/.test(ua)) {\n            uaFields.operatingSystem = 'windows';\n        }\n        else if (/Mac/i.test(ua)) {\n            uaFields.operatingSystem = 'mac';\n        }\n        else {\n            uaFields.operatingSystem = 'unknown';\n        }\n        // Check for browsers based on non-standard javascript apis, only not user agent\n        const isFirefox = !!window.InstallTrigger;\n        const isSafari = !!window.ApplePaySession;\n        const isChrome = !!window.chrome;\n        const isEdge = /Edg/.test(ua);\n        const isFirefoxIOS = /FxiOS/.test(ua);\n        const isChromeIOS = /CriOS/.test(ua);\n        const isEdgeIOS = /EdgiOS/.test(ua);\n        // FF and Edge User Agents both end with \"/MAJOR.MINOR\"\n        if (isSafari ||\n            (isChrome && !isEdge) ||\n            isFirefoxIOS ||\n            isChromeIOS ||\n            isEdgeIOS) {\n            // Safari version comes as     \"... Version/MAJOR.MINOR ...\"\n            // Chrome version comes as     \"... Chrome/MAJOR.MINOR ...\"\n            // FirefoxIOS version comes as \"... FxiOS/MAJOR.MINOR ...\"\n            // ChromeIOS version comes as  \"... CriOS/MAJOR.MINOR ...\"\n            let searchWord;\n            if (isFirefoxIOS) {\n                searchWord = 'FxiOS';\n            }\n            else if (isChromeIOS) {\n                searchWord = 'CriOS';\n            }\n            else if (isEdgeIOS) {\n                searchWord = 'EdgiOS';\n            }\n            else if (isSafari) {\n                searchWord = 'Version';\n            }\n            else {\n                searchWord = 'Chrome';\n            }\n            const words = ua.split(' ');\n            for (const word of words) {\n                if (word.includes(searchWord)) {\n                    const version = word.split('/')[1];\n                    uaFields.browserVersion = version;\n                }\n            }\n        }\n        else if (isFirefox || isEdge) {\n            const reverseUA = ua.split('').reverse().join('');\n            const reverseVersion = reverseUA.split('/')[0];\n            const version = reverseVersion.split('').reverse().join('');\n            uaFields.browserVersion = version;\n        }\n        return uaFields;\n    }\n    getUid() {\n        if (typeof window !== 'undefined') {\n            let uid = window.localStorage.getItem('_capuid');\n            if (uid) {\n                return uid;\n            }\n            uid = this.uuid4();\n            window.localStorage.setItem('_capuid', uid);\n            return uid;\n        }\n        return this.uuid4();\n    }\n    uuid4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }\n}\n//# sourceMappingURL=web.js.map"]}