{"version":3,"mappings":"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","names":["KeepAwake","registerPlugin","web","l","then","m","KeepAwakeWeb","y","constructor","el","this","TypeError","document","querySelector","sign","children","RAF","offset","offsetWidth","speed","dataset","onResize","getSignWidth","bind","styleElements","init","draw","window","addEventListener","style","display","signWidth","clientWidth","requestAnimationFrame","performAnimation","reset","transform","stop","cancelAnimationFrame","destroy","removeEventListener","i0","i","routes","path","component","stream","database","loadingController","platform","settings","StreamData","Date","now","PHASES","n","t","streamData","_a","games","_b","schedule","ngOnInit","ready","segment","console","debug","showLoading","startListening","ngOnDestroy","subscription","unsubscribe","undefined","scrollToTop","content","loading","hideLoading","forceRefresh","evt","setTimeout","retry","target","complete","toggleSearchbar","filterVisible","filterList","searchTerm","srcElement","value","refreshUI","getGameCount","o","_c","length","getActiveGames","filter","game","inProgress","getActiveGameCount","getFavoriteGames","a","_d","isFavorite","homeTeam","awayTeam","getFavoriteGameCount","getSegmentGames","ret","warn","favoriteTeam","sort","b","nameA","homeTeamNickname","nameB","doCountdown","type","clockUpdater","setInterval","countdown","sim","getWinners","winners","postseasons","map","postseason","winner","h","d","playoffs","team","leagues","teams","find","id","playoffsName","name","getPlayoffDay","playoffDay","getCountdown","hours","minutes","seconds","homeTeamName","toLowerCase","indexOf","awayTeamName","segmentChanged","detail","setSegment","checkStale","current","stale","lastUpdateTime","staleThreshold","checkDisableSleep","disableSleep","keepAwake","err","error","onEvent","ErrorEvent","onError","errors","_i","Object","keys","data","key","_Object$keys","onUpdate","uiState","seasonHeader","notice","countdownNotice","day","phase","_f","_g","seasonNumber","round","_","v","f","_h","_j","season","_k","clearInterval","assign","subscribe","globalEvents","events","event","expire","elem","getElementById","Marquee","setAttribute","gameId","index","item","String","LiveFeedPageComponent","selectors","IonContent","ctx","LiveFeedPageRoutingModule","RouterModule","LiveFeedPageModule","IonicModule","CommonModule","FormsModule","DiamondComponentModule","TeamComponentModule"],"sources":["webpack:///node_modules/@capacitor-community/keep-awake/dist/esm/index.js","webpack:///node_modules/@egstad/marquee/src/index.js","webpack:///src/app/live-feed/live-feed.page.html","webpack:///src/app/live-feed/live-feed-routing.module.ts","webpack:///src/app/live-feed/live-feed.page.ts","webpack:///src/app/live-feed/live-feed.module.ts"],"sourcesContent":["import { registerPlugin } from '@capacitor/core';\r\nconst KeepAwake = registerPlugin('KeepAwake', {\r\n    web: () => import('./web').then(m => new m.KeepAwakeWeb()),\r\n});\r\nexport * from './definitions';\r\nexport { KeepAwake };\r\n","export default class Marquee {\n  constructor(el) {\n    // marquee el\n    if (typeof el === \"object\") {\n      this.el = el;\n    } else if (typeof el === \"string\") {\n      this.el = document.querySelector(el);  \n    } else {\n      throw new TypeError(\"Marquee accepts either a HTML Element (object) or a class/id to query (string).\");\n    }\n    // marquee content\n    this.sign = this.el.children[0];\n    // raf instance, cached for cancel\n    this.RAF = null;\n    this.offset = this.el.offsetWidth;\n    this.speed = this.el.dataset.speed || 1;\n    // let's bind the window resize event for easy setup/teardown\n    this.onResize = this.getSignWidth.bind(this)\n    \n    this.styleElements();\n    this.init();\n  }\n  init() {\n    // measure the sign's width\n    this.getSignWidth();\n    // begin animation\n    this.draw();\n    // in case the contents change size on resize,\n    // fetch & update the size for animation\n    window.addEventListener(\"resize\", this.onResize)\n  }\n  styleElements() {\n    this.el.style.display = \"flex\";\n    this.sign.style.display = \"inline-flex\";\n  }\n  getSignWidth() {\n    this.signWidth = this.sign.clientWidth\n  }\n  draw() {\n    const performAnimation = () => {\n      // loop it!\n      this.RAF = requestAnimationFrame(performAnimation);\n\n      // if the item is fully hidden, start animation over\n      if (-this.offset >= this.signWidth) {\n        this.reset()\n      }\n      \n      // update offset\n      this.offset = this.offset - this.speed;\n      this.sign.style.transform = `translate3d(${this.offset}px, 0, 0)`;\n    };\n\n    requestAnimationFrame(performAnimation);\n  }\n  stop() {\n    cancelAnimationFrame(this.RAF);\n  }\n  reset() {\n    this.offset = this.el.offsetWidth;\n    this.sign.style.transform = `translate3d(${this.offset}px, 0, 0)`;\n  }\n  destroy() {\n    this.stop()\n    window.removeEventListener(\"resize\", this.onResize)\n  }\n}\n\n\n\n","<ion-header translucent=\"true\">\n  <ion-toolbar color=\"primary\" (click)=\"scrollToTop()\">\n    <ion-title>Blases Loaded</ion-title>\n    <ion-buttons slot=\"secondary\">\n      <ion-button *ngIf=\"loading || stale\">\n        <ion-spinner></ion-spinner>\n      </ion-button>\n      <!--\n      <ion-button *ngIf=\"errors &gt; 0 && !isPostseasonComplete()\">\n        <ion-icon name=\"alert-circle-outline\" color=\"danger\"></ion-icon>\n      </ion-button>\n      -->\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-toolbar *ngIf=\"ready && !uiState.notice\">\n    <ion-buttons slot=\"primary\">\n      <!-- this is just to fix spacing for now, I'll figure out something better eventually -->\n      <ion-button>\n        <ion-icon></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-segment (ionChange)=\"segmentChanged($event)\" [value]=\"segment\">\n      <ion-segment-button value=\"all\">\n        <ion-label>All ({{getGameCount()}})</ion-label>\n      </ion-segment-button>\n      <ion-segment-button value=\"active\">\n        <ion-label>Active ({{getActiveGameCount()}})</ion-label>\n      </ion-segment-button>\n      <ion-segment-button value=\"favorites\">\n        <ion-label>Favorites ({{getFavoriteGameCount()}})</ion-label>\n      </ion-segment-button>\n    </ion-segment>\n    <ion-buttons slot=\"secondary\">\n      <ion-button (click)=\"toggleSearchbar()\">\n        <ion-icon name=\"search-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n  \n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"forceRefresh($event)\">\n    <ion-refresher-content\n      pullingIcon=\"baseball-outline\"\n    ><ion-spinner name=\"default\"></ion-spinner>\n    </ion-refresher-content>\n  </ion-refresher>\n  <ion-searchbar *ngIf=\"filterVisible\" debounce=\"200\" value=\"{{searchTerm}}\" showCancelButton=\"focus\" (ionInput)=\"filterList($event)\"></ion-searchbar>\n  <span *ngIf=\"ready\">\n    <span *ngIf=\"uiState.notice\">\n      <ion-item lines=\"none\">\n        <h4>{{uiState.notice}}</h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngFor=\"let winner of uiState.winners\">\n        <h4>\n          The\n          <!-- <span [style]=\"'color: ' + uiState.winner.mainColor\">{{uiState.winner.fullName}}</span> -->\n          <app-team team=\"home\" [teamColor]=\"winner.team.mainColor\"\n            [emoji]=\"winner.team.emoji\" [name]=\"winner.team.fullName\"></app-team>\n          are the {{ winner.playoffsName }} Champions!\n        </h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngIf=\"uiState.countdownNotice !== undefined && countdown && countdown.diff >= 0\">\n        <h4>\n          {{uiState.countdownNotice}}\n          <br>\n          {{getCountdown()}}\n        </h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngIf=\"uiState.countdownNotice !== undefined && countdown && countdown.diff &lt; 0\">\n        <h4>Next season starts in... uhh.  <i>*tugs collar*</i> I mean. What <i>is</i> time, really?</h4>\n      </ion-item>\n      <div id=\"marquee\" data-speed=\"1\">\n        <div class=\"marquee\">\n          <div class=\"marquee-item\" *ngFor=\"let event of globalEvents\">\n            {{event.msg}}...\n            &nbsp;\n            &nbsp;\n            &nbsp;\n          </div>\n        </div>\n      </div>\n    </span>\n    <span *ngIf=\"!uiState.notice\">\n      <ion-item lines=\"none\" *ngIf=\"uiState.seasonHeader\">\n        <h4 *ngIf=\"streamData && streamData.games\" class=\"ion-no-margin\">{{uiState.seasonHeader}}</h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngIf=\"segment === 'active' && (!games || games.length === 0)\">\n        No active games for day {{streamData.games.sim.day}}.\n      </ion-item>\n      <ion-grid style=\"margin-top: 0; padding-top: 0\">\n        <ion-row>\n          <!-- size-xs=\"12\" size-sm=\"12\" size-md=\"12\" size-lg=\"6\" size-xl=\"6\" -->\n          <ion-col size=\"12\" *ngFor=\"let game of games; trackBy: gameId\">\n            <app-diamond [game]=\"game\" prefix=\"live-diamond\" (refresh)=\"refreshUI()\"></app-diamond>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </span>\n  </span>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LiveFeedPageComponent } from './live-feed.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LiveFeedPageComponent,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LiveFeedPageRoutingModule {}\n","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { LoadingController, IonContent, Platform } from '@ionic/angular';\n\nimport { KeepAwake } from '@capacitor-community/keep-awake';\n\nimport { Subscription } from 'rxjs';\n\nimport Marquee from '@egstad/marquee/src';\n\nimport { APIStream } from '../../lib/api/stream';\nimport { SettingsService, SEGMENT } from '../../lib/settings.service';\n\nimport { StreamData } from '../../lib/model/streamData';\nimport { Game } from '../../lib/model/game';\nimport { Team } from '../../lib/model/team';\n\nimport { GlobalEvent } from 'src/lib/model/globalEvent';\nimport { APIDatabase } from 'src/lib/api/database';\nimport { Countdown } from 'src/lib/model/sim';\nimport { PHASES } from 'src/lib/model/phases';\n\n@Component({\n  selector: 'app-live-feed',\n  templateUrl: 'live-feed.page.html',\n  styleUrls: ['live-feed.page.scss']\n})\nexport class LiveFeedPageComponent implements OnInit, OnDestroy {\n  @ViewChild(IonContent, { static: false }) content: IonContent;\n\n  public streamData = new StreamData({});\n  public games = [] as Game[];\n  public searchTerm: string;\n  public segment = 'all' as SEGMENT;\n\n  // protected loading: HTMLIonLoadingElement;\n  public loading: boolean;\n  public ready = false;\n  public errors = 0;\n  public lastUpdateTime = Date.now();\n  public filterVisible = false;\n  public stale = false;\n  public staleThreshold = 30 * 1000; // 30s\n\n  private subscription: Subscription;\n\n  private clockUpdater: number;\n  public countdown: Countdown;\n  public globalEvents: GlobalEvent[];\n  private keepAwake = false;\n  public phase: PHASES;\n  public PHASES = PHASES;\n  public uiState = {} as { [key: string]: any };\n\n  constructor(\n    private stream: APIStream,\n    private database: APIDatabase,\n    public loadingController: LoadingController,\n    private platform: Platform,\n    protected settings: SettingsService) {\n  }\n\n  private get schedule(): Game[] {\n    return this.streamData?.games?.schedule || [];\n  }\n\n  async ngOnInit() {\n    await this.platform.ready();\n    await this.settings.ready;\n\n    console.debug('LiveFeed.ngOnInit()');\n    this.showLoading();\n\n    this.segment = this.settings.segment();\n    await this.startListening();\n    return true;\n  }\n\n  async ngOnDestroy() {\n    this.ready = false;\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n    return true;\n  }\n\n  async scrollToTop() {\n    this.content.scrollToTop();\n  }\n\n  async showLoading() {\n    this.loading = true;\n  }\n\n  async hideLoading() {\n    this.loading = false;\n    this.ready = true;\n  }\n\n  forceRefresh(evt: any) {\n    setTimeout(() => {\n      this.stream.retry().finally(() => {\n        evt?.target?.complete();\n      });\n    }, 500);\n  }\n\n  toggleSearchbar() {\n    this.filterVisible = !this.filterVisible;\n    console.debug(`LiveFeed.toggleSearchbar(): filterVisible=${this.filterVisible}`);\n  }\n\n  filterList(evt: any) {\n    this.searchTerm = evt.srcElement.value;\n    return this.refreshUI();\n  }\n\n  getGameCount(): number {\n    return this.streamData?.games?.schedule?.length || 0;\n  }\n\n  getActiveGames(): Game[] {\n    if (this.streamData?.games?.schedule) {\n      return this.streamData.games.schedule.filter((game: Game) => {\n        return game.inProgress;\n      });\n    }\n    return [];\n  }\n\n  getActiveGameCount(): number {\n    return this.getActiveGames().length;\n  }\n\n  getFavoriteGames(): Game[] {\n    if (this.streamData?.games?.schedule) {\n      return this.streamData?.games?.schedule.filter((game: Game) => {\n        return this.settings.isFavorite(game.homeTeam) || this.settings.isFavorite(game.awayTeam);\n      });\n    }\n    return [];\n  }\n\n  getFavoriteGameCount(): number {\n    return this.getFavoriteGames().length;\n  }\n\n  getSegmentGames(): Game[] {\n    console.debug('LiveFeed.getSegmentGames()');\n\n    let ret = [] as Game[];\n    switch (this.segment) {\n      case 'all':\n        ret = this.streamData?.games?.schedule || [];\n        break;\n      case 'active':\n        ret = this.getActiveGames();\n        break;\n      case 'favorites':\n        ret = this.getFavoriteGames();\n        break;\n      default:\n        console.warn(`LiveFeed.getSegmentGames(): unhandled segment: ${this.segment}`);\n        ret = [];\n        break;\n    }\n\n    // return [ret[0]];\n\n    const favoriteTeam = this.settings.favoriteTeam();\n    return ret.sort((a: Game, b: Game) => {\n      // always put favorite team first\n      if (a.homeTeam === favoriteTeam || a.awayTeam === favoriteTeam) {\n        return -1;\n      } else if (b.homeTeam === favoriteTeam || b.awayTeam === favoriteTeam) {\n        return 1;\n      }\n\n      if (this.settings.isFavorite(a.homeTeam) || this.settings.isFavorite(a.awayTeam)) {\n        return -1;\n      } else if (this.settings.isFavorite(b.homeTeam) || this.settings.isFavorite(b.awayTeam)) {\n        return 1;\n      }\n\n      const nameA = a.homeTeamNickname;\n      const nameB = b.homeTeamNickname;\n      return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;\n    });\n  }\n\n  doCountdown(type: string) {\n    if (!this.clockUpdater) {\n      this.clockUpdater = setInterval(() => {\n        this.countdown = this.streamData.sim[type]();\n      }, 1000) as unknown as number;\n    }\n  }\n\n  getWinners() {\n    const winners = this.streamData?.games?.postseasons?.map((postseason) =>  {\n      const winner = postseason?.playoffs?.winner || '';\n\n      return {\n        team: this.streamData.leagues.teams.find((team: Team) => team.id === winner),\n        playoffsName: postseason?.playoffs?.name || '',\n      };\n    }) || [];\n\n\n    if (winners.length) {\n      console.debug('getWinners():', winners);\n      return winners;\n    }\n\n    return undefined;\n  }\n\n  getPlayoffDay() {\n    const postseasons = this.streamData?.games?.postseasons || null;\n\n    if (postseasons.length) {\n      return (postseasons[0].playoffs?.playoffDay || 0);\n    }\n\n    return 0;\n  }\n\n  getCountdown() {\n    return `${this.countdown.hours} ${this.countdown.hours === 1 ? 'hour' : 'hours'}, ${this.countdown.minutes} ${this.countdown.minutes === 1 ? 'minute' : 'minutes'}, ${this.countdown.seconds} ${this.countdown.seconds === 1 ? 'second' : 'seconds'}`;\n  }\n\n  refreshUI(): Game[] {\n    console.debug('LiveFeed.refreshUI()');\n\n    let ret = this.getSegmentGames();\n\n    if (this.searchTerm && this.searchTerm.length >= 2) {\n      // search term is long enough, filter based on team names\n      ret = ret.filter((game: any) => {\n        return game.homeTeamName.toLowerCase().indexOf(this.searchTerm.toLowerCase()) > -1\n          || game.awayTeamName.toLowerCase().indexOf(this.searchTerm.toLowerCase()) > -1;\n      });\n    }\n\n    this.games = ret;\n    return this.games;\n  }\n\n  segmentChanged(evt: any) {\n    if (evt && evt.detail && evt.detail.value) {\n      this.segment = evt.detail.value;\n      this.settings.setSegment(this.segment);\n    }\n    console.debug('LiveFeed.segmentChanged():', evt);\n    this.refreshUI();\n  }\n\n  checkStale() {\n    const current = this.stale;\n    if (this.games && this.games.length > 0) {\n      const active = this.games.find(game => game.inProgress);\n      if (active) {\n        // there are still active games, check staleness based on the last update received\n        if (this.lastUpdateTime + this.staleThreshold < Date.now()) {\n          this.stale = true;\n        } else {\n          this.stale = false;\n        }\n      } else {\n        // all active games have completed\n        this.stale = false;\n        // const percent = Math.round(Date.now() % (60 * 60 * 1000) / (60 * 60 * 1000)); // how far through the hour are we?\n      }\n    }\n\n    console.debug(`LiveFeed.checkStale(): ${current} -> ${this.stale}`);\n  }\n\n  checkDisableSleep() {\n    console.debug('LiveFeed.checkDisableSleep()');\n    const disableSleep = this.settings.disableSleep();\n\n    try {\n      if (disableSleep && this.getActiveGameCount() > 0) {\n        if (!this.keepAwake) {\n          console.debug('LiveFeed.checkDisableSleep(): keeping awake');\n          this.keepAwake = true;\n          KeepAwake.keepAwake();\n        }\n      } else {\n        if (this.keepAwake) {\n          console.debug('LiveFeed.checkDisableSleep(): allowing sleep');\n          this.keepAwake = false;\n          KeepAwake.allowSleep();\n        }\n      }\n    } catch (err) {\n      console.error('An error occurred setting keep-awake status.', err);\n    }\n  }\n\n  async onEvent(value: StreamData|ErrorEvent) {\n    console.debug('LiveFeed.onEvent()');\n    if (value && value instanceof ErrorEvent) {\n      console.warn('LiveFeed.onEvent(): got an error:', value);\n      this.onError(value);\n      return;\n    }\n\n    const streamData = value as StreamData;\n\n    this.lastUpdateTime = Date.now();\n    console.debug('LiveFeed.onEvent(): lastUpdateTime=', this.lastUpdateTime);\n    setTimeout(() => {\n      this.errors = 0;\n      this.checkStale();\n    }, 1000);\n\n    for (const key of Object.keys(streamData.data)) {\n      this.streamData.data[key] = streamData.data[key];\n    }\n\n    console.debug('LiveFeed.onEvent(): current data:', this.streamData);\n\n    this.onUpdate();\n  }\n\n  onError(evt: Event) {\n    console.debug('LiveFeed.onError():', evt);\n    this.onUpdate();\n    // wait a couple of seconds before actually marking it as an error\n    setTimeout(() => {\n      this.errors++;\n      this.checkStale();\n    }, 1000);\n  }\n\n  async onUpdate() {\n    this.checkDisableSleep();\n    this.refreshUI();\n\n    const uiState = {\n      seasonHeader: undefined,\n      notice: undefined,\n      countdownNotice: undefined,\n      winners: undefined,\n    };\n\n    if (!this.streamData && !this.streamData.sim) {\n      return;\n    }\n\n    const day = this.streamData?.games?.sim?.day;\n    const round = this.streamData?.sim?.playOffRound;\n    const phase = this.streamData?.sim?.phase;\n\n    switch (phase) {\n      case PHASES.REST:\n      case PHASES.PRESEASON:\n      case PHASES.POSTSEASON_END:\n      case PHASES.ELECTION:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = 'Games have finished for the season.';\n        uiState.countdownNotice = 'Next season starts in:';\n        uiState.winners = this.getWinners();\n        break;\n      }\n\n      case PHASES.EARLY_SIESTA:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = `Earlseason is complete.`;\n        uiState.countdownNotice = `Midseason starts in:`;\n        break;\n      }\n\n      case PHASES.LATE_SIESTA:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = `Midseason is complete.`;\n        uiState.countdownNotice = `Lateseason starts in:`;\n        break;\n      }\n\n      case PHASES.SEASON_END:\n      case PHASES.PRE_POSTSEASON:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = `Regular Season ${this.streamData.seasonNumber} is over.`;\n        uiState.countdownNotice = `Earlpostseason starts in:`;\n        break;\n      }\n\n      case PHASES.EARLY_POSTSEASON_END:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = 'Earlpostseason is over.';\n        uiState.countdownNotice = 'Latepostseason starts in:';\n        break;\n      }\n      case PHASES.EARLY_POSTSEASON:\n      {\n        uiState.seasonHeader = `Earlpostseason, Day ${day}`;\n        break;\n      }\n      case PHASES.POSTSEASON:\n      {\n        uiState.seasonHeader = `Postseason Round ${this.streamData.games.postseasons[0].playoffs.round}, Day ${day}`;\n        break;\n      }\n      case PHASES.EARLSEASON:\n      case PHASES.MIDSEASON:\n      default:\n        uiState.seasonHeader = `Season ${this.streamData?.games?.season?.seasonNumber}, Day ${day}`;\n        break;\n    }\n\n    if (!this.uiState.notice && this.clockUpdater) {\n      clearInterval(this.clockUpdater);\n      this.clockUpdater = undefined;\n      this.countdown = undefined;\n    }\n\n    this.phase = phase;\n    Object.assign(this.uiState, uiState);\n\n    this.hideLoading();\n  }\n\n  async startListening() {\n    console.debug('LiveFeed.startListening(): opening event stream to blaseball.com');\n    this.showLoading();\n\n    this.subscription?.unsubscribe();\n    this.subscription = await this.stream.subscribe((evt) => {\n      this.onEvent(evt);\n    }, (err) => {\n      this.onError(err);\n    });\n\n    this.database.globalEvents().then((events: GlobalEvent[]) => {\n      this.globalEvents = events.filter((event: GlobalEvent) => event.expire === null);\n\n      setTimeout(() => {\n        const elem = document.getElementById('marquee');\n        if (elem) {\n          const marquee = new Marquee(elem);\n          setTimeout(() => {\n            elem.setAttribute('style', 'visibility: visible');\n          }, 200);\n        }\n      }, 1000);\n    });\n  }\n\n  gameId(index: number, item: any): string {\n    if (item && item.id) {\n      return item.id;\n    }\n    return String(index);\n  }\n}\n","import { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { LiveFeedPageComponent } from './live-feed.page';\nimport { DiamondComponentModule } from '../diamond/diamond.module';\nimport { LiveFeedPageRoutingModule } from './live-feed-routing.module';\nimport { TeamComponentModule } from '../team/team.module';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    LiveFeedPageRoutingModule,\n    DiamondComponentModule,\n    TeamComponentModule,\n  ],\n  declarations: [LiveFeedPageComponent]\n})\nexport class LiveFeedPageModule {}\n"]}