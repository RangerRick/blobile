{"version":3,"mappings":"ieAOMA,EAAkB,kBAClBC,EAAkB,kBAClBC,EAAQ,CACZC,GAAM,mBACNC,GAAM,qBACNC,GAAM,qBACNC,GAAM,qBACNC,GAAM,sBACNC,MAAS,IAELC,aACJC,WAAYC,4GACVC,KAAiBC,KAAMF,GACvBE,KAAKC,uBAAsBC,KAAYF,KAAM,sBAAuB,GACpEA,KAAKG,WAILH,KAAKI,YAMLJ,KAAKK,KAAOhB,EAAMI,aAdhBG,kCAqGyBI,WACL,MAAO,CAC7BG,QAAW,CAAC,kBACZC,SAAY,CAAC,eACbC,KAAQ,CAAC,sBAzGPT,6BAgBJU,SAAeH,GACb,IAAMI,EAAS,CAAEJ,UAASK,OAAQR,KAAKQ,OAAOC,KAAKT,OACnDA,KAAKC,oBAAoBS,KAAKH,KAlB5BX,+BAoBJe,WACEX,KAAKY,gBACLZ,KAAKa,gBAtBHjB,kCAwBJkB,WACMd,KAAKe,MACPf,KAAKe,MACLf,KAAKe,cA3BLnB,yBA8BJiB,sBAME,GALIb,KAAKe,MACPf,KAAKe,MACLf,KAAKe,YAGHf,KAAKI,SACPJ,KAAKG,eADP,CAKA,IAAMa,EAAQhB,KAAKK,KACnB,GAAqB,kBAAVW,EAAX,CAKA,IAAMC,EAAa5B,EAAM2B,IAAUA,EAEnC,GAA0B,IAAtBC,EAAWC,QAIf,GAAIC,OAAOC,WAAY,CAErB,IAAMC,EAAYC,YAChBtB,EAAKG,QAAUmB,EAAEC,SAEbC,EAAYL,OAAOC,WAAWH,GACpCO,EAAUC,YAAYJ,GACtBrB,KAAKe,IAAM,kBAAMS,EAAUE,eAAeL,IAC1CrB,KAAKG,QAAUqB,EAAUD,cAXzBvB,KAAKG,gBAPLH,KAAKG,QAAUa,KA3CfpB,oBAgEJY,SAAOmB,GACL,QAAK3B,KAAKG,SAGHwB,EAAQC,gBAAkB5B,KAAK6B,IACjCF,EAAQG,UAAUC,SAAS3C,KArE9BQ,2BAuEJgB,WAKE,IAJA,IAAMoB,EAAYhC,KAAKgC,UACjBC,EAAWjC,KAAK6B,GAAGI,SACnBC,EAAKlC,KAAK6B,GAAGM,kBACfC,KACKC,EAAI,EAAGA,EAAIH,EAAIG,IAAK,CAC3B,IAAMC,EAAQL,EAASI,GACjBE,WAASP,GAA2BM,EAAME,KAAOR,EACvD,GAAIO,EAAQ,CACV,GAAIH,EAEF,YADAK,QAAQC,KAAK,kDAGfN,KAEFO,EAAaL,EAAOC,GAEjBH,GACHK,QAAQC,KAAK,oDAzFb9C,oBA4FJgD,iBACQC,KAAOC,KAAW9C,MACxB,SAAQ+C,KAAEC,IAAM,CAAEC,gBACbJ,MADaI,yBAGCJ,OAHDI,IAId,qBAAsBjD,KAAKG,SAJb8C,KAIa9C,EACxB4C,KAAE,OAAQ,SAnGfnD,cAmGe,WAER,SAAOsD,KAAWlD,sCArGzBJ,KA4GA+C,EAAe,SAACd,EAAIU,GACxB,IAAIY,EACAC,EACAb,GACFY,EAAQhE,EACRiE,EAAWhE,IAGX+D,EAAQ/D,EACRgE,EAAWjE,GAEb,IAAM2C,EAAYD,EAAGC,UACrBA,EAAUuB,IAAIF,GACdrB,EAAUwB,OAAOF,IAEnBxD,EAAU2D,MAAQ,CAChBC,IA1IsB,mtEA2ItBhE,GAzIqB","names":["SPLIT_PANE_MAIN","SPLIT_PANE_SIDE","QUERY","xs","sm","md","lg","xl","never","SplitPane","constructor","hostRef","registerInstance","this","ionSplitPaneVisible","createEvent","visible","disabled","when","visibleChanged","detail","isPane","bind","emit","connectedCallback","styleChildren","updateState","disconnectedCallback","rmL","query","mediaQuery","length","window","matchMedia","callback","q","matches","mediaList","addListener","removeListener","element","parentElement","el","classList","contains","contentId","children","nu","childElementCount","foundMain","i","child","isMain","id","console","warn","setPaneClass","render","mode","getIonMode","h","Host","class","getElement","toAdd","toRemove","add","remove","style","ios"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-split-pane.entry.js"],"sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\n\nconst splitPaneIosCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}::slotted(ion-menu.menu-pane-visible){-ms-flex:0 1 auto;flex:0 1 auto;width:var(--side-width);min-width:var(--side-min-width);max-width:var(--side-max-width)}:host(.split-pane-visible) ::slotted(.split-pane-side),:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-webkit-box-shadow:none !important;box-shadow:none !important;z-index:0}:host(.split-pane-visible) ::slotted(.split-pane-main){-ms-flex:1;flex:1}:host(.split-pane-visible) ::slotted(.split-pane-side:not(ion-menu)),:host(.split-pane-visible) ::slotted(ion-menu.split-pane-side.menu-enabled){display:-ms-flexbox;display:flex;-ms-flex-negative:0;flex-shrink:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host(.split-pane-visible) ::slotted(.split-pane-side){-ms-flex-order:-1;order:-1}:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]){-ms-flex-order:1;order:1}:host{--border:0.55px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, #c8c7cc)));--side-min-width:270px;--side-max-width:28%}:host(.split-pane-visible) ::slotted(.split-pane-side){border-left:0;border-right:var(--border);border-top:0;border-bottom:0;min-width:var(--side-min-width);max-width:var(--side-max-width)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.split-pane-visible) ::slotted(.split-pane-side){border-left:unset;border-right:unset;-webkit-border-start:0;border-inline-start:0;-webkit-border-end:var(--border);border-inline-end:var(--border)}}:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]){border-left:var(--border);border-right:0;border-top:0;border-bottom:0;min-width:var(--side-min-width);max-width:var(--side-max-width)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]){border-left:unset;border-right:unset;-webkit-border-start:var(--border);border-inline-start:var(--border);-webkit-border-end:0;border-inline-end:0}}\";\n\nconst splitPaneMdCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}::slotted(ion-menu.menu-pane-visible){-ms-flex:0 1 auto;flex:0 1 auto;width:var(--side-width);min-width:var(--side-min-width);max-width:var(--side-max-width)}:host(.split-pane-visible) ::slotted(.split-pane-side),:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-webkit-box-shadow:none !important;box-shadow:none !important;z-index:0}:host(.split-pane-visible) ::slotted(.split-pane-main){-ms-flex:1;flex:1}:host(.split-pane-visible) ::slotted(.split-pane-side:not(ion-menu)),:host(.split-pane-visible) ::slotted(ion-menu.split-pane-side.menu-enabled){display:-ms-flexbox;display:flex;-ms-flex-negative:0;flex-shrink:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host(.split-pane-visible) ::slotted(.split-pane-side){-ms-flex-order:-1;order:-1}:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]){-ms-flex-order:1;order:1}:host{--border:1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));--side-min-width:270px;--side-max-width:28%}:host(.split-pane-visible) ::slotted(.split-pane-side){border-left:0;border-right:var(--border);border-top:0;border-bottom:0;min-width:var(--side-min-width);max-width:var(--side-max-width)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.split-pane-visible) ::slotted(.split-pane-side){border-left:unset;border-right:unset;-webkit-border-start:0;border-inline-start:0;-webkit-border-end:var(--border);border-inline-end:var(--border)}}:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]){border-left:var(--border);border-right:0;border-top:0;border-bottom:0;min-width:var(--side-min-width);max-width:var(--side-max-width)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]){border-left:unset;border-right:unset;-webkit-border-start:var(--border);border-inline-start:var(--border);-webkit-border-end:0;border-inline-end:0}}\";\n\nconst SPLIT_PANE_MAIN = 'split-pane-main';\nconst SPLIT_PANE_SIDE = 'split-pane-side';\nconst QUERY = {\n  'xs': '(min-width: 0px)',\n  'sm': '(min-width: 576px)',\n  'md': '(min-width: 768px)',\n  'lg': '(min-width: 992px)',\n  'xl': '(min-width: 1200px)',\n  'never': ''\n};\nconst SplitPane = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionSplitPaneVisible = createEvent(this, \"ionSplitPaneVisible\", 7);\n    this.visible = false;\n    /**\n     * If `true`, the split pane will be hidden.\n     */\n    this.disabled = false;\n    /**\n     * When the split-pane should be shown.\n     * Can be a CSS media query expression, or a shortcut expression.\n     * Can also be a boolean expression.\n     */\n    this.when = QUERY['lg'];\n  }\n  visibleChanged(visible) {\n    const detail = { visible, isPane: this.isPane.bind(this) };\n    this.ionSplitPaneVisible.emit(detail);\n  }\n  connectedCallback() {\n    this.styleChildren();\n    this.updateState();\n  }\n  disconnectedCallback() {\n    if (this.rmL) {\n      this.rmL();\n      this.rmL = undefined;\n    }\n  }\n  updateState() {\n    if (this.rmL) {\n      this.rmL();\n      this.rmL = undefined;\n    }\n    // Check if the split-pane is disabled\n    if (this.disabled) {\n      this.visible = false;\n      return;\n    }\n    // When query is a boolean\n    const query = this.when;\n    if (typeof query === 'boolean') {\n      this.visible = query;\n      return;\n    }\n    // When query is a string, let's find first if it is a shortcut\n    const mediaQuery = QUERY[query] || query;\n    // Media query is empty or null, we hide it\n    if (mediaQuery.length === 0) {\n      this.visible = false;\n      return;\n    }\n    if (window.matchMedia) {\n      // Listen on media query\n      const callback = (q) => {\n        this.visible = q.matches;\n      };\n      const mediaList = window.matchMedia(mediaQuery);\n      mediaList.addListener(callback);\n      this.rmL = () => mediaList.removeListener(callback);\n      this.visible = mediaList.matches;\n    }\n  }\n  isPane(element) {\n    if (!this.visible) {\n      return false;\n    }\n    return element.parentElement === this.el\n      && element.classList.contains(SPLIT_PANE_SIDE);\n  }\n  styleChildren() {\n    const contentId = this.contentId;\n    const children = this.el.children;\n    const nu = this.el.childElementCount;\n    let foundMain = false;\n    for (let i = 0; i < nu; i++) {\n      const child = children[i];\n      const isMain = contentId !== undefined && child.id === contentId;\n      if (isMain) {\n        if (foundMain) {\n          console.warn('split pane cannot have more than one main node');\n          return;\n        }\n        foundMain = true;\n      }\n      setPaneClass(child, isMain);\n    }\n    if (!foundMain) {\n      console.warn('split pane does not have a specified main node');\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        // Used internally for styling\n        [`split-pane-${mode}`]: true,\n        'split-pane-visible': this.visible\n      } }, h(\"slot\", null)));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"visible\": [\"visibleChanged\"],\n    \"disabled\": [\"updateState\"],\n    \"when\": [\"updateState\"]\n  }; }\n};\nconst setPaneClass = (el, isMain) => {\n  let toAdd;\n  let toRemove;\n  if (isMain) {\n    toAdd = SPLIT_PANE_MAIN;\n    toRemove = SPLIT_PANE_SIDE;\n  }\n  else {\n    toAdd = SPLIT_PANE_SIDE;\n    toRemove = SPLIT_PANE_MAIN;\n  }\n  const classList = el.classList;\n  classList.add(toAdd);\n  classList.remove(toRemove);\n};\nSplitPane.style = {\n  ios: splitPaneIosCss,\n  md: splitPaneMdCss\n};\n\nexport { SplitPane as ion_split_pane };\n"]}