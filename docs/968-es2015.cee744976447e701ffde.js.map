{"version":3,"sources":["webpack:///node_modules/@capacitor/storage/dist/esm/web.js"],"names":["StorageWeb","WebPlugin","constructor","super","arguments","this","group","options","value","impl","getItem","applyPrefix","key","setItem","removeItem","keys","rawKeys","map","k","substring","prefix","length","_a","migrated","existing","Object","filter","indexOf","oldkey","currentValue","get","push","set","window","localStorage"],"mappings":"uKACO,MAAMA,UAAmBC,KAC5BC,cACIC,SAASC,WACTC,KAAKC,MAAQ,mBAEF,iBAAC,MAAEA,IACO,iBAAVA,IACPD,KAAKC,MAAQA,GAGZ,UAACC,GAEN,MAAO,CAAEC,MADKH,KAAKI,KAAKC,QAAQL,KAAKM,YAAYJ,EAAQK,OAGpD,UAACL,GACNF,KAAKI,KAAKI,QAAQR,KAAKM,YAAYJ,EAAQK,KAAML,EAAQC,OAEjD,aAACD,GACTF,KAAKI,KAAKK,WAAWT,KAAKM,YAAYJ,EAAQK,MAExC,aAEN,MAAO,CAAEG,KADIV,KAAKW,UAAUC,IAAIC,GAAKA,EAAEC,UAAUd,KAAKe,OAAOC,UAGtD,cACP,IAAK,MAAMT,KAAOP,KAAKW,UACnBX,KAAKI,KAAKK,WAAWF,GAGhB,gBACT,IAAIU,EACJ,MAAMC,EAAW,GACXC,EAAW,GAEXT,EAAOU,OAAOV,KAAKV,KAAKI,MAAMiB,OAAOR,GAA8B,IAAzBA,EAAES,QADhC,UAElB,IAAK,MAAMC,KAAUb,EAAM,CACvB,MAAMH,EAAMgB,EAAOT,UAHL,QAGyBE,QACjCb,EAA6C,QAApCc,EAAKjB,KAAKI,KAAKC,QAAQkB,UAA4B,IAAPN,EAAgBA,EAAK,IACxEd,MAAOqB,SAAuBxB,KAAKyB,IAAI,CAAElB,QACrB,iBAAjBiB,EACPL,EAASO,KAAKnB,UAGRP,KAAK2B,IAAI,CAAEpB,MAAKJ,UACtBe,EAASQ,KAAKnB,IAGtB,MAAO,CAAEW,WAAUC,YAEf,WACJ,OAAOS,OAAOC,aAER,aACN,MAAsB,kBAAf7B,KAAKC,MAA4B,GAAM,GAAED,KAAKC,SAEzDU,UACI,OAAOS,OAAOV,KAAKV,KAAKI,MAAMiB,OAAOR,GAAgC,IAA3BA,EAAES,QAAQtB,KAAKe,SAE7DT,YAAYC,GACR,OAAOP,KAAKe,OAASR","file":"x","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.group = 'CapacitorStorage';\n    }\n    async configure({ group }) {\n        if (typeof group === 'string') {\n            this.group = group;\n        }\n    }\n    async get(options) {\n        const value = this.impl.getItem(this.applyPrefix(options.key));\n        return { value };\n    }\n    async set(options) {\n        this.impl.setItem(this.applyPrefix(options.key), options.value);\n    }\n    async remove(options) {\n        this.impl.removeItem(this.applyPrefix(options.key));\n    }\n    async keys() {\n        const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n        return { keys };\n    }\n    async clear() {\n        for (const key of this.rawKeys()) {\n            this.impl.removeItem(key);\n        }\n    }\n    async migrate() {\n        var _a;\n        const migrated = [];\n        const existing = [];\n        const oldprefix = '_cap_';\n        const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n        for (const oldkey of keys) {\n            const key = oldkey.substring(oldprefix.length);\n            const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n            const { value: currentValue } = await this.get({ key });\n            if (typeof currentValue === 'string') {\n                existing.push(key);\n            }\n            else {\n                await this.set({ key, value });\n                migrated.push(key);\n            }\n        }\n        return { migrated, existing };\n    }\n    get impl() {\n        return window.localStorage;\n    }\n    get prefix() {\n        return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n    }\n    rawKeys() {\n        return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n    }\n    applyPrefix(key) {\n        return this.prefix + key;\n    }\n}\n//# sourceMappingURL=web.js.map"]}