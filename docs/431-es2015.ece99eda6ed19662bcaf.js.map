{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":["createNode","el","type","template","getTemplate","ownerDocument","importNode","content","children","querySelector","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","offset","len","cells","end","i","item","value","push","index","height","reads","visible","VirtualScroll","constructor","hostRef","registerInstance","this","range","length","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","itemsChanged","contentEl","closest","scrollEl","getScrollElement","updateState","console","error","componentDidUpdate","disconnectedCallback","undefined","onResize","positionForItem","Promise","resolve","heightIndex","cell","find","c","getHeightIndex","cellIndex","findIndex","dst","src","Math","max","scheduleUpdate","checkRange","timerUpdate","clearTimeout","readTask","readVS","bind","writeTask","writeVS","topOffset","node","offsetTop","offsetParent","offsetHeight","scrollTop","dirtyIndex","viewport","vierportHeight","top","bottom","buffer","topPos","bottomPos","min","currentRange","dom","change","d","toMutate","n","pool","filter","forEach","nodeRender","updateCellHeight","Array","from","tagName","childrenNu","child","newChild","classList","add","appendChild","style","transform","remove","domRender","renderItem","forceUpdate","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","setTimeout","shouldEnable","enableScrollEvents","Infinity","calcHeightIndex","buf","Uint32Array","newBuf","set","subarray","acum","shouldListen","rmEvent","addEventListener","removeEventListener","renderVirtualNode","renderHeader","renderFooter","render","h","Host","VirtualProxy","map","getElement","utils","vattrs","classes","class","Object","assign"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\nimport { c as componentOnReady } from './helpers-dd7e4b7b.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n  // reset dom\n  for (const node of dom) {\n    node.change = NODE_CHANGE_NONE;\n    node.d = true;\n  }\n  // try to match into exisiting dom\n  const toMutate = [];\n  const end = range.offset + range.length;\n  for (let i = range.offset; i < end; i++) {\n    const cell = cells[i];\n    const node = dom.find(n => n.d && n.cell === cell);\n    if (node) {\n      const top = heightIndex[i];\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n      node.d = false;\n    }\n    else {\n      toMutate.push(cell);\n    }\n  }\n  // needs to append\n  const pool = dom.filter(n => n.d);\n  for (const cell of toMutate) {\n    const node = pool.find(n => n.d && n.cell.type === cell.type);\n    const index = cell.i;\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    }\n    else {\n      dom.push({\n        d: false,\n        cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index],\n      });\n    }\n  }\n  dom\n    .filter(n => n.d && n.top !== -9999)\n    .forEach(n => {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n  const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n  const childrenNu = children.length;\n  let child;\n  for (let i = 0; i < dom.length; i++) {\n    const node = dom[i];\n    const cell = node.cell;\n    // the cell change, the content must be updated\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      }\n      else {\n        const newChild = createNode(el, cell.type);\n        child = nodeRender(newChild, cell, i) || newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n      child['$ionCell'] = cell;\n    }\n    else {\n      child = children[i];\n    }\n    // only update position when it changes\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\n    }\n    // update visibility\n    const visible = cell.visible;\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      }\n      else {\n        child.classList.add('virtual-loading');\n      }\n      node.visible = visible;\n    }\n    // dynamic height\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\nconst createNode = (el, type) => {\n  const template = getTemplate(el, type);\n  if (template && el.ownerDocument) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n  return null;\n};\nconst getTemplate = (el, type) => {\n  switch (type) {\n    case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n    case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n    case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n  }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin\n  };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n  const topPos = viewport.top;\n  const bottomPos = viewport.bottom;\n  // find top index\n  let i = 0;\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n  const offset = Math.max(i - buffer - 1, 0);\n  // find bottom index\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n  const end = Math.min(i + buffer, heightIndex.length);\n  const length = end - offset;\n  return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n  const end = range.offset + range.length;\n  return (dirtyIndex <= end ||\n    currentRange.offset !== range.offset ||\n    currentRange.length !== range.length);\n};\nconst findCellIndex = (cells, index) => {\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n  if (index === 0) {\n    return 0;\n  }\n  else if (index === max + 1) {\n    return cells.length;\n  }\n  else {\n    return cells.findIndex(c => c.index === index);\n  }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n  for (let i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n  return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n  const cells = [];\n  const end = len + offset;\n  for (let i = offset; i < end; i++) {\n    const item = items[i];\n    if (headerFn) {\n      const value = headerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight,\n        });\n      }\n    }\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight,\n    });\n    if (footerFn) {\n      const value = footerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value,\n          index: i,\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight,\n        });\n      }\n    }\n  }\n  return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n  let acum = buf[index];\n  for (let i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n  return acum;\n};\nconst resizeBuffer = (buf, len) => {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n  if (buf.length === len) {\n    return buf;\n  }\n  else if (len > buf.length) {\n    const newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  }\n  else {\n    return buf.subarray(0, len);\n  }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n  const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n  return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.range = { offset: 0, length: 0 };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxFooterHeight = 30;\n    this.onScroll = () => {\n      this.updateVirtualScroll();\n    };\n  }\n  itemsChanged() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    this.scrollEl = await contentEl.getScrollElement();\n    this.contentEl = contentEl;\n    this.calcCells();\n    this.updateState();\n  }\n  componentDidUpdate() {\n    this.updateState();\n  }\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n  }\n  onResize() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  /**\n   * Returns the position of the virtual item at the given index.\n   */\n  positionForItem(index) {\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n  }\n  /**\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n   * dirty any time the content or their style changes.\n   *\n   * The subset of items to be updated can are specifing by an offset and a length.\n   */\n  async checkRange(offset, len = -1) {\n    // TODO: kind of hacky how we do in-place updated of the cells\n    // array. this part needs a complete refactor\n    if (!this.items) {\n      return;\n    }\n    const length = (len === -1)\n      ? this.items.length - offset\n      : len;\n    const cellIndex = findCellIndex(this.cells, offset);\n    const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n    this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n    this.lastItemLen = this.items.length;\n    this.indexDirty = Math.max(offset - 1, 0);\n    this.scheduleUpdate();\n  }\n  /**\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\n   *\n   * It's equivalent to calling:\n   *\n   * ```js\n   * virtualScroll.checkRange(lastItemLen);\n   * ```\n   */\n  async checkEnd() {\n    if (this.items) {\n      this.checkRange(this.lastItemLen);\n    }\n  }\n  updateVirtualScroll() {\n    // do nothing if virtual-scroll is disabled\n    if (!this.isEnabled || !this.scrollEl) {\n      return;\n    }\n    // unschedule future updates\n    if (this.timerUpdate) {\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = undefined;\n    }\n    // schedule DOM operations into the stencil queue\n    readTask(this.readVS.bind(this));\n    writeTask(this.writeVS.bind(this));\n  }\n  readVS() {\n    const { contentEl, scrollEl, el } = this;\n    let topOffset = 0;\n    let node = el;\n    while (node && node !== contentEl) {\n      topOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n    this.viewportOffset = topOffset;\n    if (scrollEl) {\n      this.viewportHeight = scrollEl.offsetHeight;\n      this.currentScrollTop = scrollEl.scrollTop;\n    }\n  }\n  writeVS() {\n    const dirtyIndex = this.indexDirty;\n    // get visible viewport\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n    // compute lazily the height index\n    const heightIndex = this.getHeightIndex();\n    // get array bounds of visible cells base in the viewport\n    const range = getRange(heightIndex, viewport, 2);\n    // fast path, do nothing\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n    if (!shouldUpdate) {\n      return;\n    }\n    this.range = range;\n    // in place mutation of the virtual DOM\n    updateVDom(this.virtualDom, heightIndex, this.cells, range);\n    // Write DOM\n    // Different code paths taken depending of the render API used\n    if (this.nodeRender) {\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n    }\n    else if (this.domRender) {\n      this.domRender(this.virtualDom);\n    }\n    else if (this.renderItem) {\n      forceUpdate(this);\n    }\n  }\n  updateCellHeight(cell, node) {\n    const update = () => {\n      if (node['$ionCell'] === cell) {\n        const style = window.getComputedStyle(node);\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n        this.setCellHeight(cell, height);\n      }\n    };\n    if (node) {\n      componentOnReady(node, update);\n    }\n    else {\n      update();\n    }\n  }\n  setCellHeight(cell, height) {\n    const index = cell.i;\n    // the cell might changed since the height update was scheduled\n    if (cell !== this.cells[index]) {\n      return;\n    }\n    if (cell.height !== height || cell.visible !== true) {\n      cell.visible = true;\n      cell.height = height;\n      this.indexDirty = Math.min(this.indexDirty, index);\n      this.scheduleUpdate();\n    }\n  }\n  scheduleUpdate() {\n    clearTimeout(this.timerUpdate);\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n  }\n  updateState() {\n    const shouldEnable = !!(this.scrollEl &&\n      this.cells);\n    if (shouldEnable !== this.isEnabled) {\n      this.enableScrollEvents(shouldEnable);\n      if (shouldEnable) {\n        this.updateVirtualScroll();\n      }\n    }\n  }\n  calcCells() {\n    if (!this.items) {\n      return;\n    }\n    this.lastItemLen = this.items.length;\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n    this.indexDirty = 0;\n  }\n  getHeightIndex() {\n    if (this.indexDirty !== Infinity) {\n      this.calcHeightIndex(this.indexDirty);\n    }\n    return this.heightIndex;\n  }\n  calcHeightIndex(index = 0) {\n    // TODO: optimize, we don't need to calculate all the cells\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n    this.indexDirty = Infinity;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.rmEvent) {\n      this.rmEvent();\n      this.rmEvent = undefined;\n    }\n    const scrollEl = this.scrollEl;\n    if (scrollEl) {\n      this.isEnabled = shouldListen;\n      scrollEl.addEventListener('scroll', this.onScroll);\n      this.rmEvent = () => {\n        scrollEl.removeEventListener('scroll', this.onScroll);\n      };\n    }\n  }\n  renderVirtualNode(node) {\n    const { type, value, index } = node.cell;\n    switch (type) {\n      case CELL_TYPE_ITEM: return this.renderItem(value, index);\n      case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n      case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n    }\n  }\n  render() {\n    return (h(Host, { style: {\n        height: `${this.totalHeight}px`\n      } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"itemHeight\": [\"itemsChanged\"],\n    \"headerHeight\": [\"itemsChanged\"],\n    \"footerHeight\": [\"itemsChanged\"],\n    \"items\": [\"itemsChanged\"]\n  }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n  return utils.map(children, (child, i) => {\n    const node = dom[i];\n    const vattrs = child.vattrs || {};\n    let classes = vattrs.class || '';\n    classes += 'virtual-item ';\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n    return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n  });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"]}