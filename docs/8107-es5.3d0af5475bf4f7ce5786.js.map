{"version":3,"mappings":"kWAKMA,aACJC,WAAYC,uHACVC,KAAiBC,KAAMF,GACvBE,KAAKC,kBAAiBC,KAAYF,KAAM,iBAAkB,GAC1DA,KAAKG,iBAAgBD,KAAYF,KAAM,gBAAiB,GACxDA,KAAKI,YAAWF,KAAYF,KAAM,WAAY,GAC9CA,KAAKK,OAAS,WACZL,EAAKG,cAAcG,QAErBN,KAAKO,QAAU,WACbP,EAAKI,SAASE,kBAVdV,kCA4DyBI,WACL,MAAO,CAC7BQ,IAAO,CAAC,qBA9DNZ,yBAaJa,WACET,KAAKU,UAdHd,8BAgBJe,WACEX,KAAKU,UAjBHd,mBAmBJc,+BACMV,KAAKQ,MAGa,oBAAXI,QACT,yBAA0BA,QAC1B,8BAA+BA,QAC/B,mBAAoBA,OAAOC,0BAA0BC,WACrDd,KAAKe,WACLf,KAAKgB,GAAK,IAAIC,qBAAqBC,YAM7BA,EAAKA,EAAKC,OAAS,GAAGC,iBACxBpB,EAAKqB,OACLrB,EAAKe,cAGTf,KAAKgB,GAAGM,QAAQtB,KAAKuB,KAIrBC,WAAW,kBAAMxB,EAAKqB,QAAQ,QA3C9BzB,kBA8CJyB,WACErB,KAAKyB,UAAYzB,KAAKO,QACtBP,KAAK0B,QAAU1B,KAAKQ,IACpBR,KAAKC,eAAeK,SAjDlBV,sBAmDJmB,WACMf,KAAKgB,KACPhB,KAAKgB,GAAGW,aACR3B,KAAKgB,aAtDLpB,oBAyDJgC,WACE,SAAQC,KAAEC,IAAM,CAAEC,SAAOC,KAAWhC,UAAS6B,KAAE,MAAO,CAAEI,SAAU,QAASzB,IAAKR,KAAK0B,QAASQ,IAAKlC,KAAKkC,IAAK7B,OAAQL,KAAKK,OAAQE,QAASP,KAAKyB,UAAWU,KAAM,aA1D/JvC,cA0D+J,WAExJ,SAAOwC,KAAWpC,sCA5DzBJ,KAiENA,EAAIyC,MAnEW","names":["Img","constructor","hostRef","registerInstance","this","ionImgWillLoad","createEvent","ionImgDidLoad","ionError","onLoad","emit","onError","src","srcChanged","addIO","componentDidLoad","window","IntersectionObserverEntry","prototype","removeIO","io","IntersectionObserver","data","length","isIntersecting","load","observe","el","setTimeout","loadError","loadSrc","disconnect","render","h","Host","class","getIonMode","decoding","alt","part","getElement","style"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-img.entry.js"],"sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\n\nconst imgCss = \":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}\";\n\nconst Img = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\n    this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\n    this.ionError = createEvent(this, \"ionError\", 7);\n    this.onLoad = () => {\n      this.ionImgDidLoad.emit();\n    };\n    this.onError = () => {\n      this.ionError.emit();\n    };\n  }\n  srcChanged() {\n    this.addIO();\n  }\n  componentDidLoad() {\n    this.addIO();\n  }\n  addIO() {\n    if (this.src === undefined) {\n      return;\n    }\n    if (typeof window !== 'undefined' &&\n      'IntersectionObserver' in window &&\n      'IntersectionObserverEntry' in window &&\n      'isIntersecting' in window.IntersectionObserverEntry.prototype) {\n      this.removeIO();\n      this.io = new IntersectionObserver(data => {\n        /**\n         * On slower devices, it is possible for an intersection observer entry to contain multiple\n         * objects in the array. This happens when quickly scrolling an image into view and then out of\n         * view. In this case, the last object represents the current state of the component.\n         */\n        if (data[data.length - 1].isIntersecting) {\n          this.load();\n          this.removeIO();\n        }\n      });\n      this.io.observe(this.el);\n    }\n    else {\n      // fall back to setTimeout for Safari and IE\n      setTimeout(() => this.load(), 200);\n    }\n  }\n  load() {\n    this.loadError = this.onError;\n    this.loadSrc = this.src;\n    this.ionImgWillLoad.emit();\n  }\n  removeIO() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  render() {\n    return (h(Host, { class: getIonMode(this) }, h(\"img\", { decoding: \"async\", src: this.loadSrc, alt: this.alt, onLoad: this.onLoad, onError: this.loadError, part: \"image\" })));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"src\": [\"srcChanged\"]\n  }; }\n};\nImg.style = imgCss;\n\nexport { Img as ion_img };\n"]}