{"version":3,"sources":["webpack:///node_modules/@capacitor/device/dist/esm/web.js"],"names":["DeviceWeb","WebPlugin","uuid","this","getUid","navigator","userAgent","unavailable","ua","uaFields","parseUa","model","platform","operatingSystem","osVersion","manufacturer","vendor","isVirtual","webViewVersion","browserVersion","getBattery","battery","e","batteryLevel","level","isCharging","charging","value","language","start","indexOf","end","fields","substring","tmpFields","replace","split","pop","oscpu","lastParts","length","test","window","MSStream","isFirefox","InstallTrigger","isSafari","ApplePaySession","isChrome","chrome","isEdge","isFirefoxIOS","isChromeIOS","isEdgeIOS","searchWord","words","word","includes","version","reverse","join","uid","localStorage","getItem","uuid4","setItem","c","r","Math","random","toString"],"mappings":"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","file":"x","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class DeviceWeb extends WebPlugin {\n    async getId() {\n        return {\n            uuid: this.getUid(),\n        };\n    }\n    async getInfo() {\n        if (typeof navigator === 'undefined' || !navigator.userAgent) {\n            throw this.unavailable('Device API not available in this browser');\n        }\n        const ua = navigator.userAgent;\n        const uaFields = this.parseUa(ua);\n        return {\n            model: uaFields.model,\n            platform: 'web',\n            operatingSystem: uaFields.operatingSystem,\n            osVersion: uaFields.osVersion,\n            manufacturer: navigator.vendor,\n            isVirtual: false,\n            webViewVersion: uaFields.browserVersion,\n        };\n    }\n    async getBatteryInfo() {\n        if (typeof navigator === 'undefined' || !navigator.getBattery) {\n            throw this.unavailable('Device API not available in this browser');\n        }\n        let battery = {};\n        try {\n            battery = await navigator.getBattery();\n        }\n        catch (e) {\n            // Let it fail, we don't care\n        }\n        return {\n            batteryLevel: battery.level,\n            isCharging: battery.charging,\n        };\n    }\n    async getLanguageCode() {\n        return {\n            value: navigator.language,\n        };\n    }\n    parseUa(ua) {\n        const uaFields = {};\n        const start = ua.indexOf('(') + 1;\n        let end = ua.indexOf(') AppleWebKit');\n        if (ua.indexOf(') Gecko') !== -1) {\n            end = ua.indexOf(') Gecko');\n        }\n        const fields = ua.substring(start, end);\n        if (ua.indexOf('Android') !== -1) {\n            const tmpFields = fields.replace('; wv', '').split('; ').pop();\n            if (tmpFields) {\n                uaFields.model = tmpFields.split(' Build')[0];\n            }\n            uaFields.osVersion = fields.split('; ')[1];\n        }\n        else {\n            uaFields.model = fields.split('; ')[0];\n            if (typeof navigator !== 'undefined' && navigator.oscpu) {\n                uaFields.osVersion = navigator.oscpu;\n            }\n            else {\n                if (ua.indexOf('Windows') !== -1) {\n                    uaFields.osVersion = fields;\n                }\n                else {\n                    const tmpFields = fields.split('; ').pop();\n                    if (tmpFields) {\n                        const lastParts = tmpFields\n                            .replace(' like Mac OS X', '')\n                            .split(' ');\n                        uaFields.osVersion = lastParts[lastParts.length - 1].replace(/_/g, '.');\n                    }\n                }\n            }\n        }\n        if (/android/i.test(ua)) {\n            uaFields.operatingSystem = 'android';\n        }\n        else if (/iPad|iPhone|iPod/.test(ua) && !window.MSStream) {\n            uaFields.operatingSystem = 'ios';\n        }\n        else if (/Win/.test(ua)) {\n            uaFields.operatingSystem = 'windows';\n        }\n        else if (/Mac/i.test(ua)) {\n            uaFields.operatingSystem = 'mac';\n        }\n        else {\n            uaFields.operatingSystem = 'unknown';\n        }\n        // Check for browsers based on non-standard javascript apis, only not user agent\n        const isFirefox = !!window.InstallTrigger;\n        const isSafari = !!window.ApplePaySession;\n        const isChrome = !!window.chrome;\n        const isEdge = /Edg/.test(ua);\n        const isFirefoxIOS = /FxiOS/.test(ua);\n        const isChromeIOS = /CriOS/.test(ua);\n        const isEdgeIOS = /EdgiOS/.test(ua);\n        // FF and Edge User Agents both end with \"/MAJOR.MINOR\"\n        if (isSafari ||\n            (isChrome && !isEdge) ||\n            isFirefoxIOS ||\n            isChromeIOS ||\n            isEdgeIOS) {\n            // Safari version comes as     \"... Version/MAJOR.MINOR ...\"\n            // Chrome version comes as     \"... Chrome/MAJOR.MINOR ...\"\n            // FirefoxIOS version comes as \"... FxiOS/MAJOR.MINOR ...\"\n            // ChromeIOS version comes as  \"... CriOS/MAJOR.MINOR ...\"\n            let searchWord;\n            if (isFirefoxIOS) {\n                searchWord = 'FxiOS';\n            }\n            else if (isChromeIOS) {\n                searchWord = 'CriOS';\n            }\n            else if (isEdgeIOS) {\n                searchWord = 'EdgiOS';\n            }\n            else if (isSafari) {\n                searchWord = 'Version';\n            }\n            else {\n                searchWord = 'Chrome';\n            }\n            const words = ua.split(' ');\n            for (const word of words) {\n                if (word.includes(searchWord)) {\n                    const version = word.split('/')[1];\n                    uaFields.browserVersion = version;\n                }\n            }\n        }\n        else if (isFirefox || isEdge) {\n            const reverseUA = ua.split('').reverse().join('');\n            const reverseVersion = reverseUA.split('/')[0];\n            const version = reverseVersion.split('').reverse().join('');\n            uaFields.browserVersion = version;\n        }\n        return uaFields;\n    }\n    getUid() {\n        if (typeof window !== 'undefined') {\n            let uid = window.localStorage.getItem('_capuid');\n            if (uid) {\n                return uid;\n            }\n            uid = this.uuid4();\n            window.localStorage.setItem('_capuid', uid);\n            return uid;\n        }\n        return this.uuid4();\n    }\n    uuid4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }\n}\n//# sourceMappingURL=web.js.map"]}