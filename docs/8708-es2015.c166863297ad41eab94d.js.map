{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"names":["ViewController","constructor","component","params","this","state","container","element","attachComponent","delegate","_destroy","assert","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","Nav","hostRef","registerInstance","ionNavWillLoad","createEvent","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","swipeGestureChanged","gesture","enable","swipeGesture","rootChanged","root","setRoot","rootParams","componentWillLoad","document","querySelector","el","closest","mode","getIonMode","config","emit","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","disconnectedCallback","lifecycle","LIFECYCLE_WILL_UNLOAD","destroy","push","componentProps","opts","done","queueTrns","insertStart","insertViews","insert","insertIndex","insertPages","insertComponents","pop","removeStart","removeCount","popTo","indexOrViewCtrl","tiConfig","removeView","popToRoot","removeIndex","startIndex","setPages","setRouteId","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","async","viewController","find","v","assign","animationBuilder","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","ti","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","viewsLength","viewControllers","map","filter","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","setPageHidden","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","getTimeGivenProgression","easing","progressEnd","render","h","getElement","style","NavLink","routerDirection","onClick","routerAnimation","Host"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-eea9a7a9.js';\nimport { l as assert } from './helpers-dd7e4b7b.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-931440b1.js';\nimport { a as attachComponent } from './framework-delegate-4392cd63.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  const currentParams = view.params;\n  if (currentParams === params) {\n    return true;\n  }\n  if (!currentParams && !params) {\n    return true;\n  }\n  if (!currentParams || !params) {\n    return false;\n  }\n  const keysA = Object.keys(currentParams);\n  const keysB = Object.keys(params);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  // Test for A's keys different from B.\n  for (const key of keysA) {\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter =\n      !!document.querySelector('ion-router') &&\n        !this.el.closest('[no-router]');\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back-fae97365.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    // release swipe back gesture and transition\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts\n    }, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(tiConfig, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    }\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /** @internal */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /** @internal */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    return active\n      ? {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      }\n      : undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  getActive() {\n    return Promise.resolve(this.getActiveSync());\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  getByIndex(index) {\n    return Promise.resolve(this.views[index]);\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  canGoBack(view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  getPrevious(view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n  async queueTrns(ti, done) {\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n      return Promise.resolve(false);\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return Promise.resolve(false);\n        }\n        else if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return Promise.resolve(false);\n        }\n      }\n    }\n    // Normalize empty\n    if (ti.insertViews && ti.insertViews.length === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now\n    // get the next instruction\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n        enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      const result = requiresTransition\n        ? await this.transition(enteringView, leavingView, ti)\n        : {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    const viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition =\n        ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  getEnteringView(ti, leavingView) {\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  postViewInit(enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    const opts = ti.opts;\n    const insertViews = ti.insertViews;\n    const removeStart = ti.removeStart;\n    const removeCount = ti.removeCount;\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = 0; i < removeCount; i++) {\n        const view = this.views[i + removeStart];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      opts.direction = opts.direction || 'back';\n    }\n    const finalBalance = this.views.length +\n      (insertViews !== undefined ? insertViews.length : 0) -\n      (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n    if (finalBalance === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation\n      ? (ani) => this.sbAni = ani\n      : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts);\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      // insert the entering view into the correct index in the stack\n      views.splice(index, 0, view);\n    }\n  }\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return (h(\"slot\", null));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'back') {\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n    }\n  }\n  return Promise.resolve(false);\n};\n\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return (h(Host, { onClick: this.onClick }));\n  }\n  get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"]}