{"version":3,"mappings":"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","names":["KeepAwake","registerPlugin","web","l","then","m","KeepAwakeWeb","constructor","el","this","TypeError","document","querySelector","sign","children","RAF","offset","offsetWidth","speed","dataset","onResize","getSignWidth","bind","styleElements","init","draw","window","addEventListener","style","display","signWidth","clientWidth","performAnimation","requestAnimationFrame","reset","transform","stop","cancelAnimationFrame","destroy","removeEventListener","i0","routes","path","component","stream","database","loadingController","platform","settings","StreamData","Date","now","PHASES","n","t","streamData","_a","games","_b","schedule","ngOnInit","ready","console","debug","showLoading","segment","startListening","ngOnDestroy","subscription","unsubscribe","undefined","scrollToTop","content","loading","hideLoading","forceRefresh","evt","setTimeout","retry","finally","target","complete","toggleSearchbar","filterVisible","filterList","searchTerm","srcElement","value","refreshUI","getGameCount","o","_c","length","getActiveGames","filter","game","inProgress","getActiveGameCount","getFavoriteGames","a","_d","isFavorite","homeTeam","awayTeam","getFavoriteGameCount","getSegmentGames","ret","warn","favoriteTeam","sort","b","nameA","homeTeamNickname","nameB","doCountdown","type","clockUpdater","setInterval","countdown","sim","getWinners","winners","postseasons","map","postseason","winner","h","d","playoffs","team","leagues","teams","find","id","playoffsName","name","getPlayoffDay","playoffDay","getCountdown","hours","minutes","seconds","homeTeamName","toLowerCase","indexOf","awayTeamName","segmentChanged","detail","setSegment","checkStale","current","stale","lastUpdateTime","staleThreshold","checkDisableSleep","disableSleep","keepAwake","err","error","onEvent","ErrorEvent","onError","errors","key","Object","keys","data","onUpdate","uiState","seasonHeader","notice","countdownNotice","day","phase","_f","_g","seasonNumber","round","_","v","f","_h","_j","season","_k","clearInterval","assign","subscribe","globalEvents","events","event","expire","elem","getElementById","Marquee","setAttribute","gameId","index","item","String","LiveFeedPageComponent","selectors","IonContent","ctx","LiveFeedPageRoutingModule","RouterModule","LiveFeedPageModule","IonicModule","CommonModule","FormsModule","DiamondComponentModule","TeamComponentModule"],"sources":["webpack:///node_modules/@capacitor-community/keep-awake/dist/esm/index.js","webpack:///node_modules/@egstad/marquee/src/index.js","webpack:///src/app/live-feed/live-feed.page.html","webpack:///src/app/live-feed/live-feed-routing.module.ts","webpack:///src/app/live-feed/live-feed.page.ts","webpack:///src/app/live-feed/live-feed.module.ts"],"sourcesContent":["import { registerPlugin } from '@capacitor/core';\r\nconst KeepAwake = registerPlugin('KeepAwake', {\r\n    web: () => import('./web').then(m => new m.KeepAwakeWeb()),\r\n});\r\nexport * from './definitions';\r\nexport { KeepAwake };\r\n","export default class Marquee {\n  constructor(el) {\n    // marquee el\n    if (typeof el === \"object\") {\n      this.el = el;\n    } else if (typeof el === \"string\") {\n      this.el = document.querySelector(el);  \n    } else {\n      throw new TypeError(\"Marquee accepts either a HTML Element (object) or a class/id to query (string).\");\n    }\n    // marquee content\n    this.sign = this.el.children[0];\n    // raf instance, cached for cancel\n    this.RAF = null;\n    this.offset = this.el.offsetWidth;\n    this.speed = this.el.dataset.speed || 1;\n    // let's bind the window resize event for easy setup/teardown\n    this.onResize = this.getSignWidth.bind(this)\n    \n    this.styleElements();\n    this.init();\n  }\n  init() {\n    // measure the sign's width\n    this.getSignWidth();\n    // begin animation\n    this.draw();\n    // in case the contents change size on resize,\n    // fetch & update the size for animation\n    window.addEventListener(\"resize\", this.onResize)\n  }\n  styleElements() {\n    this.el.style.display = \"flex\";\n    this.sign.style.display = \"inline-flex\";\n  }\n  getSignWidth() {\n    this.signWidth = this.sign.clientWidth\n  }\n  draw() {\n    const performAnimation = () => {\n      // loop it!\n      this.RAF = requestAnimationFrame(performAnimation);\n\n      // if the item is fully hidden, start animation over\n      if (-this.offset >= this.signWidth) {\n        this.reset()\n      }\n      \n      // update offset\n      this.offset = this.offset - this.speed;\n      this.sign.style.transform = `translate3d(${this.offset}px, 0, 0)`;\n    };\n\n    requestAnimationFrame(performAnimation);\n  }\n  stop() {\n    cancelAnimationFrame(this.RAF);\n  }\n  reset() {\n    this.offset = this.el.offsetWidth;\n    this.sign.style.transform = `translate3d(${this.offset}px, 0, 0)`;\n  }\n  destroy() {\n    this.stop()\n    window.removeEventListener(\"resize\", this.onResize)\n  }\n}\n\n\n\n","<ion-header translucent=\"true\">\n  <ion-toolbar color=\"primary\" (click)=\"scrollToTop()\">\n    <ion-title>Blases Loaded</ion-title>\n    <ion-buttons slot=\"secondary\">\n      <ion-button *ngIf=\"loading || stale\">\n        <ion-spinner></ion-spinner>\n      </ion-button>\n      <!--\n      <ion-button *ngIf=\"errors &gt; 0 && !isPostseasonComplete()\">\n        <ion-icon name=\"alert-circle-outline\" color=\"danger\"></ion-icon>\n      </ion-button>\n      -->\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-toolbar *ngIf=\"ready && !uiState.notice\">\n    <ion-buttons slot=\"primary\">\n      <!-- this is just to fix spacing for now, I'll figure out something better eventually -->\n      <ion-button>\n        <ion-icon></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-segment (ionChange)=\"segmentChanged($event)\" [value]=\"segment\">\n      <ion-segment-button value=\"all\">\n        <ion-label>All ({{getGameCount()}})</ion-label>\n      </ion-segment-button>\n      <ion-segment-button value=\"active\">\n        <ion-label>Active ({{getActiveGameCount()}})</ion-label>\n      </ion-segment-button>\n      <ion-segment-button value=\"favorites\">\n        <ion-label>Favorites ({{getFavoriteGameCount()}})</ion-label>\n      </ion-segment-button>\n    </ion-segment>\n    <ion-buttons slot=\"secondary\">\n      <ion-button (click)=\"toggleSearchbar()\">\n        <ion-icon name=\"search-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n  \n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"forceRefresh($event)\">\n    <ion-refresher-content\n      pullingIcon=\"baseball-outline\"\n    ><ion-spinner name=\"default\"></ion-spinner>\n    </ion-refresher-content>\n  </ion-refresher>\n  <ion-searchbar *ngIf=\"filterVisible\" debounce=\"200\" value=\"{{searchTerm}}\" showCancelButton=\"focus\" (ionInput)=\"filterList($event)\"></ion-searchbar>\n  <span *ngIf=\"ready\">\n    <span *ngIf=\"uiState.notice\">\n      <ion-item lines=\"none\">\n        <h4>{{uiState.notice}}</h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngFor=\"let winner of uiState.winners\">\n        <h4>\n          The\n          <!-- <span [style]=\"'color: ' + uiState.winner.mainColor\">{{uiState.winner.fullName}}</span> -->\n          <app-team team=\"home\" [teamColor]=\"winner.team.mainColor\"\n            [emoji]=\"winner.team.emoji\" [name]=\"winner.team.fullName\"></app-team>\n          are the {{ winner.playoffsName }} Champions!\n        </h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngIf=\"uiState.countdownNotice !== undefined && countdown && countdown.diff >= 0\">\n        <h4>\n          {{uiState.countdownNotice}}\n          <br>\n          {{getCountdown()}}\n        </h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngIf=\"uiState.countdownNotice !== undefined && countdown && countdown.diff &lt; 0\">\n        <h4>Next season starts in... uhh.  <i>*tugs collar*</i> I mean. What <i>is</i> time, really?</h4>\n      </ion-item>\n      <div id=\"marquee\" data-speed=\"1\">\n        <div class=\"marquee\">\n          <div class=\"marquee-item\" *ngFor=\"let event of globalEvents\">\n            {{event.msg}}...\n            &nbsp;\n            &nbsp;\n            &nbsp;\n          </div>\n        </div>\n      </div>\n    </span>\n    <span *ngIf=\"!uiState.notice\">\n      <ion-item lines=\"none\" *ngIf=\"uiState.seasonHeader\">\n        <h4 *ngIf=\"streamData && streamData.games\" class=\"ion-no-margin\">{{uiState.seasonHeader}}</h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngIf=\"segment === 'active' && (!games || games.length === 0)\">\n        No active games for day {{streamData.games.sim.day}}.\n      </ion-item>\n      <ion-grid style=\"margin-top: 0; padding-top: 0\">\n        <ion-row>\n          <!-- size-xs=\"12\" size-sm=\"12\" size-md=\"12\" size-lg=\"6\" size-xl=\"6\" -->\n          <ion-col size=\"12\" *ngFor=\"let game of games; trackBy: gameId\">\n            <app-diamond [game]=\"game\" prefix=\"live-diamond\" (refresh)=\"refreshUI()\"></app-diamond>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </span>\n  </span>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LiveFeedPageComponent } from './live-feed.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LiveFeedPageComponent,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LiveFeedPageRoutingModule {}\n","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { LoadingController, IonContent, Platform } from '@ionic/angular';\n\nimport { KeepAwake } from '@capacitor-community/keep-awake';\n\nimport { Subscription } from 'rxjs';\n\nimport Marquee from '@egstad/marquee/src';\n\nimport { APIStream } from '../../lib/api/stream';\nimport { SettingsService, SEGMENT } from '../../lib/settings.service';\n\nimport { StreamData } from '../../lib/model/streamData';\nimport { Game } from '../../lib/model/game';\nimport { Team } from '../../lib/model/team';\n\nimport { GlobalEvent } from 'src/lib/model/globalEvent';\nimport { APIDatabase } from 'src/lib/api/database';\nimport { Countdown } from 'src/lib/model/sim';\nimport { PHASES } from 'src/lib/model/phases';\n\n@Component({\n  selector: 'app-live-feed',\n  templateUrl: 'live-feed.page.html',\n  styleUrls: ['live-feed.page.scss']\n})\nexport class LiveFeedPageComponent implements OnInit, OnDestroy {\n  @ViewChild(IonContent, { static: false }) content: IonContent;\n\n  public streamData = new StreamData({});\n  public games = [] as Game[];\n  public searchTerm: string;\n  public segment = 'all' as SEGMENT;\n\n  // protected loading: HTMLIonLoadingElement;\n  public loading: boolean;\n  public ready = false;\n  public errors = 0;\n  public lastUpdateTime = Date.now();\n  public filterVisible = false;\n  public stale = false;\n  public staleThreshold = 30 * 1000; // 30s\n\n  private subscription: Subscription;\n\n  private clockUpdater: number;\n  public countdown: Countdown;\n  public globalEvents: GlobalEvent[];\n  private keepAwake = false;\n  public phase: PHASES;\n  public PHASES = PHASES;\n  public uiState = {} as { [key: string]: any };\n\n  constructor(\n    private stream: APIStream,\n    private database: APIDatabase,\n    public loadingController: LoadingController,\n    private platform: Platform,\n    protected settings: SettingsService) {\n  }\n\n  private get schedule(): Game[] {\n    return this.streamData?.games?.schedule || [];\n  }\n\n  async ngOnInit() {\n    await this.platform.ready();\n    await this.settings.ready;\n\n    console.debug('LiveFeed.ngOnInit()');\n    this.showLoading();\n\n    this.segment = this.settings.segment();\n    await this.startListening();\n    return true;\n  }\n\n  async ngOnDestroy() {\n    this.ready = false;\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n    return true;\n  }\n\n  async scrollToTop() {\n    this.content.scrollToTop();\n  }\n\n  async showLoading() {\n    this.loading = true;\n  }\n\n  async hideLoading() {\n    this.loading = false;\n    this.ready = true;\n  }\n\n  forceRefresh(evt: any) {\n    setTimeout(() => {\n      this.stream.retry().finally(() => {\n        evt?.target?.complete();\n      });\n    }, 500);\n  }\n\n  toggleSearchbar() {\n    this.filterVisible = !this.filterVisible;\n    console.debug(`LiveFeed.toggleSearchbar(): filterVisible=${this.filterVisible}`);\n  }\n\n  filterList(evt: any) {\n    this.searchTerm = evt.srcElement.value;\n    return this.refreshUI();\n  }\n\n  getGameCount(): number {\n    return this.streamData?.games?.schedule?.length || 0;\n  }\n\n  getActiveGames(): Game[] {\n    if (this.streamData?.games?.schedule) {\n      return this.streamData.games.schedule.filter((game: Game) => {\n        return game.inProgress;\n      });\n    }\n    return [];\n  }\n\n  getActiveGameCount(): number {\n    return this.getActiveGames().length;\n  }\n\n  getFavoriteGames(): Game[] {\n    if (this.streamData?.games?.schedule) {\n      return this.streamData?.games?.schedule.filter((game: Game) => {\n        return this.settings.isFavorite(game.homeTeam) || this.settings.isFavorite(game.awayTeam);\n      });\n    }\n    return [];\n  }\n\n  getFavoriteGameCount(): number {\n    return this.getFavoriteGames().length;\n  }\n\n  getSegmentGames(): Game[] {\n    console.debug('LiveFeed.getSegmentGames()');\n\n    let ret = [] as Game[];\n    switch (this.segment) {\n      case 'all':\n        ret = this.streamData?.games?.schedule || [];\n        break;\n      case 'active':\n        ret = this.getActiveGames();\n        break;\n      case 'favorites':\n        ret = this.getFavoriteGames();\n        break;\n      default:\n        console.warn(`LiveFeed.getSegmentGames(): unhandled segment: ${this.segment}`);\n        ret = [];\n        break;\n    }\n\n    // return [ret[0]];\n\n    const favoriteTeam = this.settings.favoriteTeam();\n    return ret.sort((a: Game, b: Game) => {\n      // always put favorite team first\n      if (a.homeTeam === favoriteTeam || a.awayTeam === favoriteTeam) {\n        return -1;\n      } else if (b.homeTeam === favoriteTeam || b.awayTeam === favoriteTeam) {\n        return 1;\n      }\n\n      if (this.settings.isFavorite(a.homeTeam) || this.settings.isFavorite(a.awayTeam)) {\n        return -1;\n      } else if (this.settings.isFavorite(b.homeTeam) || this.settings.isFavorite(b.awayTeam)) {\n        return 1;\n      }\n\n      const nameA = a.homeTeamNickname;\n      const nameB = b.homeTeamNickname;\n      return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;\n    });\n  }\n\n  doCountdown(type: string) {\n    if (!this.clockUpdater) {\n      this.clockUpdater = setInterval(() => {\n        this.countdown = this.streamData.sim[type]();\n      }, 1000) as unknown as number;\n    }\n  }\n\n  getWinners() {\n    const winners = this.streamData?.games?.postseasons?.map((postseason) =>  {\n      const winner = postseason?.playoffs?.winner || '';\n\n      return {\n        team: this.streamData.leagues.teams.find((team: Team) => team.id === winner),\n        playoffsName: postseason?.playoffs?.name || '',\n      };\n    }) || [];\n\n\n    if (winners.length) {\n      console.debug('getWinners():', winners);\n      return winners;\n    }\n\n    return undefined;\n  }\n\n  getPlayoffDay() {\n    const postseasons = this.streamData?.games?.postseasons || null;\n\n    if (postseasons.length) {\n      return (postseasons[0].playoffs?.playoffDay || 0);\n    }\n\n    return 0;\n  }\n\n  getCountdown() {\n    return `${this.countdown.hours} ${this.countdown.hours === 1 ? 'hour' : 'hours'}, ${this.countdown.minutes} ${this.countdown.minutes === 1 ? 'minute' : 'minutes'}, ${this.countdown.seconds} ${this.countdown.seconds === 1 ? 'second' : 'seconds'}`;\n  }\n\n  refreshUI(): Game[] {\n    console.debug('LiveFeed.refreshUI()');\n\n    let ret = this.getSegmentGames();\n\n    if (this.searchTerm && this.searchTerm.length >= 2) {\n      // search term is long enough, filter based on team names\n      ret = ret.filter((game: any) => {\n        return game.homeTeamName.toLowerCase().indexOf(this.searchTerm.toLowerCase()) > -1\n          || game.awayTeamName.toLowerCase().indexOf(this.searchTerm.toLowerCase()) > -1;\n      });\n    }\n\n    this.games = ret;\n    return this.games;\n  }\n\n  segmentChanged(evt: any) {\n    if (evt && evt.detail && evt.detail.value) {\n      this.segment = evt.detail.value;\n      this.settings.setSegment(this.segment);\n    }\n    console.debug('LiveFeed.segmentChanged():', evt);\n    this.refreshUI();\n  }\n\n  checkStale() {\n    const current = this.stale;\n    if (this.games && this.games.length > 0) {\n      const active = this.games.find(game => game.inProgress);\n      if (active) {\n        // there are still active games, check staleness based on the last update received\n        if (this.lastUpdateTime + this.staleThreshold < Date.now()) {\n          this.stale = true;\n        } else {\n          this.stale = false;\n        }\n      } else {\n        // all active games have completed\n        this.stale = false;\n        // const percent = Math.round(Date.now() % (60 * 60 * 1000) / (60 * 60 * 1000)); // how far through the hour are we?\n      }\n    }\n\n    console.debug(`LiveFeed.checkStale(): ${current} -> ${this.stale}`);\n  }\n\n  checkDisableSleep() {\n    console.debug('LiveFeed.checkDisableSleep()');\n    const disableSleep = this.settings.disableSleep();\n\n    try {\n      if (disableSleep && this.getActiveGameCount() > 0) {\n        if (!this.keepAwake) {\n          console.debug('LiveFeed.checkDisableSleep(): keeping awake');\n          this.keepAwake = true;\n          KeepAwake.keepAwake();\n        }\n      } else {\n        if (this.keepAwake) {\n          console.debug('LiveFeed.checkDisableSleep(): allowing sleep');\n          this.keepAwake = false;\n          KeepAwake.allowSleep();\n        }\n      }\n    } catch (err) {\n      console.error('An error occurred setting keep-awake status.', err);\n    }\n  }\n\n  async onEvent(value: StreamData|ErrorEvent) {\n    console.debug('LiveFeed.onEvent()');\n    if (value && value instanceof ErrorEvent) {\n      console.warn('LiveFeed.onEvent(): got an error:', value);\n      this.onError(value);\n      return;\n    }\n\n    const streamData = value as StreamData;\n\n    this.lastUpdateTime = Date.now();\n    console.debug('LiveFeed.onEvent(): lastUpdateTime=', this.lastUpdateTime);\n    setTimeout(() => {\n      this.errors = 0;\n      this.checkStale();\n    }, 1000);\n\n    for (const key of Object.keys(streamData.data)) {\n      this.streamData.data[key] = streamData.data[key];\n    }\n\n    console.debug('LiveFeed.onEvent(): current data:', this.streamData);\n\n    this.onUpdate();\n  }\n\n  onError(evt: Event) {\n    console.debug('LiveFeed.onError():', evt);\n    this.onUpdate();\n    // wait a couple of seconds before actually marking it as an error\n    setTimeout(() => {\n      this.errors++;\n      this.checkStale();\n    }, 1000);\n  }\n\n  async onUpdate() {\n    this.checkDisableSleep();\n    this.refreshUI();\n\n    const uiState = {\n      seasonHeader: undefined,\n      notice: undefined,\n      countdownNotice: undefined,\n      winners: undefined,\n    };\n\n    if (!this.streamData && !this.streamData.sim) {\n      return;\n    }\n\n    const day = this.streamData?.games?.sim?.day;\n    const round = this.streamData?.sim?.playOffRound;\n    const phase = this.streamData?.sim?.phase;\n\n    switch (phase) {\n      case PHASES.REST:\n      case PHASES.PRESEASON:\n      case PHASES.POSTSEASON_END:\n      case PHASES.ELECTION:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = 'Games have finished for the season.';\n        uiState.countdownNotice = 'Next season starts in:';\n        uiState.winners = this.getWinners();\n        break;\n      }\n\n      case PHASES.EARLY_SIESTA:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = `Earlseason is complete.`;\n        uiState.countdownNotice = `Midseason starts in:`;\n        break;\n      }\n\n      case PHASES.LATE_SIESTA:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = `Midseason is complete.`;\n        uiState.countdownNotice = `Lateseason starts in:`;\n        break;\n      }\n\n      case PHASES.SEASON_END:\n      case PHASES.PRE_POSTSEASON:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = `Regular Season ${this.streamData.seasonNumber} is over.`;\n        uiState.countdownNotice = `Earlpostseason starts in:`;\n        break;\n      }\n\n      case PHASES.EARLY_POSTSEASON_END:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = 'Earlpostseason is over.';\n        uiState.countdownNotice = 'Latepostseason starts in:';\n        break;\n      }\n      case PHASES.EARLY_POSTSEASON:\n      {\n        uiState.seasonHeader = `Earlpostseason, Day ${day}`;\n        break;\n      }\n      case PHASES.POSTSEASON:\n      {\n        uiState.seasonHeader = `Postseason Round ${this.streamData.games.postseasons[0].playoffs.round}, Day ${day}`;\n        break;\n      }\n      case PHASES.EARLSEASON:\n      case PHASES.MIDSEASON:\n      default:\n        uiState.seasonHeader = `Season ${this.streamData?.games?.season?.seasonNumber}, Day ${day}`;\n        break;\n    }\n\n    if (!this.uiState.notice && this.clockUpdater) {\n      clearInterval(this.clockUpdater);\n      this.clockUpdater = undefined;\n      this.countdown = undefined;\n    }\n\n    this.phase = phase;\n    Object.assign(this.uiState, uiState);\n\n    this.hideLoading();\n  }\n\n  async startListening() {\n    console.debug('LiveFeed.startListening(): opening event stream to blaseball.com');\n    this.showLoading();\n\n    this.subscription?.unsubscribe();\n    this.subscription = await this.stream.subscribe((evt) => {\n      this.onEvent(evt);\n    }, (err) => {\n      this.onError(err);\n    });\n\n    this.database.globalEvents().then((events: GlobalEvent[]) => {\n      this.globalEvents = events.filter((event: GlobalEvent) => event.expire === null);\n\n      setTimeout(() => {\n        const elem = document.getElementById('marquee');\n        if (elem) {\n          const marquee = new Marquee(elem);\n          setTimeout(() => {\n            elem.setAttribute('style', 'visibility: visible');\n          }, 200);\n        }\n      }, 1000);\n    });\n  }\n\n  gameId(index: number, item: any): string {\n    if (item && item.id) {\n      return item.id;\n    }\n    return String(index);\n  }\n}\n","import { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { LiveFeedPageComponent } from './live-feed.page';\nimport { DiamondComponentModule } from '../diamond/diamond.module';\nimport { LiveFeedPageRoutingModule } from './live-feed-routing.module';\nimport { TeamComponentModule } from '../team/team.module';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    LiveFeedPageRoutingModule,\n    DiamondComponentModule,\n    TeamComponentModule,\n  ],\n  declarations: [LiveFeedPageComponent]\n})\nexport class LiveFeedPageModule {}\n"]}