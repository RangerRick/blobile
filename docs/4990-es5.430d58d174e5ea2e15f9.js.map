{"version":3,"mappings":"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","names":["t","Route","constructor","hostRef","registerInstance","this","ionRouteDataChanged","createEvent","url","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","_step","connectedCallback","component","componentProps","RouteRedirect","ionRouteRedirectChanged","propDidChange","from","to","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","generatePath","segments","filter","s","join","parsePath","path","queryString","qsStart","indexOf","substr","split","map","trim","writeNavState","root","chain","direction","index","changed","_args","animation","outlet","searchNavNode","_context","Promise","resolve","componentOnReady","result","route","setRouteId","id","params","element","markVisible","console","error","e","readNavState","ids","node","_context2","getRouteId","push","QUERY","matches","querySelector","findRouteRedirect","redirects","find","redirect","i","expected","matchesIDs","len","Math","min","toLowerCase","matchesPath","inputPath","allparams","RouterSegments","matchesDefault","segment","_step2","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","assign","routerPathToChain","chains","match","_step3","matchedChain","score","computePriority","level","_step5","pow","J","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","nodes","_step6","flattenNode","_step7","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","componentWillLoad","document","body","window","addEventListener","once","canProceed","_context3","runGuards","getPath","setPath","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","historyDirection","_context4","onBackButton","ev","detail","register","processNextHandler","back","canTransition","_context5","r","startsWith","URL","location","href","pathname","parsedPath","_context6","history","waitPromise","printDebug","routes","group","forEach","debug","_loop","groupEnd","_step9","navChanged","warn","_context8","_yield$H","maxMatches","plainIDs","_step10","_step11","_step12","param","safeWriteNavState","_a","win","replaceState","title","redirectFrom","_s$to","_context9","unlock","_context10","lock","p","_context11","n","fromChain","beforeLeaveHook","_context12","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","_context13","_toConsumableArray","pushState","loc","prefix","hash","redirectFromPath","redirectedFrom","getElement","RouterLink","routerDirection","onClick","openURL","routerAnimation","render","mode","getIonMode","attrs","rel","target","h","Host","class","createColorClasses","color","style"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\nimport { c as componentOnReady, n as debounce } from './helpers-dd7e4b7b.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let i = 0;\n  for (; i < len; i++) {\n    if (ids[i].toLowerCase() !== chain[i].id) {\n      break;\n    }\n  }\n  return i;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  const plainIDs = ids.map(i => i.id);\n  for (const chain of chains) {\n    const score = matchesIDs(plainIDs, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getPath());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getPath();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    let parsedPath = parsePath(url);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments, queryString } = redirect.to;\n      this.setPath(segments, direction, queryString);\n      redirectFrom = redirect.from;\n      path = segments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  async runGuards(to = this.getPath(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = routerPathToChain(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"]}