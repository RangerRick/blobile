{"version":3,"mappings":"03EACOA,wQACHC,qCACIC,eAASC,YACJC,MAAQ,mBAFjBH,wCAIMI,YAAYD,cAASE,yIACF,iBAAVF,IACPE,EAAKF,MAAQA,GAFM,8DAKrBG,SAAIC,GAAS,sKAER,CAAEC,MADKH,EAAKI,KAAKC,QAAQL,EAAKM,YAAYJ,EAAQK,QAD1C,8DAIbC,SAAIN,GAAS,6IACfF,EAAKI,KAAKK,QAAQT,EAAKM,YAAYJ,EAAQK,KAAML,EAAQC,OAD1C,iEAGbO,SAAOR,GAAS,6IAClBF,EAAKI,KAAKO,WAAWX,EAAKM,YAAYJ,EAAQK,MAD5B,+DAGhBK,WAAO,sKAEF,CAAEA,KADIC,EAAKC,UAAUC,IAAIC,mBAAKA,EAAEC,UAAUJ,EAAKK,OAAOC,YADpD,gEAIPC,WAAQ,2JACQP,EAAKC,WADb,IACV,2BAAWP,EAAXc,QACIR,EAAKT,KAAKO,WAAWJ,GAFf,gGAKRe,WAAU,qKAENC,EAAW,GACXC,EAAW,GACXC,EAAY,QACZb,EAAOc,OAAOd,KAAKC,EAAKT,MAAMuB,OAAOX,mBAA8B,IAAzBA,EAAEY,QAAQH,KAL9CI,IAMSjB,GANTkB,yDASOC,OAHRC,EANCC,QAOF1B,EAAMyB,EAAOf,UAAUQ,EAAUN,QACjChB,EAA6C,QAApC+B,EAAKrB,EAAKT,KAAKC,QAAQ2B,cAAqBE,EAAgBA,EAAK,GARxEJ,UAS8BjB,EAAKZ,IAAI,CAAEM,QATzC,WAUoB,iBAVpBuB,OASA3B,MATA,iBAWJqB,EAASW,KAAK5B,GAXVuB,wBAWUvB,OAXVuB,UAcEjB,EAAKL,IAAI,CAAED,MAAKJ,UAdlB,QAeJoB,EAASY,KAAK5B,GAfV,wKAkBL,CAAEgB,WAAUC,aAlBP,yFAoBVY,WAAY,yJAERxB,EAAOc,OAAOd,KAAKC,EAAKT,MAAMuB,OAAOX,mBAA8B,IAAzBA,EAAEY,QADhC,WADJS,IAGOzB,GAHP,IAGd,2BAAWoB,EAAXM,QACIzB,EAAKT,KAAKO,WAAWqB,GAJX,2FAIWA,WAIzB,OAAOO,OAAOC,4CAGd,MAAsB,kBAAfC,KAAK3C,MAA4B,GAAlB,UAA0B2C,KAAK3C,MAA/B,4BAE1BgB,sBACI,OAAOY,OAAOd,KAAK6B,KAAKrC,MAAMuB,OAAOX,mBAAgC,IAA3BA,EAAEY,QAAQa,EAAKvB,qCAE7DZ,SAAYC,GACR,OAAOkC,KAAKvB,OAASX,8CAlEGmC","names":["f","constructor","super","arguments","group","configure","t","get","options","value","impl","getItem","applyPrefix","key","set","setItem","remove","removeItem","keys","e","rawKeys","map","k","substring","prefix","length","clear","_step","migrate","migrated","existing","oldprefix","Object","filter","indexOf","_iterator2","_context7","currentValue","oldkey","_step2","_a","push","removeOld","_iterator3","_step3","window","localStorage","this","WebPlugin"],"sources":["webpack:///node_modules/@capacitor/storage/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.group = 'CapacitorStorage';\n    }\n    async configure({ group }) {\n        if (typeof group === 'string') {\n            this.group = group;\n        }\n    }\n    async get(options) {\n        const value = this.impl.getItem(this.applyPrefix(options.key));\n        return { value };\n    }\n    async set(options) {\n        this.impl.setItem(this.applyPrefix(options.key), options.value);\n    }\n    async remove(options) {\n        this.impl.removeItem(this.applyPrefix(options.key));\n    }\n    async keys() {\n        const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n        return { keys };\n    }\n    async clear() {\n        for (const key of this.rawKeys()) {\n            this.impl.removeItem(key);\n        }\n    }\n    async migrate() {\n        var _a;\n        const migrated = [];\n        const existing = [];\n        const oldprefix = '_cap_';\n        const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n        for (const oldkey of keys) {\n            const key = oldkey.substring(oldprefix.length);\n            const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n            const { value: currentValue } = await this.get({ key });\n            if (typeof currentValue === 'string') {\n                existing.push(key);\n            }\n            else {\n                await this.set({ key, value });\n                migrated.push(key);\n            }\n        }\n        return { migrated, existing };\n    }\n    async removeOld() {\n        const oldprefix = '_cap_';\n        const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n        for (const oldkey of keys) {\n            this.impl.removeItem(oldkey);\n        }\n    }\n    get impl() {\n        return window.localStorage;\n    }\n    get prefix() {\n        return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n    }\n    rawKeys() {\n        return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n    }\n    applyPrefix(key) {\n        return this.prefix + key;\n    }\n}\n"]}