{"version":3,"mappings":"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","names":["Route","constructor","hostRef","registerInstance","this","ionRouteDataChanged","createEvent","url","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","connectedCallback","component","componentProps","RouteRedirect","ionRouteRedirectChanged","propDidChange","from","to","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","generatePath","segments","filter","s","join","parsePath","path","queryString","qsStart","indexOf","substr","split","map","trim","writeNavState","root","chain","direction","index","changed","animation","outlet","searchNavNode","Promise","resolve","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","readNavState","ids","node","getRouteId","undefined","push","QUERY","matches","querySelector","findRouteRedirect","redirects","find","redirect","i","expected","matchesIDs","len","Math","min","toLowerCase","matchesPath","inputPath","RouterSegments","allparams","matchesDefault","segment","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","assign","routerPathToChain","chains","match","matchedChain","score","computePriority","level","pow","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","nodes","flattenNode","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","componentWillLoad","document","body","window","addEventListener","once","canProceed","t","runGuards","getPath","setPath","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","canTransition","startsWith","URL","location","href","pathname","parsedPath","r","history","waitPromise","printDebug","routes","group","forEach","debug","groupEnd","navChanged","warn","maxMatches","plainIDs","param","safeWriteNavState","_a","win","replaceState","title","redirectFrom","unlock","lock","p","n","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","pushState","loc","prefix","hash","redirectFromPath","redirectedFrom","getElement","RouterLink","routerDirection","onClick","openURL","routerAnimation","render","mode","getIonMode","attrs","rel","target","h","Host","class","createColorClasses","color","style"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\nimport { c as componentOnReady, n as debounce } from './helpers-dd7e4b7b.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let i = 0;\n  for (; i < len; i++) {\n    if (ids[i].toLowerCase() !== chain[i].id) {\n      break;\n    }\n  }\n  return i;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  const plainIDs = ids.map(i => i.id);\n  for (const chain of chains) {\n    const score = matchesIDs(plainIDs, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getPath());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getPath();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    let parsedPath = parsePath(url);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments, queryString } = redirect.to;\n      this.setPath(segments, direction, queryString);\n      redirectFrom = redirect.from;\n      path = segments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  async runGuards(to = this.getPath(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = routerPathToChain(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"]}