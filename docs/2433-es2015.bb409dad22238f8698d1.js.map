{"version":3,"mappings":"mLACO,gBAAyBA,KAC5BC,cACIC,SAASC,WACTC,KAAKC,MAAQ,mBAEXC,WAAYD,UAAS,qCACF,iBAAVA,IACPE,EAAKF,MAAQA,IAFM,GAKrBG,IAAIC,GAAS,qCAEf,MAAO,CAAEC,MADKH,EAAKI,KAAKC,QAAQL,EAAKM,YAAYJ,EAAQK,QAD1C,GAIbC,IAAIN,GAAS,qCACfF,EAAKI,KAAKK,QAAQT,EAAKM,YAAYJ,EAAQK,KAAML,EAAQC,QAD1C,GAGbO,OAAOR,GAAS,qCAClBF,EAAKI,KAAKO,WAAWX,EAAKM,YAAYJ,EAAQK,OAD5B,GAGhBK,OAAO,qCAET,MAAO,CAAEA,KADIC,EAAKC,UAAUC,IAAIC,GAAKA,EAAEC,UAAUJ,EAAKK,OAAOC,WADpD,GAIPC,QAAQ,qCACV,UAAWb,KAAOM,EAAKC,UACnBD,EAAKT,KAAKO,WAAWJ,IAFf,GAKRc,UAAU,qCACZ,IAAIC,EACJ,MAAMC,EAAW,GACXC,EAAW,GACXC,EAAY,QACZb,EAAOc,OAAOd,KAAKC,EAAKT,MAAMuB,OAAOX,GAA8B,IAAzBA,EAAEY,QAAQH,IAC1D,UAAWI,KAAUjB,EAAM,CACvB,MAAML,EAAMsB,EAAOZ,UAAUQ,EAAUN,QACjChB,EAA6C,QAApCmB,EAAKT,EAAKT,KAAKC,QAAQwB,UAA4B,IAAPP,EAAgBA,EAAK,IACxEnB,MAAO2B,SAAuBjB,EAAKZ,IAAI,CAAEM,QACrB,iBAAjBuB,EACPN,EAASO,KAAKxB,UAGRM,EAAKL,IAAI,CAAED,MAAKJ,UACtBoB,EAASQ,KAAKxB,IAGtB,MAAO,CAAEgB,WAAUC,aAlBP,GAkBOA,WAGnB,OAAOQ,OAAOC,0BAGd,MAAsB,kBAAfpC,KAAKC,MAA4B,GAAM,GAAED,KAAKC,SAEzDgB,UACI,OAAOY,OAAOd,KAAKf,KAAKO,MAAMuB,OAAOX,GAAgC,IAA3BA,EAAEY,QAAQ/B,KAAKqB,SAE7DZ,YAAYC,GACR,OAAOV,KAAKqB,OAASX","names":["WebPlugin","constructor","super","arguments","this","group","configure","t","get","options","value","impl","getItem","applyPrefix","key","set","setItem","remove","removeItem","keys","e","rawKeys","map","k","substring","prefix","length","clear","migrate","_a","migrated","existing","oldprefix","Object","filter","indexOf","oldkey","currentValue","push","window","localStorage"],"sources":["webpack:///node_modules/@capacitor/storage/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.group = 'CapacitorStorage';\n    }\n    async configure({ group }) {\n        if (typeof group === 'string') {\n            this.group = group;\n        }\n    }\n    async get(options) {\n        const value = this.impl.getItem(this.applyPrefix(options.key));\n        return { value };\n    }\n    async set(options) {\n        this.impl.setItem(this.applyPrefix(options.key), options.value);\n    }\n    async remove(options) {\n        this.impl.removeItem(this.applyPrefix(options.key));\n    }\n    async keys() {\n        const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n        return { keys };\n    }\n    async clear() {\n        for (const key of this.rawKeys()) {\n            this.impl.removeItem(key);\n        }\n    }\n    async migrate() {\n        var _a;\n        const migrated = [];\n        const existing = [];\n        const oldprefix = '_cap_';\n        const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n        for (const oldkey of keys) {\n            const key = oldkey.substring(oldprefix.length);\n            const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n            const { value: currentValue } = await this.get({ key });\n            if (typeof currentValue === 'string') {\n                existing.push(key);\n            }\n            else {\n                await this.set({ key, value });\n                migrated.push(key);\n            }\n        }\n        return { migrated, existing };\n    }\n    get impl() {\n        return window.localStorage;\n    }\n    get prefix() {\n        return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n    }\n    rawKeys() {\n        return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n    }\n    applyPrefix(key) {\n        return this.prefix + key;\n    }\n}\n"]}