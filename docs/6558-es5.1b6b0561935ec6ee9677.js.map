{"version":3,"mappings":"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","names":["n","readBlobAsBase64","blob","Promise","resolve","reject","reader","FileReader","onload","base64String","result","base64StringWithoutTags","substr","indexOf","onerror","error","readAsDataURL","encode","str","encodeURIComponent","replace","decodeURIComponent","escape","decode","getCookies","output","map","document","cookie","_step","split","_s2$replace$split2","k","v","trim","_i","Object","entries","key","_e$_i","value","push","buildRequestInit","options","extra","arguments","assign","method","headers","type","originalKeys","keys","loweredKeys","toLocaleLowerCase","reduce","acc","index","includes","params","URLSearchParams","_i2","data","_Object$entries$_i","set","body","toString","form","FormData","forEach","append","_i3","Headers","JSON","stringify","request","response","requestInit","webFetchExtra","urlParams","shouldEncode","accumulator","entry","encodedValue","item","_s3","Array","isArray","slice","shouldEncodeUrlParams","url","_context2","fetch","contentType","get","_ref","ok","_ref$responseType","responseType","json","text","status","post","put","patch","del","P","constructor","r","t","super","this","Request","getCookiesMap","u","cookies","Cookie","_iterator2","_step2","setCookie","_e$expires","expires","path","encodedKey","_e$path","getCookie","_step3","deleteCookie","clearCookies","_step4","Date","toUTCString","uploadFile","formData","name","fetchOptions","_context20","downloadFile","_context21","WebPlugin"],"sources":["webpack:///node_modules/@capacitor-community/http/dist/esm/utils.js","webpack:///node_modules/@capacitor-community/http/dist/esm/cookie.js","webpack:///node_modules/@capacitor-community/http/dist/esm/request.js","webpack:///node_modules/@capacitor-community/http/dist/esm/web.js"],"sourcesContent":["/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64StringWithoutTags);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nexport const encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nexport const decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n","import { encode, decode } from './utils';\n/**\n * Set a cookie\n * @param key The key to set\n * @param value The value to set\n * @param options Optional additional parameters\n */\nexport const setCookie = (key, value, options = {}) => {\n    // Safely Encoded Key/Value\n    const encodedKey = encode(key);\n    const encodedValue = encode(value);\n    // Clean & sanitize options\n    const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n    const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n    document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}`;\n};\n/**\n * Gets all HttpCookies\n */\nexport const getCookies = () => {\n    const output = [];\n    const map = {};\n    if (!document.cookie) {\n        return output;\n    }\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n        let [k, v] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n        k = decode(k).trim();\n        v = decode(v).trim();\n        map[k] = v;\n    }\n    const entries = Object.entries(map);\n    for (const [key, value] of entries) {\n        output.push({\n            key,\n            value,\n        });\n    }\n    return output;\n};\n/**\n * Gets a single HttpCookie given a key\n */\nexport const getCookie = (key) => {\n    const cookies = getCookies();\n    for (const cookie of cookies) {\n        if (cookie.key === key) {\n            return cookie;\n        }\n    }\n    return {\n        key,\n        value: '',\n    };\n};\n/**\n * Deletes a cookie given a key\n * @param key The key of the cookie to delete\n */\nexport const deleteCookie = (key) => {\n    document.cookie = `${key}=; Max-Age=0`;\n};\n/**\n * Clears out cookies by setting them to expire immediately\n */\nexport const clearCookies = () => {\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        document.cookie = cookie\n            .replace(/^ +/, '')\n            .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n    }\n};\n","import { readBlobAsBase64 } from './utils';\n/**\n * Normalize an HttpHeaders map by lowercasing all of the values\n * @param headers The HttpHeaders object to normalize\n */\nconst normalizeHttpHeaders = (headers = {}) => {\n    const originalKeys = Object.keys(headers);\n    const loweredKeys = Object.keys(headers).map(k => k.toLocaleLowerCase());\n    const normalized = loweredKeys.reduce((acc, key, index) => {\n        acc[key] = headers[originalKeys[index]];\n        return acc;\n    }, {});\n    return normalized;\n};\n/**\n * Builds a string of url parameters that\n * @param params A map of url parameters\n * @param shouldEncode true if you should encodeURIComponent() the values (true by default)\n */\nconst buildUrlParams = (params, shouldEncode = true) => {\n    if (!params)\n        return null;\n    const output = Object.entries(params).reduce((accumulator, entry) => {\n        const [key, value] = entry;\n        let encodedValue;\n        let item;\n        if (Array.isArray(value)) {\n            item = '';\n            value.forEach(str => {\n                encodedValue = shouldEncode ? encodeURIComponent(str) : str;\n                item += `${key}=${encodedValue}&`;\n            });\n            // last character will always be \"&\" so slice it off\n            item.slice(0, -1);\n        }\n        else {\n            encodedValue = shouldEncode ? encodeURIComponent(value) : value;\n            item = `${key}=${encodedValue}`;\n        }\n        return `${accumulator}&${item}`;\n    }, '');\n    // Remove initial \"&\" from the reduce\n    return output.substr(1);\n};\n/**\n * Build the RequestInit object based on the options passed into the initial request\n * @param options The Http plugin options\n * @param extra Any extra RequestInit values\n */\nexport const buildRequestInit = (options, extra = {}) => {\n    const output = Object.assign({ method: options.method || 'GET', headers: options.headers }, extra);\n    // Get the content-type\n    const headers = normalizeHttpHeaders(options.headers);\n    const type = headers['content-type'] || '';\n    // Build request initializers based off of content-type\n    if (type.includes('application/x-www-form-urlencoded')) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            params.set(key, value);\n        }\n        output.body = params.toString();\n    }\n    else if (type.includes('multipart/form-data')) {\n        const form = new FormData();\n        if (options.data instanceof FormData) {\n            options.data.forEach((value, key) => {\n                form.append(key, value);\n            });\n        }\n        else {\n            for (let key of Object.keys(options.data)) {\n                form.append(key, options.data[key]);\n            }\n        }\n        output.body = form;\n        const headers = new Headers(output.headers);\n        headers.delete('content-type'); // content-type will be set by `window.fetch` to includy boundary\n        output.headers = headers;\n    }\n    else if (type.includes('application/json') ||\n        typeof options.data === 'object') {\n        output.body = JSON.stringify(options.data);\n    }\n    return output;\n};\n/**\n * Perform an Http request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const request = async (options) => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);\n    const url = urlParams ? `${options.url}?${urlParams}` : options.url;\n    const response = await fetch(url, requestInit);\n    const contentType = response.headers.get('content-type') || '';\n    // Default to 'text' responseType so no parsing happens\n    let { responseType = 'text' } = response.ok ? options : {};\n    // If the response content-type is json, force the response to be json\n    if (contentType.includes('application/json')) {\n        responseType = 'json';\n    }\n    let data;\n    switch (responseType) {\n        case 'arraybuffer':\n        case 'blob':\n            const blob = await response.blob();\n            data = await readBlobAsBase64(blob);\n            break;\n        case 'json':\n            data = await response.json();\n            break;\n        case 'document':\n        case 'text':\n        default:\n            data = await response.text();\n    }\n    // Convert fetch headers to Capacitor HttpHeaders\n    const headers = {};\n    response.headers.forEach((value, key) => {\n        headers[key] = value;\n    });\n    return {\n        data,\n        headers,\n        status: response.status,\n        url: response.url,\n    };\n};\n/**\n * Perform an Http GET request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const get = async (options) => request(Object.assign(Object.assign({}, options), { method: 'GET' }));\n/**\n * Perform an Http POST request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const post = async (options) => request(Object.assign(Object.assign({}, options), { method: 'POST' }));\n/**\n * Perform an Http PUT request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const put = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PUT' }));\n/**\n * Perform an Http PATCH request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const patch = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PATCH' }));\n/**\n * Perform an Http DELETE request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const del = async (options) => request(Object.assign(Object.assign({}, options), { method: 'DELETE' }));\n","import { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n    constructor() {\n        super();\n        /**\n         * Perform an Http request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.request = async (options) => Request.request(options);\n        /**\n         * Perform an Http GET request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.get = async (options) => Request.get(options);\n        /**\n         * Perform an Http POST request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.post = async (options) => Request.post(options);\n        /**\n         * Perform an Http PUT request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.put = async (options) => Request.put(options);\n        /**\n         * Perform an Http PATCH request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.patch = async (options) => Request.patch(options);\n        /**\n         * Perform an Http DELETE request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.del = async (options) => Request.del(options);\n        /**\n         * Gets all HttpCookies as a Map\n         */\n        this.getCookiesMap = async () => {\n            const cookies = Cookie.getCookies();\n            const output = {};\n            for (const cookie of cookies) {\n                output[cookie.key] = cookie.value;\n            }\n            return output;\n        };\n        /**\n         * Get all HttpCookies as an object with the values as an HttpCookie[]\n         */\n        this.getCookies = async (options) => {\n            // @ts-ignore\n            const { url } = options;\n            const cookies = Cookie.getCookies();\n            return { cookies };\n        };\n        /**\n         * Set a cookie\n         * @param key The key to set\n         * @param value The value to set\n         * @param options Optional additional parameters\n         */\n        this.setCookie = async (options) => {\n            const { key, value, expires = '', path = '' } = options;\n            Cookie.setCookie(key, value, { expires, path });\n        };\n        /**\n         * Gets all cookie values unless a key is specified, then return only that value\n         * @param key The key of the cookie value to get\n         */\n        this.getCookie = async (options) => Cookie.getCookie(options.key);\n        /**\n         * Deletes a cookie given a key\n         * @param key The key of the cookie to delete\n         */\n        this.deleteCookie = async (options) => Cookie.deleteCookie(options.key);\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearCookies = async (\n        // @ts-ignore\n        options) => Cookie.clearCookies();\n        /**\n         * Uploads a file through a POST request\n         * @param options TODO\n         */\n        this.uploadFile = async (options) => {\n            const formData = new FormData();\n            formData.append(options.name, options.blob || 'undefined');\n            const fetchOptions = Object.assign(Object.assign({}, options), { body: formData, method: 'POST' });\n            return this.post(fetchOptions);\n        };\n        /**\n         * Downloads a file\n         * @param options TODO\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            const blob = await response.blob();\n            return {\n                blob,\n            };\n        };\n    }\n}\n"]}