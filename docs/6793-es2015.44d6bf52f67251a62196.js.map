{"version":3,"mappings":"wUAIMA,sBACEA,uBACFA,iDAcEA,yBAA4BA,yEAA8B,6EAA8CA,iCAA7CA,iEAE7DA,oBACEA,wBAAwBA,SAAwBA,QAChDA,+BACFA,+BAF0BA,6CACNA,6FAEpBA,uBACEA,uBAAiCA,0CAA8BA,QAC/DA,yBAAqCA,yCAASC,EAATC,OAASD,yBAAwBD,iBAAKA,QAC7EA,iDAMEA,yBAA4BA,iEAAwB,iBAAxBA,CAAwC,8EAA+CA,iCAA9CA,kEAtBzEA,gBAEEA,6BACEA,cAAIA,6BAAiBA,QACvBA,QACAA,oBACEA,uBAAiCA,0CAA8BA,QAC/DA,8BACFA,QACAA,4BAIAA,6BAIAA,8BACEA,eAAIA,0BAAaA,QACnBA,QACAA,qBACEA,wBAAiCA,kDAAqCA,QACtEA,+BACFA,QACFA,8BAjBiBA,iCAEJA,kHAIAA,mDASIA,0EAQfA,yBAA4BA,gEAAwB,iBAAxBA,CAAwC,6EAA+CA,gCAA9CA,iFAIrEA,yBAA4BA,6DAAaG,4CAAbH,CAAoD,yEAA2CA,gCAA1CA,6EAOjFA,yBAA4BA,gEAAwB,UAAxBA,CAAiC,sEAAwCA,gCAAvCA,0EAI9DA,wBAAiFA,qEAA+B,+DAAiCA,gCAAhCA,mEAIjHA,yBAA4BA,iEAAwB,WAAxBA,CAAkC,wEAAyCA,iCAAxCA,4DAFjEA,oBACEA,uBAAiCA,0BAAcA,QAC/CA,8BACFA,8BADeA,2DAMXA,gCAAyEA,SAAcA,kCAAvCA,0BAAyBA,gEAD3EA,yBAAyGA,qEACvGA,sCACFA,iCAFiKA,yCAAiC,yBAC3JA,4EAJzCA,oBACEA,uBAAkDA,6DAA0EA,QAC5HA,wBAAoDA,kBAAMA,QAC1DA,+BAGFA,gCAHeA,oEAQXA,gCAAyFA,SAAeA,kCAAnCA,qBAAoBA,iEAD3FA,yBAAyIA,+EACvIA,0DACFA,iCAF2MA,mDAA2C,mCAC/MA,kFAJzCA,oBACEA,wBAA8DA,6BACtDA,QACRA,+BAGFA,8BAHeA,8EAeXA,gCAA6EA,SAAiBA,kCAAnCA,oBAAkBA,oEAD/EA,yBAA+GA,gEAAuB,eAAcI,IAArCJ,CAA+C,6EAC5JA,sCACFA,gCAFwLA,wCAAgC,kCAClLA,kCAAU,sBCpFtD,MAAMK,EAAiB,CACrB,CACEC,KAAM,GACNC,UCYJ,MAAM,QA2BJC,YACSC,EACAC,EACCC,EACDC,EACAC,EACAC,GALAC,gBACAA,cACCA,gBACDA,gBACAA,qBACAA,oBAhCFA,cAAU,EAGVA,kBAAc,EACdA,oBAAiB,MACjBA,gBAAY,EAEZA,iBAAmB,CACxBC,OAAQ,oBAEHD,kBAAoB,CACzBC,OAAQ,kBAEHD,4BAA8B,CACnCC,OAAQ,6BAUVD,QAAKE,cAUHF,KAAKG,eAAuCC,IAA3BC,OAAOC,gBAGpBC,+DACEP,KAAKJ,SAASY,QACpBC,QAAQC,MAAM,2BAEd,IACE,MAAMC,QAAaC,cACnBZ,KAAKa,eAAiBF,EAAKf,SAC3Ba,QAAQC,MAAM,qCAAqCV,KAAKa,wBACjDC,GACPL,QAAQM,MAAM,sDAAuDD,GAGvE,GAA4B,QAAxBd,KAAKa,eACP,IACE,MAAMG,QAAsBhB,KAAKL,OAAOsB,mBACxCjB,KAAKkB,YAAsD,SAAxCF,EAAcG,QAAQC,cACzCX,QAAQC,MAAM,wCAAwCV,KAAKkB,qBACpDJ,GACPL,QAAQM,MAAM,+DAAgED,GAIlFd,KAAKqB,cAAgBrB,KAAKH,SAASyB,SACnCtB,KAAKuB,OAASC,KAAKC,MAA4B,IAAtBzB,KAAKqB,QAAQE,QAEtCvB,KAAK0B,aAAe1B,KAAKN,SAASgC,SAASC,KAAK,CAACC,EAASC,IAChDD,EAAEE,SAAWD,EAAEC,UAAY,EAAMF,EAAEE,SAAWD,EAAEC,SAAY,EAAI,GAG1E9B,KAAK+B,OAAS/B,KAAKD,aAAagC,SAChC/B,KAAKgC,YAAchC,KAAKD,aAAaiC,MAAMhC,KAAKqB,QAAQW,OAExDhC,KAAKiC,iBAAmBC,IACxBlC,KAAKmC,gBAAkBnC,KAAKqB,QAAQc,gBAEpCnC,KAAKoC,SAAU,EACf3B,QAAQC,MAAM,2CAA4CV,KAAKqB,WAG3DgB,+DACJ,aAAarC,KAAKH,SAASwC,eAAerC,KAAKqB,QAAQH,eAGzDoB,YAAYC,GACV,MAAMC,EAAOxC,KAAK0B,MAAMe,KAAMC,GAAYA,EAAEH,KAAOA,GACnD,OAAOC,EAAOA,EAAKV,SAAW,GAG1Ba,WAAWC,iDACf,aAAa5C,KAAKH,SAAS8C,WAAWC,EAAK5C,KAAKqB,QAAQuB,MAEpDC,UAAUD,EAAaE,iDAC3BrC,eAAQC,MAAM,kBAAmBkC,GACjCnC,QAAQC,MAAM,iBAAkBoC,SAInB9C,KAAKH,SAASgD,UAAUD,EAAK5C,KAAKqB,QAAQuB,MAEnDG,UAAUD,iDACd,aAAa9C,KAAKH,SAASmD,UAAU,SAAUF,EAAGG,OAAOC,MAAQ,OAG7DC,SAASL,gEACO9C,KAAKD,aAAaiC,MAAgB,QAAVoB,EAAE,MAAFV,OAAE,EAAFA,EAAIO,cAAMI,eAAEH,eAEhDlD,KAAKH,SAASsD,SAASL,EAAGG,OAAOC,OACvClD,KAAKsD,SAEL7C,QAAQM,MAAM,2BAAqC,QAAVwC,EAAE,MAAFb,OAAE,EAAFA,EAAIO,cAAMO,eAAEN,WAInDO,mBAAmBX,iDACvB,aAAa9C,KAAKH,SAAS4D,mBAAmBC,SAASZ,EAAGG,OAAOC,UAG7DI,MAAMR,iDACVA,OAAE,MAAFA,KAAIa,iBACF,MAAFb,KAAIc,kBACG5D,KAAKD,aAAa8D,IAAI,yCAA0C,CACrEC,OAAO,MAILC,gBAAgBd,iDACpB,MAAMT,EAAOxC,KAAK0B,MAAMe,KAAMC,GACrBA,EAAEH,KAAOU,EAAOC,OAEzBlD,KAAKH,SAASkE,gBAAoB,MAAJvB,OAAI,EAAJY,EAAMb,oDA/H3ByB,GAAqB/E,6FAArB+E,EAAqBC,yrEFpBlChF,wBACEA,yBACEA,qBAAWA,qBAASA,QACpBA,yBACEA,8BAGFA,QACFA,QACFA,QAEAA,uBACEA,sBACEA,yBAyBAA,6BACEA,eAAIA,sBAASA,QACfA,QACAA,qBACEA,wBAAiCA,sCAAyBA,QAC1DA,+BACFA,QACAA,qBACEA,wBAAiCA,kCAAqBA,QACtDA,+BACFA,QACAA,8BACEA,eAAIA,kBAAKA,QACXA,QACAA,qBACEA,wBAAiCA,kCAAqBA,QACtDA,+BACFA,QACAA,qBACEA,wBAAiCA,oBAAOA,QACxCA,8BACFA,QACAA,6BAIAA,6BAOAA,6BAOAA,8BACEA,eAAIA,kBAAKA,QACXA,QACAA,uBACEA,wBACEA,yBACEA,eAAIA,8BAAiBA,QACvBA,QACAA,qBAAUA,wDAA2CA,QACvDA,QACAA,gCAGFA,QACFA,QACFA,eA7FYA,wBAIOA,iCASRA,gDA8BQA,iCAIAA,iCAOAA,iCAImBA,iCAEvBA,mCAIAA,mCAOAA,mCAiBIA,4MEpEN+E,GAAb,KDJO,IAAME,EAAb,MAAM,sDAAOA,4DAHF,CAACC,cAAsB7E,IACtB6E,QAECD,GAAb,GEGaE,EAAb,MAAM,sDAAOA,4DARF,CACPC,KACAC,KACAC,KACAL,MAISE,GAAb","names":["i0","ctx_r17","oxw","ctx_r25","$event","routes","path","component","constructor","database","deploy","platform","settings","updateService","voiceService","this","header","Util","hasSpeech","undefined","window","speechSynthesis","ngOnInit","ready","console","debug","info","Device","devicePlatform","err","error","configuration","getConfiguration","betaEnabled","channel","toLowerCase","current","getAll","volume","Math","round","teams","sort","a","b","fullName","voices","voice","commentaryLevels","COMM_LEVEL","commentaryLevel","loading","setBetaEnabled","getTeamName","id","team","find","t","setBoolean","key","setString","ev","setVolume","setNumber","detail","value","setVoice","o","_a","speak","i","_b","setCommentaryLevel","parseInt","preventDefault","stopPropagation","say","force","setFavoriteTeam","SettingsPageComponent","selectors","SettingsPageRoutingModule","RouterModule","SettingsPageModule","CommonModule","FormsModule","IonicModule"],"sources":["webpack:///src/app/settings/settings.page.html","webpack:///src/app/settings/settings-routing.module.ts","webpack:///src/app/settings/settings.page.ts","webpack:///src/app/settings/settings.module.ts"],"sourcesContent":["<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-title>Slettings</ion-title>\n    <ion-buttons slot=\"secondary\">\n      <ion-button *ngIf=\"loading\">\n        <ion-spinner></ion-spinner>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list lines=\"none\" class=\"ion-text-wrap\">\n    <span *ngIf=\"devicePlatform !== 'web'\">\n      <!-- native-only stuff -->\n      <ion-list-header lines=\"full\">\n        <h3>Automatic Updates</h3>\n      </ion-list-header>\n      <ion-item>\n        <ion-label class=\"ion-text-wrap\">Receive content updates early?</ion-label>\n        <ion-toggle *ngIf=\"current\" (ionChange)=\"setBetaEnabled()\" [(ngModel)]=\"current.betaEnabled\" slot=\"end\"></ion-toggle>\n      </ion-item>\n      <ion-item *ngIf=\"updateService.updateAvailable && !updateService.updateReady && updateService.percentDone\">\n        <ion-label slot=\"start\">{{updateService.phase}}:</ion-label>\n        <ion-progress-bar value=\"{{updateService.percentDone}}\"></ion-progress-bar>\n      </ion-item>\n      <ion-item *ngIf=\"updateService.updateReady\" color=\"danger\">\n        <ion-label class=\"ion-text-wrap\">A content update is available.</ion-label>\n        <ion-button slot=\"end\" color=\"light\" (click)=\"updateService.reload()\">Apply</ion-button>\n      </ion-item>\n      <ion-list-header lines=\"full\">\n        <h3>Disable Sleep</h3>\n      </ion-list-header>\n      <ion-item>\n        <ion-label class=\"ion-text-wrap\">Disable sleep while games are active?</ion-label>\n        <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('disableSleep')\" [(ngModel)]=\"current.disableSleep\" slot=\"end\"></ion-toggle>\n      </ion-item>\n    </span>\n    <ion-list-header lines=\"full\">\n      <h3>Interface</h3>\n    </ion-list-header>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Reduce motion in effects?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('reduceMotion')\" [(ngModel)]=\"current.reduceMotion\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Always use dark mode?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"settings.setDarkMode(current.darkMode)\" [(ngModel)]=\"current.darkMode\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-list-header lines=\"full\">\n      <h3>Audio</h3>\n    </ion-list-header>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Enable Sound Effects?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('audio')\" [(ngModel)]=\"current.audio\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Volume:</ion-label>\n      <ion-range aria-label=\"Volume\" *ngIf=\"current\" min=\"0\" max=\"1000\" debounce=\"200\" (ionChange)=\"setVolume($event)\" [(ngModel)]=\"volume\" slot=\"end\"></ion-range>\n    </ion-item>\n    <ion-item *ngIf=\"hasSpeech\">\n      <ion-label class=\"ion-text-wrap\">Enable Speech?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('speech')\" [(ngModel)]=\"current.speech\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-item *ngIf=\"hasSpeech\">\n      <ion-icon name=\"volume-high-outline\" slot=\"start\" (click)=\"speak($event)\" class=\"ion-no-margin\" style=\"margin-right: 0.5em\"></ion-icon>\n      <ion-label for=\"select-voice\" class=\"ion-text-wrap\">Voice:</ion-label>\n      <ion-select *ngIf=\"current && voice\" id=\"select-voice\" aria-label=\"Select a Voice\" class=\"ion-text-wrap\" (ionChange)=\"setVoice($event)\" interface=\"action-sheet\" [interfaceOptions]=\"voiceOptions\" okText=\"Choose\" cancelText=\"Cancel\" [value]=\"current.voice\">\n        <ion-select-option *ngFor=\"let voice of voices\" [value]=\"voice.voiceURI\">{{voice.name}}</ion-select-option>\n      </ion-select>\n    </ion-item>\n    <ion-item *ngIf=\"hasSpeech\">\n      <ion-label for=\"choose-commetary-level\" class=\"ion-text-wrap\">Commentary\n        Level:</ion-label>\n      <ion-select *ngIf=\"current && commentaryLevel\" id=\"choose-commentary-level\" aria-label=\"Choose a Commentary Level\" class=\"ion-text-wrap\" (ionChange)=\"setCommentaryLevel($event)\" interface=\"action-sheet\" [interfaceOptions]=\"commentaryLevelOptions\" okText=\"Choose\" cancelText=\"Cancel\" [value]=\"current.commentaryLevel\">\n        <ion-select-option *ngFor=\"let level of commentaryLevels | keyvalue\" [value]=\"level.key\">{{level.value}}</ion-select-option>\n      </ion-select>\n    </ion-item>\n    <ion-list-header lines=\"full\">\n      <h3>Teams</h3>\n    </ion-list-header>\n    <ion-item id=\"bl-team-selector\">\n      <ion-label class=\"ion-text-wrap\">\n        <ion-label for=\"choose-your-team\">\n          <h4>Choose Your Team:</h4>\n        </ion-label>\n        <ion-note>Your team is always first in the live feed.</ion-note>\n      </ion-label>\n      <ion-select *ngIf=\"current && teams\" id=\"choose-your-team\" aria-label=\"Choose Your Team\" class=\"ion-text-wrap\" (ionChange)=\"setString('favoriteTeam', $event)\" interface=\"action-sheet\" [interfaceOptions]=\"teamOptions\" okText=\"Choose\" cancelText=\"Cancel\" [(ngModel)]=\"current.favoriteTeam\">\n        <ion-select-option *ngFor=\"let team of teams; trackBy: id\" [value]=\"team.id\">{{team.fullName}}</ion-select-option>\n      </ion-select>\n    </ion-item>\n  </ion-list>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingsPageComponent } from './settings.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsPageRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\n\nimport { Device } from '@capacitor/device';\n\nimport { Deploy } from 'cordova-plugin-ionic/dist/ngx';\n\nimport { Team } from '../../lib/model/team';\n\nimport { UpdateService } from '../../lib/update.service';\nimport { APIDatabase } from '../../lib/api/database';\nimport { Settings, SettingsService, COMM_LEVEL } from '../../lib/settings.service';\nimport { Platform } from '@ionic/angular';\nimport Util from 'src/lib/util';\nimport { VoiceService } from 'src/lib/voice.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPageComponent implements OnInit {\n  public loading = true;\n\n  public current: Settings;\n  public betaEnabled = false;\n  public devicePlatform = 'web';\n  public hasSpeech = false;\n\n  public teamOptions: any = {\n    header: 'Choose Your Team',\n  };\n  public voiceOptions: any = {\n    header: 'Choose a Voice',\n  };\n  public commentaryLevelOptions: any = {\n    header: 'Choose a Commentary Level',\n  };\n\n  public teams: Team[];\n  public volume: number;\n  public voices: SpeechSynthesisVoice[];\n  public voice: SpeechSynthesisVoice;\n  public commentaryLevels: Object;\n  public commentaryLevel: number;\n\n  id = Util.trackById;\n\n  constructor(\n    public database: APIDatabase,\n    public deploy: Deploy,\n    private platform: Platform,\n    public settings: SettingsService,\n    public updateService: UpdateService,\n    public voiceService: VoiceService,\n  ) {\n    this.hasSpeech = window.speechSynthesis !== undefined;\n  }\n\n  async ngOnInit() {\n    await this.platform.ready();\n    console.debug('SettingsPage.ngOnInit()');\n\n    try {\n      const info = await Device.getInfo();\n      this.devicePlatform = info.platform;\n      console.debug(`SettingsPage.ngOnInit(): platform=${this.devicePlatform}`);\n    } catch (err) {\n      console.error('SettingsPage.ngOnInit(): failed to get device info:', err);\n    }\n\n    if (this.devicePlatform !== 'web') {\n      try {\n        const configuration = await this.deploy.getConfiguration();\n        this.betaEnabled = configuration.channel.toLowerCase() === 'beta';\n        console.debug(`SettingsPage.ngOnInit(): betaEnabled=${this.betaEnabled}`);\n      } catch (err) {\n        console.error('SettingsPage.ngOnInit(): failed to get deploy configuration:', err);\n      }\n    }\n\n    this.current = await this.settings.getAll();\n    this.volume = Math.round(this.current.volume * 1000);\n\n    this.teams = (await this.database.teams()).sort((a: Team, b: Team) => {\n      return (a.fullName < b.fullName) ? -1 : (a.fullName > b.fullName) ? 1 : 0;\n    });\n\n    this.voices = this.voiceService.voices();\n    this.voice = await this.voiceService.voice(this.current.voice);\n\n    this.commentaryLevels = COMM_LEVEL;\n    this.commentaryLevel = this.current.commentaryLevel;\n\n    this.loading = false;\n    console.debug('SettingsPage.onInit(): current settings=', this.current);\n  }\n\n  async setBetaEnabled() {\n    return await this.settings.setBetaEnabled(this.current.betaEnabled);\n  }\n\n  getTeamName(id: string) {\n    const team = this.teams.find((t: Team) => t.id === id);\n    return team ? team.fullName : '';\n  }\n\n  async setBoolean(key: string) {\n    return await this.settings.setBoolean(key, this.current[key]);\n  }\n  async setString(key: string, ev?: { detail: { value: any }}) {\n    console.debug('setString: key=', key);\n    console.debug('setString: ev=', ev);\n    if (ev && ev.detail && ev.detail.value) {\n\n    }\n    return await this.settings.setString(key, this.current[key]);\n  }\n  async setVolume(ev?: CustomEvent<any>) {\n    return await this.settings.setNumber('volume', ev.detail.value / 1000.0);\n  }\n\n  async setVoice(ev?: CustomEvent<any>) {\n    const voice = await this.voiceService.voice(ev?.detail?.value);\n    if (voice) {\n      await this.settings.setVoice(ev.detail.value);\n      this.speak();\n    } else {\n      console.error(`Unable to locate voice: ${ev?.detail?.value}`);\n    }\n  }\n\n  async setCommentaryLevel(ev?: CustomEvent<any>) {\n    return await this.settings.setCommentaryLevel(parseInt(ev.detail.value));\n  }\n\n  async speak(ev?: CustomEvent<any>) {\n    ev?.preventDefault();\n    ev?.stopPropagation();\n    return this.voiceService.say('The commissioner is doing a great job!', {\n      force: true,\n    });\n  }\n\n  async setFavoriteTeam(detail: { value: string }) {\n    const team = this.teams.find((t: Team) => {\n      return t.id === detail.value;\n    });\n    this.settings.setFavoriteTeam(team?.id);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SettingsPageRoutingModule } from './settings-routing.module';\n\nimport { SettingsPageComponent } from './settings.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SettingsPageRoutingModule\n  ],\n  declarations: [SettingsPageComponent]\n})\nexport class SettingsPageModule {}\n"]}