{"version":3,"mappings":"gLAGA,MAEMA,EAAM,MACVC,YAAYC,IACVC,OAAiBC,KAAMF,GACvBE,KAAKC,kBAAiBC,KAAYF,KAAM,iBAAkB,GAC1DA,KAAKG,eAAgBD,OAAYF,KAAM,gBAAiB,GACxDA,KAAKI,YAAWF,KAAYF,KAAM,WAAY,GAC9CA,KAAKK,OAAS,KACZL,KAAKG,cAAcG,QAErBN,KAAKO,QAAU,KACbP,KAAKI,SAASE,QAGlBE,aACER,KAAKS,QAEPC,mBACEV,KAAKS,QAEPA,aACmBE,IAAbX,KAAKY,MAGa,oBAAXC,QACT,yBAA0BA,QAC1B,8BAA+BA,QAC/B,mBAAoBA,OAAOC,0BAA0BC,WACrDf,KAAKgB,WACLhB,KAAKiB,GAAK,IAAIC,qBAAqBC,IAI7BA,EAAK,GAAGC,iBACVpB,KAAKqB,OACLrB,KAAKgB,cAGThB,KAAKiB,GAAGK,QAAQtB,KAAKuB,KAIrBC,WAAW,IAAMxB,KAAKqB,OAAQ,MAGlCA,OACErB,KAAKyB,UAAYzB,KAAKO,QACtBP,KAAK0B,QAAU1B,KAAKY,IACpBZ,KAAKC,eAAeK,OAEtBU,WACMhB,KAAKiB,KACPjB,KAAKiB,GAAGU,aACR3B,KAAKiB,QAAKN,GAGdiB,SACE,OAAQC,OAAEC,IAAM,CAAEC,SAAOC,KAAWhC,QAAS6B,OAAE,MAAO,CAAEI,SAAU,QAASrB,IAAKZ,KAAK0B,QAASQ,IAAKlC,KAAKkC,IAAK7B,OAAQL,KAAKK,OAAQE,QAASP,KAAKyB,UAAWU,KAAM,oBAExJ,SAAOC,KAAWpC,4BACL,MAAO,CAC7BY,IAAO,CAAC,iBAGZhB,EAAIyC,MAjEW","names":["Img","constructor","hostRef","registerInstance","this","ionImgWillLoad","createEvent","ionImgDidLoad","ionError","onLoad","emit","onError","srcChanged","addIO","componentDidLoad","undefined","src","window","IntersectionObserverEntry","prototype","removeIO","io","IntersectionObserver","data","isIntersecting","load","observe","el","setTimeout","loadError","loadSrc","disconnect","render","h","Host","class","getIonMode","decoding","alt","part","getElement","style"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-img.entry.js"],"sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\n\nconst imgCss = \":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}\";\n\nconst Img = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\n    this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\n    this.ionError = createEvent(this, \"ionError\", 7);\n    this.onLoad = () => {\n      this.ionImgDidLoad.emit();\n    };\n    this.onError = () => {\n      this.ionError.emit();\n    };\n  }\n  srcChanged() {\n    this.addIO();\n  }\n  componentDidLoad() {\n    this.addIO();\n  }\n  addIO() {\n    if (this.src === undefined) {\n      return;\n    }\n    if (typeof window !== 'undefined' &&\n      'IntersectionObserver' in window &&\n      'IntersectionObserverEntry' in window &&\n      'isIntersecting' in window.IntersectionObserverEntry.prototype) {\n      this.removeIO();\n      this.io = new IntersectionObserver(data => {\n        // because there will only ever be one instance\n        // of the element we are observing\n        // we can just use data[0]\n        if (data[0].isIntersecting) {\n          this.load();\n          this.removeIO();\n        }\n      });\n      this.io.observe(this.el);\n    }\n    else {\n      // fall back to setTimeout for Safari and IE\n      setTimeout(() => this.load(), 200);\n    }\n  }\n  load() {\n    this.loadError = this.onError;\n    this.loadSrc = this.src;\n    this.ionImgWillLoad.emit();\n  }\n  removeIO() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  render() {\n    return (h(Host, { class: getIonMode(this) }, h(\"img\", { decoding: \"async\", src: this.loadSrc, alt: this.alt, onLoad: this.onLoad, onError: this.loadError, part: \"image\" })));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"src\": [\"srcChanged\"]\n  }; }\n};\nImg.style = imgCss;\n\nexport { Img as ion_img };\n"]}