{"version":3,"mappings":"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","names":["constructor","component","params","this","state","init","container","n","element","attachComponent","delegate","_destroy","assert","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","ViewController","Nav","hostRef","registerInstance","ionNavWillLoad","createEvent","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","swipeGestureChanged","gesture","enable","swipeGesture","rootChanged","root","setRoot","rootParams","componentWillLoad","document","querySelector","el","closest","mode","getIonMode","config","emit","componentDidLoad","e","d","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","disconnectedCallback","lifecycle","LIFECYCLE_WILL_UNLOAD","destroy","push","componentProps","opts","done","queueTrns","insertStart","insertViews","insert","insertIndex","insertPages","insertComponents","pop","removeStart","removeCount","popTo","indexOrViewCtrl","tiConfig","removeView","popToRoot","removeIndex","startIndex","setPages","setRouteId","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","y","viewController","find","v","assign","animationBuilder","getRouteId","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","ti","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","t","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","viewsLength","viewControllers","pages","map","filter","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","destroyView","progressCallback","progressAnimation","ani","s","sbAni","leavingEl","animationOpts","showGoBack","baseEl","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","setPageHidden","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","getTimeGivenProgression","easing","progressEnd","render","h","getElement","style","NavLink","routerDirection","onClick","routerAnimation","Host"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"sourcesContent":["import { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-eea9a7a9.js';\nimport { l as assert } from './helpers-dd7e4b7b.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-931440b1.js';\nimport { a as attachComponent } from './framework-delegate-4392cd63.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  const currentParams = view.params;\n  if (currentParams === params) {\n    return true;\n  }\n  if (!currentParams && !params) {\n    return true;\n  }\n  if (!currentParams || !params) {\n    return false;\n  }\n  const keysA = Object.keys(currentParams);\n  const keysB = Object.keys(params);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  // Test for A's keys different from B.\n  for (const key of keysA) {\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter =\n      !!document.querySelector('ion-router') &&\n        !this.el.closest('[no-router]');\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back-fae97365.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    // release swipe back gesture and transition\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts\n    }, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(tiConfig, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    }\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /** @internal */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /** @internal */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    return active\n      ? {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      }\n      : undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  getActive() {\n    return Promise.resolve(this.getActiveSync());\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  getByIndex(index) {\n    return Promise.resolve(this.views[index]);\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  canGoBack(view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  getPrevious(view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n  async queueTrns(ti, done) {\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n      return Promise.resolve(false);\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return Promise.resolve(false);\n        }\n        else if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return Promise.resolve(false);\n        }\n      }\n    }\n    // Normalize empty\n    if (ti.insertViews && ti.insertViews.length === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now\n    // get the next instruction\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n        enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      const result = requiresTransition\n        ? await this.transition(enteringView, leavingView, ti)\n        : {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    const viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition =\n        ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  getEnteringView(ti, leavingView) {\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  postViewInit(enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    const opts = ti.opts;\n    const insertViews = ti.insertViews;\n    const removeStart = ti.removeStart;\n    const removeCount = ti.removeCount;\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = 0; i < removeCount; i++) {\n        const view = this.views[i + removeStart];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      opts.direction = opts.direction || 'back';\n    }\n    const finalBalance = this.views.length +\n      (insertViews !== undefined ? insertViews.length : 0) -\n      (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n    if (finalBalance === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation\n      ? (ani) => this.sbAni = ani\n      : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      // insert the entering view into the correct index in the stack\n      views.splice(index, 0, view);\n    }\n  }\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return (h(\"slot\", null));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'back') {\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n    }\n  }\n  return Promise.resolve(false);\n};\n\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return (h(Host, { onClick: this.onClick }));\n  }\n  get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"]}