{"version":3,"mappings":"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","names":["Reorder","constructor","hostRef","registerInstance","this","onClick","ev","reorderGroup","el","closest","preventDefault","disabled","stopImmediatePropagation","render","mode","getIonMode","h","Host","class","name","lazy","part","getElement","style","ios","md","ReorderGroup","ionItemReorder","createEvent","lastToIndex","cachedHeights","scrollElTop","scrollElBottom","scrollElInitial","containerTop","containerBottom","state","disabledChanged","gesture","enable","connectedCallback","contentEl","t","_context","scrollEl","getScrollElement","Promise","createGesture","gestureName","gesturePriority","threshold","direction","passive","canStart","detail","onStart","onMove","onEnd","disconnectedCallback","destroy","complete","listOrReorder","resolve","completeSync","selectedItemEl","reorderEl","target","event","item","findReorderItem","data","heights","length","children","sum","i","child","offsetHeight","push","$ionIndex","box","getBoundingClientRect","top","bottom","scrollBox","scrollTop","AUTO_SCROLL_MARGIN","indexForItem","selectedItemHeight","classList","add","ITEM_REORDER_SELECTED","hapticSelectionStart","selectedItem","scroll","autoscroll","currentY","Math","max","min","deltaY","startY","toIndex","itemIndexForTop","fromIndex","hapticSelectionChanged","reorderMove","transform","emit","from","to","bind","hapticSelectionEnd","len","insertBefore","Array","isArray","reorderArray","transition","remove","itemHeight","value","posY","amount","SCROLL_JUMP","scrollBy","element","node","container","parent","parentElement","array","splice","slice"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-reorder_2.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-7a8b7a1c.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-27b3f981.js';\n\nconst reorderIosCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:34px;opacity:0.4}\";\n\nconst reorderMdCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:31px;opacity:0.3}\";\n\nconst Reorder = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  onClick(ev) {\n    const reorderGroup = this.el.closest('ion-reorder-group');\n    ev.preventDefault();\n    // Only stop event propagation if the reorder is inside of an enabled\n    // reorder group. This allows interaction with clickable children components.\n    if (!reorderGroup || !reorderGroup.disabled) {\n      ev.stopImmediatePropagation();\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const reorderIcon = mode === 'ios' ? 'reorder-three-outline' : 'reorder-two-sharp';\n    return (h(Host, { class: mode }, h(\"slot\", null, h(\"ion-icon\", { name: reorderIcon, lazy: false, class: \"reorder-icon\", part: \"icon\" }))));\n  }\n  get el() { return getElement(this); }\n};\nReorder.style = {\n  ios: reorderIosCss,\n  md: reorderMdCss\n};\n\nconst reorderGroupCss = \".reorder-list-active>*{-webkit-transition:-webkit-transform 300ms;transition:-webkit-transform 300ms;transition:transform 300ms;transition:transform 300ms, -webkit-transform 300ms;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none !important;transition:none !important;-webkit-box-shadow:0 0 10px rgba(0, 0, 0, 0.4);box-shadow:0 0 10px rgba(0, 0, 0, 0.4);opacity:0.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}\";\n\nconst ReorderGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\n    this.lastToIndex = -1;\n    this.cachedHeights = [];\n    this.scrollElTop = 0;\n    this.scrollElBottom = 0;\n    this.scrollElInitial = 0;\n    this.containerTop = 0;\n    this.containerBottom = 0;\n    this.state = 0 /* Idle */;\n    /**\n     * If `true`, the reorder will be hidden.\n     */\n    this.disabled = true;\n  }\n  disabledChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.disabled);\n    }\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (contentEl) {\n      this.scrollEl = await contentEl.getScrollElement();\n    }\n    this.gesture = (await import('./index-34cb2743.js')).createGesture({\n      el: this.el,\n      gestureName: 'reorder',\n      gesturePriority: 110,\n      threshold: 0,\n      direction: 'y',\n      passive: false,\n      canStart: detail => this.canStart(detail),\n      onStart: ev => this.onStart(ev),\n      onMove: ev => this.onMove(ev),\n      onEnd: () => this.onEnd(),\n    });\n    this.disabledChanged();\n  }\n  disconnectedCallback() {\n    this.onEnd();\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  }\n  /**\n   * Completes the reorder operation. Must be called by the `ionItemReorder` event.\n   *\n   * If a list of items is passed, the list will be reordered and returned in the\n   * proper order.\n   *\n   * If no parameters are passed or if `true` is passed in, the reorder will complete\n   * and the item will remain in the position it was dragged to. If `false` is passed,\n   * the reorder will complete and the item will bounce back to its original position.\n   *\n   * @param listOrReorder A list of items to be sorted and returned in the new order or a\n   * boolean of whether or not the reorder should reposition the item.\n   */\n  complete(listOrReorder) {\n    return Promise.resolve(this.completeSync(listOrReorder));\n  }\n  canStart(ev) {\n    if (this.selectedItemEl || this.state !== 0 /* Idle */) {\n      return false;\n    }\n    const target = ev.event.target;\n    const reorderEl = target.closest('ion-reorder');\n    if (!reorderEl) {\n      return false;\n    }\n    const item = findReorderItem(reorderEl, this.el);\n    if (!item) {\n      return false;\n    }\n    ev.data = item;\n    return true;\n  }\n  onStart(ev) {\n    ev.event.preventDefault();\n    const item = this.selectedItemEl = ev.data;\n    const heights = this.cachedHeights;\n    heights.length = 0;\n    const el = this.el;\n    const children = el.children;\n    if (!children || children.length === 0) {\n      return;\n    }\n    let sum = 0;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      sum += child.offsetHeight;\n      heights.push(sum);\n      child.$ionIndex = i;\n    }\n    const box = el.getBoundingClientRect();\n    this.containerTop = box.top;\n    this.containerBottom = box.bottom;\n    if (this.scrollEl) {\n      const scrollBox = this.scrollEl.getBoundingClientRect();\n      this.scrollElInitial = this.scrollEl.scrollTop;\n      this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\n      this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\n    }\n    else {\n      this.scrollElInitial = 0;\n      this.scrollElTop = 0;\n      this.scrollElBottom = 0;\n    }\n    this.lastToIndex = indexForItem(item);\n    this.selectedItemHeight = item.offsetHeight;\n    this.state = 1 /* Active */;\n    item.classList.add(ITEM_REORDER_SELECTED);\n    hapticSelectionStart();\n  }\n  onMove(ev) {\n    const selectedItem = this.selectedItemEl;\n    if (!selectedItem) {\n      return;\n    }\n    // Scroll if we reach the scroll margins\n    const scroll = this.autoscroll(ev.currentY);\n    // // Get coordinate\n    const top = this.containerTop - scroll;\n    const bottom = this.containerBottom - scroll;\n    const currentY = Math.max(top, Math.min(ev.currentY, bottom));\n    const deltaY = scroll + currentY - ev.startY;\n    const normalizedY = currentY - top;\n    const toIndex = this.itemIndexForTop(normalizedY);\n    if (toIndex !== this.lastToIndex) {\n      const fromIndex = indexForItem(selectedItem);\n      this.lastToIndex = toIndex;\n      hapticSelectionChanged();\n      this.reorderMove(fromIndex, toIndex);\n    }\n    // Update selected item position\n    selectedItem.style.transform = `translateY(${deltaY}px)`;\n  }\n  onEnd() {\n    const selectedItemEl = this.selectedItemEl;\n    this.state = 2 /* Complete */;\n    if (!selectedItemEl) {\n      this.state = 0 /* Idle */;\n      return;\n    }\n    const toIndex = this.lastToIndex;\n    const fromIndex = indexForItem(selectedItemEl);\n    if (toIndex === fromIndex) {\n      this.completeSync();\n    }\n    else {\n      this.ionItemReorder.emit({\n        from: fromIndex,\n        to: toIndex,\n        complete: this.completeSync.bind(this)\n      });\n    }\n    hapticSelectionEnd();\n  }\n  completeSync(listOrReorder) {\n    const selectedItemEl = this.selectedItemEl;\n    if (selectedItemEl && this.state === 2 /* Complete */) {\n      const children = this.el.children;\n      const len = children.length;\n      const toIndex = this.lastToIndex;\n      const fromIndex = indexForItem(selectedItemEl);\n      if (toIndex !== fromIndex && (listOrReorder === undefined || listOrReorder === true)) {\n        const ref = (fromIndex < toIndex)\n          ? children[toIndex + 1]\n          : children[toIndex];\n        this.el.insertBefore(selectedItemEl, ref);\n      }\n      if (Array.isArray(listOrReorder)) {\n        listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\n      }\n      for (let i = 0; i < len; i++) {\n        children[i].style['transform'] = '';\n      }\n      selectedItemEl.style.transition = '';\n      selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\n      this.selectedItemEl = undefined;\n      this.state = 0 /* Idle */;\n    }\n    return listOrReorder;\n  }\n  itemIndexForTop(deltaY) {\n    const heights = this.cachedHeights;\n    let i = 0;\n    // TODO: since heights is a sorted array of integers, we can do\n    // speed up the search using binary search. Remember that linear-search is still\n    // faster than binary-search for small arrays (<64) due CPU branch misprediction.\n    for (i = 0; i < heights.length; i++) {\n      if (heights[i] > deltaY) {\n        break;\n      }\n    }\n    return i;\n  }\n  /********* DOM WRITE ********* */\n  reorderMove(fromIndex, toIndex) {\n    const itemHeight = this.selectedItemHeight;\n    const children = this.el.children;\n    for (let i = 0; i < children.length; i++) {\n      const style = children[i].style;\n      let value = '';\n      if (i > fromIndex && i <= toIndex) {\n        value = `translateY(${-itemHeight}px)`;\n      }\n      else if (i < fromIndex && i >= toIndex) {\n        value = `translateY(${itemHeight}px)`;\n      }\n      style['transform'] = value;\n    }\n  }\n  autoscroll(posY) {\n    if (!this.scrollEl) {\n      return 0;\n    }\n    let amount = 0;\n    if (posY < this.scrollElTop) {\n      amount = -SCROLL_JUMP;\n    }\n    else if (posY > this.scrollElBottom) {\n      amount = SCROLL_JUMP;\n    }\n    if (amount !== 0) {\n      this.scrollEl.scrollBy(0, amount);\n    }\n    return this.scrollEl.scrollTop - this.scrollElInitial;\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'reorder-enabled': !this.disabled,\n        'reorder-list-active': this.state !== 0 /* Idle */,\n      } }));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n};\nconst indexForItem = (element) => {\n  return element['$ionIndex'];\n};\nconst findReorderItem = (node, container) => {\n  let parent;\n  while (node) {\n    parent = node.parentElement;\n    if (parent === container) {\n      return node;\n    }\n    node = parent;\n  }\n  return undefined;\n};\nconst AUTO_SCROLL_MARGIN = 60;\nconst SCROLL_JUMP = 10;\nconst ITEM_REORDER_SELECTED = 'reorder-selected';\nconst reorderArray = (array, from, to) => {\n  const element = array[from];\n  array.splice(from, 1);\n  array.splice(to, 0, element);\n  return array.slice();\n};\nReorderGroup.style = reorderGroupCss;\n\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };\n"]}