{"version":3,"sources":["webpack:///src/app/settings/settings.page.html","webpack:///src/app/settings/settings-routing.module.ts","webpack:///src/app/settings/settings.page.ts","webpack:///src/app/settings/settings.module.ts"],"names":["updateService","settings","routes","path","component","SettingsPage","database","deploy","platform","voiceService","loading","betaEnabled","devicePlatform","hasSpeech","teamOptions","header","voiceOptions","commentaryLevelOptions","id","this","undefined","window","speechSynthesis","ready","console","debug","info","err","error","configuration","getConfiguration","channel","toLowerCase","current","getAll","volume","Math","round","teams","sort","a","b","fullName","voices","voice","commentaryLevels","commentaryLevel","setBetaEnabled","team","find","t","key","setBoolean","ev","setString","setNumber","detail","value","setVoice","speak","setCommentaryLevel","parseInt","preventDefault","stopPropagation","say","force","setFavoriteTeam","SettingsPageRoutingModule","SettingsPageModule"],"mappings":"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","file":"x","sourcesContent":["<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-title>Slettings</ion-title>\n    <ion-buttons slot=\"secondary\">\n      <ion-button *ngIf=\"loading\">\n        <ion-spinner></ion-spinner>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list lines=\"none\" class=\"ion-text-wrap\">\n    <span *ngIf=\"devicePlatform !== 'web'\">\n      <!-- native-only stuff -->\n      <ion-list-header lines=\"full\">\n        <h3>Automatic Updates</h3>\n      </ion-list-header>\n      <ion-item>\n        <ion-label class=\"ion-text-wrap\">Receive content updates early?</ion-label>\n        <ion-toggle *ngIf=\"current\" (ionChange)=\"setBetaEnabled()\" [(ngModel)]=\"current.betaEnabled\" slot=\"end\"></ion-toggle>\n      </ion-item>\n      <ion-item *ngIf=\"updateService.updateAvailable && !updateService.updateReady && updateService.percentDone\">\n        <ion-label slot=\"start\">{{updateService.phase}}:</ion-label>\n        <ion-progress-bar value=\"{{updateService.percentDone}}\"></ion-progress-bar>\n      </ion-item>\n      <ion-item *ngIf=\"updateService.updateReady\" color=\"danger\">\n        <ion-label class=\"ion-text-wrap\">A content update is available.</ion-label>\n        <ion-button slot=\"end\" color=\"light\" (click)=\"updateService.reload()\">Apply</ion-button>\n      </ion-item>\n      <ion-list-header lines=\"full\">\n        <h3>Disable Sleep</h3>\n      </ion-list-header>\n      <ion-item>\n        <ion-label class=\"ion-text-wrap\">Disable sleep while games are active?</ion-label>\n        <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('disableSleep')\" [(ngModel)]=\"current.disableSleep\" slot=\"end\"></ion-toggle>\n      </ion-item>\n    </span>\n    <ion-list-header lines=\"full\">\n      <h3>Interface</h3>\n    </ion-list-header>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Reduce motion in effects?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('reduceMotion')\" [(ngModel)]=\"current.reduceMotion\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Always use dark mode?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"settings.setDarkMode(current.darkMode)\" [(ngModel)]=\"current.darkMode\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-list-header lines=\"full\">\n      <h3>Audio</h3>\n    </ion-list-header>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Enable Sound Effects?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('audio')\" [(ngModel)]=\"current.audio\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-item>\n      <ion-label class=\"ion-text-wrap\">Volume:</ion-label>\n      <ion-range aria-label=\"Volume\" *ngIf=\"current\" min=\"0\" max=\"1000\" debounce=\"200\" (ionChange)=\"setVolume($event)\" [(ngModel)]=\"volume\" slot=\"end\"></ion-range>\n    </ion-item>\n    <ion-item *ngIf=\"hasSpeech\">\n      <ion-label class=\"ion-text-wrap\">Enable Speech?</ion-label>\n      <ion-toggle *ngIf=\"current\" (ionChange)=\"setBoolean('speech')\" [(ngModel)]=\"current.speech\" slot=\"end\"></ion-toggle>\n    </ion-item>\n    <ion-item *ngIf=\"hasSpeech\">\n      <ion-icon name=\"volume-high-outline\" slot=\"start\" (click)=\"speak($event)\" class=\"ion-no-margin\" style=\"margin-right: 0.5em\"></ion-icon>\n      <ion-label for=\"select-voice\" class=\"ion-text-wrap\">Voice:</ion-label>\n      <ion-select *ngIf=\"current && voice\" id=\"select-voice\" aria-label=\"Select a Voice\" class=\"ion-text-wrap\" (ionChange)=\"setVoice($event)\" interface=\"action-sheet\" [interfaceOptions]=\"voiceOptions\" okText=\"Choose\" cancelText=\"Cancel\" [value]=\"current.voice\">\n        <ion-select-option *ngFor=\"let voice of voices\" [value]=\"voice.voiceURI\">{{voice.name}}</ion-select-option>\n      </ion-select>\n    </ion-item>\n    <ion-item *ngIf=\"hasSpeech\">\n      <ion-label for=\"choose-commetary-level\" class=\"ion-text-wrap\">Commentary\n        Level:</ion-label>\n      <ion-select *ngIf=\"current && commentaryLevel\" id=\"choose-commentary-level\" aria-label=\"Choose a Commentary Level\" class=\"ion-text-wrap\" (ionChange)=\"setCommentaryLevel($event)\" interface=\"action-sheet\" [interfaceOptions]=\"commentaryLevelOptions\" okText=\"Choose\" cancelText=\"Cancel\" [value]=\"current.commentaryLevel\">\n        <ion-select-option *ngFor=\"let level of commentaryLevels | keyvalue\" [value]=\"level.key\">{{level.value}}</ion-select-option>\n      </ion-select>\n    </ion-item>\n    <ion-list-header lines=\"full\">\n      <h3>Teams</h3>\n    </ion-list-header>\n    <ion-item id=\"bl-team-selector\">\n      <ion-label class=\"ion-text-wrap\">\n        <ion-label for=\"choose-your-team\">\n          <h4>Choose Your Team:</h4>\n        </ion-label>\n        <ion-note>Your team is always first in the live feed.</ion-note>\n      </ion-label>\n      <ion-select *ngIf=\"current && teams\" id=\"choose-your-team\" aria-label=\"Choose Your Team\" class=\"ion-text-wrap\" (ionChange)=\"setString('favoriteTeam', $event)\" interface=\"action-sheet\" [interfaceOptions]=\"teamOptions\" okText=\"Choose\" cancelText=\"Cancel\" [(ngModel)]=\"current.favoriteTeam\">\n        <ion-select-option *ngFor=\"let team of teams; trackBy: id\" [value]=\"team.id\">{{team.fullName}}</ion-select-option>\n      </ion-select>\n    </ion-item>\n  </ion-list>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingsPage } from './settings.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsPageRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\n\nimport { Device } from '@capacitor/device';\n\nimport { Deploy } from 'cordova-plugin-ionic/dist/ngx';\n\nimport { Team } from '../../lib/model/team';\n\nimport { UpdateService } from '../../lib/update.service';\nimport { APIDatabase } from '../../lib/api/database';\nimport { Settings, SettingsService, COMM_LEVEL } from '../../lib/settings.service';\nimport { Platform } from '@ionic/angular';\nimport Util from 'src/lib/util';\nimport { VoiceService } from 'src/lib/voice.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPage implements OnInit {\n  public loading = true;\n\n  public current: Settings;\n  public betaEnabled = false;\n  public devicePlatform = 'web';\n  public hasSpeech = false;\n\n  public teamOptions: any = {\n    header: 'Choose Your Team',\n  };\n  public voiceOptions: any = {\n    header: 'Choose a Voice',\n  };\n  public commentaryLevelOptions: any = {\n    header: 'Choose a Commentary Level',\n  };\n\n  public teams: Team[];\n  public volume: number;\n  public voices: SpeechSynthesisVoice[];\n  public voice: SpeechSynthesisVoice;\n  public commentaryLevels: Object;\n  public commentaryLevel: number;\n\n  id = Util.trackById;\n\n  constructor(\n    public database: APIDatabase,\n    public deploy: Deploy,\n    private platform: Platform,\n    public settings: SettingsService,\n    public updateService: UpdateService,\n    public voiceService: VoiceService,\n  ) {\n    this.hasSpeech = window.speechSynthesis !== undefined;\n  }\n\n  async ngOnInit() {\n    await this.platform.ready();\n    console.debug('SettingsPage.ngOnInit()');\n\n    try {\n      const info = await Device.getInfo();\n      this.devicePlatform = info.platform;\n      console.debug(`SettingsPage.ngOnInit(): platform=${this.devicePlatform}`);\n    } catch (err) {\n      console.error('SettingsPage.ngOnInit(): failed to get device info:', err);\n    }\n\n    if (this.devicePlatform !== 'web') {\n      try {\n        const configuration = await this.deploy.getConfiguration();\n        this.betaEnabled = configuration.channel.toLowerCase() === 'beta';\n        console.debug(`SettingsPage.ngOnInit(): betaEnabled=${this.betaEnabled}`);\n      } catch (err) {\n        console.error('SettingsPage.ngOnInit(): failed to get deploy configuration:', err);\n      }\n    }\n\n    this.current = await this.settings.getAll();\n    this.volume = Math.round(this.current.volume * 1000);\n\n    this.teams = (await this.database.teams()).sort((a: Team, b: Team) => {\n      return (a.fullName < b.fullName) ? -1 : (a.fullName > b.fullName) ? 1 : 0;\n    });\n\n    this.voices = this.voiceService.voices();\n    this.voice = await this.voiceService.voice(this.current.voice);\n\n    this.commentaryLevels = COMM_LEVEL;\n    this.commentaryLevel = this.current.commentaryLevel;\n\n    this.loading = false;\n    console.debug('SettingsPage.onInit(): current settings=', this.current);\n  }\n\n  async setBetaEnabled() {\n    return await this.settings.setBetaEnabled(this.current.betaEnabled);\n  }\n\n  getTeamName(id: string) {\n    const team = this.teams.find((t: Team) => t.id === id);\n    return team ? team.fullName : '';\n  }\n\n  async setBoolean(key: string) {\n    return await this.settings.setBoolean(key, this.current[key]);\n  }\n  async setString(key: string, ev?: { detail: { value: any }}) {\n    console.debug('setString: key=', key);\n    console.debug('setString: ev=', ev);\n    if (ev && ev.detail && ev.detail.value) {\n\n    }\n    return await this.settings.setString(key, this.current[key]);\n  }\n  async setVolume(ev?: CustomEvent<any>) {\n    return await this.settings.setNumber('volume', ev.detail.value / 1000.0);\n  }\n\n  async setVoice(ev?: CustomEvent<any>) {\n    const voice = await this.voiceService.voice(ev?.detail?.value);\n    if (voice) {\n      await this.settings.setVoice(ev.detail.value);\n      this.speak();\n    } else {\n      console.error(`Unable to locate voice: ${ev?.detail?.value}`);\n    }\n  }\n\n  async setCommentaryLevel(ev?: CustomEvent<any>) {\n    return await this.settings.setCommentaryLevel(parseInt(ev.detail.value));\n  }\n\n  async speak(ev?: CustomEvent<any>) {\n    ev?.preventDefault();\n    ev?.stopPropagation();\n    return this.voiceService.say('The commissioner is doing a great job!', {\n      force: true,\n    });\n  }\n\n  async setFavoriteTeam(detail: { value: string }) {\n    const team = this.teams.find((t: Team) => {\n      return t.id === detail.value;\n    });\n    this.settings.setFavoriteTeam(team?.id);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SettingsPageRoutingModule } from './settings-routing.module';\n\nimport { SettingsPage } from './settings.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SettingsPageRoutingModule\n  ],\n  declarations: [SettingsPage]\n})\nexport class SettingsPageModule {}\n"]}