{"version":3,"mappings":"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","names":["n","i","_","path","component","constructor","o","a","m","g","this","w","O","S","subleagues","ngOnInit","platform","ready","stream","subscribe","Z","z","leagues","standings","games","postprocess","openTeam","console","debug","modalController","create","F","componentProps","id","present","G","data","name","A","l","u","f","wins","tiebreakers","order","indexOf","J","records","find","database","teams","Q","filter","map","v","x","h","divisions","t","sort","c","r","p","P","fullName","emoji","emojiColor","mainColor","secondaryColor","mainTextColor","contrastingMainColor","secondaryTextColor","contrastingSecondaryColor","losses","nonLosses","playoffs","push","loading","selectors","j","b","N","e","T","C"],"sources":["webpack:///src/app/standings/standings.page.html","webpack:///src/app/standings/standings-routing.module.ts","webpack:///src/app/standings/standings.page.ts","webpack:///src/app/standings/standings.module.ts"],"sourcesContent":["<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-title>\n      Standings\n    </ion-title>\n    <ion-buttons slot=\"secondary\">\n      <ion-button *ngIf=\"loading\">\n        <ion-spinner></ion-spinner>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-no-margin\">\n  <ion-grid>\n    <ion-row>\n      <ion-col size=\"6\" size-xs=\"12\" size-sm=\"12\" size-md=\"6\" size-lg=\"6\" size-xl=\"6\" *ngFor=\"let subleague of data.subleagues; trackBy: id\">\n        <ion-header class=\"ion-no-border ion-text-center\">\n          <h4>{{subleague.name}}</h4>\n        </ion-header>\n        <ion-card class=\"ion-no-padding ion-no-margin ion-margin-vertical\" *ngFor=\"let division of subleague.divisions; trackBy: id\">\n          <ion-card-header class=\"division-header\">\n            <ion-card-subtitle>{{division.name}}</ion-card-subtitle>\n          </ion-card-header>\n          <ion-card-content class=\"ion-no-padding\">\n            <ion-grid style=\"width: 100%\">\n              <ion-row\n                lines=\"none\"\n                class=\"header-row\"\n              >\n                <ion-col class=\"team-name header\" size=\"7\">\n                  Teams\n                </ion-col>\n                <ion-col class=\"team-wins header\" size=\"2\">\n                  Wins\n                </ion-col>\n                <ion-col class=\"team-record header\" size=\"3\">\n                  Record\n                </ion-col>\n              </ion-row>\n              <ion-row\n                lines=\"none\"\n                class=\"team-row\"\n                [style]=\"'background-color: ' + team.mainColor + '; color: ' + team.mainTextColor\"\n                *ngFor=\"let team of division.teams; trackBy: id\"\n                (click)=\"openTeam(team.id)\"\n              >\n                <ion-col class=\"team-name\" size=\"7\">\n                  {{team.name}}\n                </ion-col>\n                <ion-col class=\"team-wins\" size=\"2\">\n                  {{team.wins}}\n                </ion-col>\n                <ion-col class=\"team-record\" size=\"3\">\n                  {{team.nonLosses}}-{{team.losses}}\n                </ion-col>\n              </ion-row>\n            </ion-grid>\n          </ion-card-content>\n        </ion-card>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StandingsPage } from './standings.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: StandingsPage,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class StandingsPageRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ModalController, Platform } from '@ionic/angular';\n\nimport { APIStream } from 'src/lib/api/stream';\nimport { StreamData } from 'src/lib/model/streamData';\nimport { Standings } from 'src/lib/model/standings';\nimport { Team } from 'src/lib/model/team';\nimport { Leagues } from 'src/lib/model/leagues';\nimport { Subleague } from 'src/lib/model/subleague';\nimport { Division } from 'src/lib/model/division';\nimport { APIDatabase } from 'src/lib/api/database';\nimport { Tiebreaker } from 'src/lib/model/tiebreaker';\nimport { TeamPage } from '../team-page/team-page.page';\n\ninterface LeagueData {\n  id: string;\n  name: string;\n  subleagues: SubleagueData[];\n}\n\ninterface SubleagueData {\n  id: string;\n  name: string;\n  divisions: DivisionData[];\n}\n\ninterface DivisionData {\n  id: string;\n  name: string;\n  teams: TeamData[];\n}\n\ninterface TeamData {\n  id: string;\n  name: string;\n  wins: number;\n  losses: number;\n  playoffs: boolean;\n}\n\n@Component({\n  selector: 'app-standings',\n  templateUrl: 'standings.page.html',\n  styleUrls: ['standings.page.scss']\n})\nexport class StandingsPage implements OnInit {\n  loading = true;\n  leagues = new Leagues({});\n  standings = new Standings({});\n  tiebreakers = new Tiebreaker({});\n\n  data = { subleagues: [] } as LeagueData;\n\n  constructor(\n    private database: APIDatabase,\n    private modalController: ModalController,\n    private platform: Platform,\n    private stream: APIStream,\n  ) {\n  }\n\n  async ngOnInit(): Promise<void> {\n    await this.platform.ready();\n    this.stream.subscribe(async (evt: StreamData|Event) => {\n      if (evt instanceof StreamData) {\n        this.leagues = evt.leagues;\n        this.standings = evt.games.standings;\n      }\n      this.postprocess();\n    });\n  }\n\n  async openTeam(id: string) {\n    console.debug(`opening team: ${id}`);\n    const modal = await this.modalController.create({\n      component: TeamPage,\n      componentProps: {\n        id,\n      },\n    });\n    return await modal.present();\n  }\n\n  async postprocess() {\n    const l = this.leagues?.leagues[0];\n    if (!l) {\n      return;\n    }\n\n    this.data.name = l.name;\n\n    const sortByWins = (a: Team, b: Team) => {\n      const aWins = this.standings.wins[a.id];\n      const bWins = this.standings.wins[b.id];\n\n      let ret = bWins - aWins;\n      if (ret === 0) {\n        const aTiebreaker = this.tiebreakers.order.indexOf(a.id);\n        const bTiebreaker = this.tiebreakers.order.indexOf(b.id);\n\n        ret = aTiebreaker - bTiebreaker;\n      }\n\n      return ret;\n    };\n\n    const records = this.standings.records;\n\n    this.tiebreakers = this.leagues.tiebreakers.find((tiebreaker: Tiebreaker) => tiebreaker.id === l.tiebreakers);\n    const teams = await this.database.teams();\n\n    const sl = this.leagues?.subleagues?.filter((s: Subleague) => {\n      return l.subleagues.indexOf(s.id) >= 0;\n    });\n\n    this.data.subleagues = sl.map((s: Subleague) => {\n      const subLeagueData = {\n        id: s.id,\n        name: s.name,\n      } as SubleagueData;\n\n      const teamsData = [] as TeamData[];\n\n      const d = this.leagues?.divisions?.filter((item: Division) => {\n        return s.divisions.indexOf(item.id) >= 0;\n      });\n\n      subLeagueData.divisions = d.sort((a: Division, b: Division) => {\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n      }).map((div: Division) => {\n        const divisionData = {\n          id: div.id,\n          name: div.name,\n        } as DivisionData;\n\n        divisionData.teams = div.teams\n          .map((id: string) => teams.find((team: Team) => id === team.id))\n          .sort(sortByWins)\n          .map((team: Team) => {\n\n          const record = records[team.id];\n          const teamData = {\n            id: team.id,\n            name: team.fullName,\n            emoji: team.emoji,\n            emojiColor: team.emojiColor,\n            mainColor: team.mainColor,\n            secondaryColor: team.secondaryColor,\n            mainTextColor: team.contrastingMainColor,\n            secondaryTextColor: team.contrastingSecondaryColor,\n            wins: record.wins,\n            losses: record.losses,\n            nonLosses: record.nonLosses,\n            playoffs: false,\n          };\n\n          teamsData.push(teamData);\n\n          return teamData;\n        });\n\n        return divisionData;\n      });\n\n      teamsData.sort((a: TeamData, b: TeamData) => {\n        let ret = b.wins - a.wins;\n        if (ret === 0) {\n          ret = this.tiebreakers.order.indexOf(a.id) - this.tiebreakers.order.indexOf(b.id);\n        }\n\n        return ret;\n      }).filter((_, index) => {\n        return index < 4;\n      }).map((team: TeamData) => {\n        team.playoffs = true;\n      });\n\n      return subLeagueData;\n    });\n\n    this.loading = false;\n    // console.debug('leagues:', this.leagues);\n    // console.debug('standings:', this.standings);\n    // console.debug('teams:', teams);\n    // console.debug('data:', this.data);\n  }\n\n  id(item: any) {\n    if (item && item.id) {\n      return item.id;\n    }\n    return item;\n  }\n}\n","import { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { StandingsPage } from './standings.page';\n\nimport { StandingsPageRoutingModule } from './standings-routing.module';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    StandingsPageRoutingModule\n  ],\n  declarations: [StandingsPage]\n})\nexport class StandingsPageModule {}\n"]}