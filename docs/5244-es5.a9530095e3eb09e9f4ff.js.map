{"version":3,"sources":["webpack:///node_modules/@capacitor-community/keep-awake/dist/esm/index.js","webpack:///node_modules/@egstad/marquee/src/index.js","webpack:///src/app/live-feed/live-feed.page.html","webpack:///src/app/live-feed/live-feed-routing.module.ts","webpack:///src/app/live-feed/live-feed.page.ts","webpack:///src/app/live-feed/live-feed.module.ts"],"names":["KeepAwake","registerPlugin","web","then","m","KeepAwakeWeb","Marquee","constructor","el","this","TypeError","document","querySelector","sign","children","RAF","offset","offsetWidth","speed","dataset","onResize","getSignWidth","bind","styleElements","init","draw","window","addEventListener","style","display","signWidth","clientWidth","requestAnimationFrame","performAnimation","reset","transform","stop","cancelAnimationFrame","destroy","removeEventListener","LiveFeedPage","LiveFeedPageModule","routes","path","component","stream","database","loadingController","platform","settings","streamData","games","segment","ready","errors","lastUpdateTime","Date","now","filterVisible","stale","staleThreshold","keepAwake","PHASES","uiState","schedule","console","debug","showLoading","startListening","subscription","unsubscribe","undefined","content","scrollToTop","loading","evt","setTimeout","retry","target","complete","searchTerm","srcElement","value","refreshUI","length","filter","game","inProgress","getActiveGames","isFavorite","homeTeam","awayTeam","getFavoriteGames","ret","warn","favoriteTeam","sort","a","b","nameA","homeTeamNickname","nameB","type","clockUpdater","setInterval","countdown","sim","winners","postseasons","map","postseason","winner","playoffs","team","leagues","teams","find","id","playoffsName","name","playoffDay","hours","minutes","seconds","getSegmentGames","homeTeamName","toLowerCase","indexOf","awayTeamName","detail","setSegment","current","active","disableSleep","getActiveGameCount","err","error","ErrorEvent","onError","checkStale","Object","keys","data","key","onUpdate","checkDisableSleep","seasonHeader","notice","countdownNotice","day","phase","doCountdown","getWinners","seasonNumber","round","season","clearInterval","assign","hideLoading","subscribe","onEvent","globalEvents","events","event","expire","elem","getElementById","setAttribute","index","item","String","forceRefresh","LiveFeedPageRoutingModule"],"mappings":"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","file":"x","sourcesContent":["import { registerPlugin } from '@capacitor/core';\r\nconst KeepAwake = registerPlugin('KeepAwake', {\r\n    web: () => import('./web').then(m => new m.KeepAwakeWeb()),\r\n});\r\nexport * from './definitions';\r\nexport { KeepAwake };\r\n//# sourceMappingURL=index.js.map","export default class Marquee {\n  constructor(el) {\n    // marquee el\n    if (typeof el === \"object\") {\n      this.el = el;\n    } else if (typeof el === \"string\") {\n      this.el = document.querySelector(el);  \n    } else {\n      throw new TypeError(\"Marquee accepts either a HTML Element (object) or a class/id to query (string).\");\n    }\n    // marquee content\n    this.sign = this.el.children[0];\n    // raf instance, cached for cancel\n    this.RAF = null;\n    this.offset = this.el.offsetWidth;\n    this.speed = this.el.dataset.speed || 1;\n    // let's bind the window resize event for easy setup/teardown\n    this.onResize = this.getSignWidth.bind(this)\n    \n    this.styleElements();\n    this.init();\n  }\n  init() {\n    // measure the sign's width\n    this.getSignWidth();\n    // begin animation\n    this.draw();\n    // in case the contents change size on resize,\n    // fetch & update the size for animation\n    window.addEventListener(\"resize\", this.onResize)\n  }\n  styleElements() {\n    this.el.style.display = \"flex\";\n    this.sign.style.display = \"inline-flex\";\n  }\n  getSignWidth() {\n    this.signWidth = this.sign.clientWidth\n  }\n  draw() {\n    const performAnimation = () => {\n      // loop it!\n      this.RAF = requestAnimationFrame(performAnimation);\n\n      // if the item is fully hidden, start animation over\n      if (-this.offset >= this.signWidth) {\n        this.reset()\n      }\n      \n      // update offset\n      this.offset = this.offset - this.speed;\n      this.sign.style.transform = `translate3d(${this.offset}px, 0, 0)`;\n    };\n\n    requestAnimationFrame(performAnimation);\n  }\n  stop() {\n    cancelAnimationFrame(this.RAF);\n  }\n  reset() {\n    this.offset = this.el.offsetWidth;\n    this.sign.style.transform = `translate3d(${this.offset}px, 0, 0)`;\n  }\n  destroy() {\n    this.stop()\n    window.removeEventListener(\"resize\", this.onResize)\n  }\n}\n\n\n\n","<ion-header translucent=\"true\">\n  <ion-toolbar color=\"primary\" (click)=\"scrollToTop()\">\n    <ion-title>Blases Loaded</ion-title>\n    <ion-buttons slot=\"secondary\">\n      <ion-button *ngIf=\"loading || stale\">\n        <ion-spinner></ion-spinner>\n      </ion-button>\n      <!--\n      <ion-button *ngIf=\"errors &gt; 0 && !isPostseasonComplete()\">\n        <ion-icon name=\"alert-circle-outline\" color=\"danger\"></ion-icon>\n      </ion-button>\n      -->\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-toolbar *ngIf=\"ready && !uiState.notice\">\n    <ion-buttons slot=\"primary\">\n      <!-- this is just to fix spacing for now, I'll figure out something better eventually -->\n      <ion-button>\n        <ion-icon></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-segment (ionChange)=\"segmentChanged($event)\" [value]=\"segment\">\n      <ion-segment-button value=\"all\">\n        <ion-label>All ({{getGameCount()}})</ion-label>\n      </ion-segment-button>\n      <ion-segment-button value=\"active\">\n        <ion-label>Active ({{getActiveGameCount()}})</ion-label>\n      </ion-segment-button>\n      <ion-segment-button value=\"favorites\">\n        <ion-label>Favorites ({{getFavoriteGameCount()}})</ion-label>\n      </ion-segment-button>\n    </ion-segment>\n    <ion-buttons slot=\"secondary\">\n      <ion-button (click)=\"toggleSearchbar()\">\n        <ion-icon name=\"search-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n  \n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"forceRefresh($event)\">\n    <ion-refresher-content\n      pullingIcon=\"baseball-outline\"\n    ><ion-spinner name=\"default\"></ion-spinner>\n    </ion-refresher-content>\n  </ion-refresher>\n  <ion-searchbar *ngIf=\"filterVisible\" debounce=\"200\" value=\"{{searchTerm}}\" showCancelButton=\"focus\" (ionInput)=\"filterList($event)\"></ion-searchbar>\n  <span *ngIf=\"ready\">\n    <span *ngIf=\"uiState.notice\">\n      <ion-item lines=\"none\">\n        <h4>{{uiState.notice}}</h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngFor=\"let winner of uiState.winners\">\n        <h4>\n          The\n          <!-- <span [style]=\"'color: ' + uiState.winner.mainColor\">{{uiState.winner.fullName}}</span> -->\n          <app-team team=\"home\" [teamColor]=\"winner.team.mainColor\"\n            [emoji]=\"winner.team.emoji\" [name]=\"winner.team.fullName\"></app-team>\n          are the {{ winner.playoffsName }} Champions!\n        </h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngIf=\"uiState.countdownNotice !== undefined && countdown && countdown.diff >= 0\">\n        <h4>\n          {{uiState.countdownNotice}}\n          <br>\n          {{getCountdown()}}\n        </h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngIf=\"uiState.countdownNotice !== undefined && countdown && countdown.diff &lt; 0\">\n        <h4>Next season starts in... uhh.  <i>*tugs collar*</i> I mean. What <i>is</i> time, really?</h4>\n      </ion-item>\n      <div id=\"marquee\" data-speed=\"1\">\n        <div class=\"marquee\">\n          <div class=\"marquee-item\" *ngFor=\"let event of globalEvents\">\n            {{event.msg}}...\n            &nbsp;\n            &nbsp;\n            &nbsp;\n          </div>\n        </div>\n      </div>\n    </span>\n    <span *ngIf=\"!uiState.notice\">\n      <ion-item lines=\"none\" *ngIf=\"uiState.seasonHeader\">\n        <h4 *ngIf=\"streamData && streamData.games\" class=\"ion-no-margin\">{{uiState.seasonHeader}}</h4>\n      </ion-item>\n      <ion-item lines=\"none\" *ngIf=\"segment === 'active' && (!games || games.length === 0)\">\n        No active games for day {{streamData.games.sim.day}}.\n      </ion-item>\n      <ion-grid style=\"margin-top: 0; padding-top: 0\">\n        <ion-row>\n          <!-- size-xs=\"12\" size-sm=\"12\" size-md=\"12\" size-lg=\"6\" size-xl=\"6\" -->\n          <ion-col size=\"12\" *ngFor=\"let game of games; trackBy: gameId\">\n            <app-diamond [game]=\"game\" prefix=\"live-diamond\" (refresh)=\"refreshUI()\"></app-diamond>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </span>\n  </span>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LiveFeedPage } from './live-feed.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LiveFeedPage,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LiveFeedPageRoutingModule {}\n","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { LoadingController, IonContent, Platform } from '@ionic/angular';\n\nimport { KeepAwake } from '@capacitor-community/keep-awake';\n\nimport { Subscription } from 'rxjs';\n\nimport Marquee from '@egstad/marquee/src';\n\nimport { APIStream } from '../../lib/api/stream';\nimport { SettingsService, SEGMENT } from '../../lib/settings.service';\n\nimport { StreamData } from '../../lib/model/streamData';\nimport { Game } from '../../lib/model/game';\nimport { Team } from '../../lib/model/team';\n\nimport { GlobalEvent } from 'src/lib/model/globalEvent';\nimport { APIDatabase } from 'src/lib/api/database';\nimport { Countdown } from 'src/lib/model/sim';\nimport { PHASES } from 'src/lib/model/phases';\n\n@Component({\n  selector: 'app-live-feed',\n  templateUrl: 'live-feed.page.html',\n  styleUrls: ['live-feed.page.scss']\n})\nexport class LiveFeedPage implements OnInit, OnDestroy {\n  @ViewChild(IonContent, { static: false }) content: IonContent;\n\n  public streamData = new StreamData({});\n  public games = [] as Game[];\n  public searchTerm: string;\n  public segment = 'all' as SEGMENT;\n\n  // protected loading: HTMLIonLoadingElement;\n  public loading: boolean;\n  public ready = false;\n  public errors = 0;\n  public lastUpdateTime = Date.now();\n  public filterVisible = false;\n  public stale = false;\n  public staleThreshold = 30 * 1000; // 30s\n\n  private subscription: Subscription;\n\n  private clockUpdater: number;\n  public countdown: Countdown;\n  public globalEvents: GlobalEvent[];\n  private keepAwake = false;\n  public phase: PHASES;\n  public PHASES = PHASES;\n  public uiState = {} as { [key: string]: any };\n\n  constructor(\n    private stream: APIStream,\n    private database: APIDatabase,\n    public loadingController: LoadingController,\n    private platform: Platform,\n    protected settings: SettingsService) {\n  }\n\n  private get schedule(): Game[] {\n    return this.streamData?.games?.schedule || [];\n  }\n\n  async ngOnInit() {\n    await this.platform.ready();\n    await this.settings.ready;\n\n    console.debug('LiveFeed.ngOnInit()');\n    this.showLoading();\n\n    this.segment = this.settings.segment();\n    await this.startListening();\n    return true;\n  }\n\n  async ngOnDestroy() {\n    this.ready = false;\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n    return true;\n  }\n\n  async scrollToTop() {\n    this.content.scrollToTop();\n  }\n\n  async showLoading() {\n    this.loading = true;\n  }\n\n  async hideLoading() {\n    this.loading = false;\n    this.ready = true;\n  }\n\n  forceRefresh(evt: any) {\n    setTimeout(() => {\n      this.stream.retry().finally(() => {\n        evt?.target?.complete();\n      });\n    }, 500);\n  }\n\n  toggleSearchbar() {\n    this.filterVisible = !this.filterVisible;\n    console.debug(`LiveFeed.toggleSearchbar(): filterVisible=${this.filterVisible}`);\n  }\n\n  filterList(evt: any) {\n    this.searchTerm = evt.srcElement.value;\n    return this.refreshUI();\n  }\n\n  getGameCount(): number {\n    return this.streamData?.games?.schedule?.length || 0;\n  }\n\n  getActiveGames(): Game[] {\n    if (this.streamData?.games?.schedule) {\n      return this.streamData.games.schedule.filter((game: Game) => {\n        return game.inProgress;\n      });\n    }\n    return [];\n  }\n\n  getActiveGameCount(): number {\n    return this.getActiveGames().length;\n  }\n\n  getFavoriteGames(): Game[] {\n    if (this.streamData?.games?.schedule) {\n      return this.streamData?.games?.schedule.filter((game: Game) => {\n        return this.settings.isFavorite(game.homeTeam) || this.settings.isFavorite(game.awayTeam);\n      });\n    }\n    return [];\n  }\n\n  getFavoriteGameCount(): number {\n    return this.getFavoriteGames().length;\n  }\n\n  getSegmentGames(): Game[] {\n    console.debug('LiveFeed.getSegmentGames()');\n\n    let ret = [] as Game[];\n    switch (this.segment) {\n      case 'all':\n        ret = this.streamData?.games?.schedule || [];\n        break;\n      case 'active':\n        ret = this.getActiveGames();\n        break;\n      case 'favorites':\n        ret = this.getFavoriteGames();\n        break;\n      default:\n        console.warn(`LiveFeed.getSegmentGames(): unhandled segment: ${this.segment}`);\n        ret = [];\n        break;\n    }\n\n    // return [ret[0]];\n\n    const favoriteTeam = this.settings.favoriteTeam();\n    return ret.sort((a: Game, b: Game) => {\n      // always put favorite team first\n      if (a.homeTeam === favoriteTeam || a.awayTeam === favoriteTeam) {\n        return -1;\n      } else if (b.homeTeam === favoriteTeam || b.awayTeam === favoriteTeam) {\n        return 1;\n      }\n\n      if (this.settings.isFavorite(a.homeTeam) || this.settings.isFavorite(a.awayTeam)) {\n        return -1;\n      } else if (this.settings.isFavorite(b.homeTeam) || this.settings.isFavorite(b.awayTeam)) {\n        return 1;\n      }\n\n      const nameA = a.homeTeamNickname;\n      const nameB = b.homeTeamNickname;\n      return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;\n    });\n  }\n\n  doCountdown(type: string) {\n    if (!this.clockUpdater) {\n      this.clockUpdater = setInterval(() => {\n        this.countdown = this.streamData.sim[type]();\n      }, 1000) as unknown as number;\n    }\n  }\n\n  getWinners() {\n    const winners = this.streamData?.games?.postseasons?.map((postseason) =>  {\n      const winner = postseason?.playoffs?.winner || '';\n\n      return {\n        team: this.streamData.leagues.teams.find((team: Team) => team.id === winner),\n        playoffsName: postseason?.playoffs?.name || '',\n      };\n    }) || [];\n\n\n    if (winners.length) {\n      console.debug('getWinners():', winners);\n      return winners;\n    }\n\n    return undefined;\n  }\n\n  getPlayoffDay() {\n    const postseasons = this.streamData?.games?.postseasons || null;\n\n    if (postseasons.length) {\n      return (postseasons[0].playoffs?.playoffDay || 0);\n    }\n\n    return 0;\n  }\n\n  getCountdown() {\n    return `${this.countdown.hours} ${this.countdown.hours === 1 ? 'hour' : 'hours'}, ${this.countdown.minutes} ${this.countdown.minutes === 1 ? 'minute' : 'minutes'}, ${this.countdown.seconds} ${this.countdown.seconds === 1 ? 'second' : 'seconds'}`;\n  }\n\n  refreshUI(): Game[] {\n    console.debug('LiveFeed.refreshUI()');\n\n    let ret = this.getSegmentGames();\n\n    if (this.searchTerm && this.searchTerm.length >= 2) {\n      // search term is long enough, filter based on team names\n      ret = ret.filter((game: any) => {\n        return game.homeTeamName.toLowerCase().indexOf(this.searchTerm.toLowerCase()) > -1\n          || game.awayTeamName.toLowerCase().indexOf(this.searchTerm.toLowerCase()) > -1;\n      });\n    }\n\n    this.games = ret;\n    return this.games;\n  }\n\n  segmentChanged(evt: any) {\n    if (evt && evt.detail && evt.detail.value) {\n      this.segment = evt.detail.value;\n      this.settings.setSegment(this.segment);\n    }\n    console.debug('LiveFeed.segmentChanged():', evt);\n    this.refreshUI();\n  }\n\n  checkStale() {\n    const current = this.stale;\n    if (this.games && this.games.length > 0) {\n      const active = this.games.find(game => game.inProgress);\n      if (active) {\n        // there are still active games, check staleness based on the last update received\n        if (this.lastUpdateTime + this.staleThreshold < Date.now()) {\n          this.stale = true;\n        } else {\n          this.stale = false;\n        }\n      } else {\n        // all active games have completed\n        this.stale = false;\n        // const percent = Math.round(Date.now() % (60 * 60 * 1000) / (60 * 60 * 1000)); // how far through the hour are we?\n      }\n    }\n\n    console.debug(`LiveFeed.checkStale(): ${current} -> ${this.stale}`);\n  }\n\n  checkDisableSleep() {\n    console.debug('LiveFeed.checkDisableSleep()');\n    const disableSleep = this.settings.disableSleep();\n\n    try {\n      if (disableSleep && this.getActiveGameCount() > 0) {\n        if (!this.keepAwake) {\n          console.debug('LiveFeed.checkDisableSleep(): keeping awake');\n          this.keepAwake = true;\n          KeepAwake.keepAwake();\n        }\n      } else {\n        if (this.keepAwake) {\n          console.debug('LiveFeed.checkDisableSleep(): allowing sleep');\n          this.keepAwake = false;\n          KeepAwake.allowSleep();\n        }\n      }\n    } catch (err) {\n      console.error('An error occurred setting keep-awake status.', err);\n    }\n  }\n\n  async onEvent(value: StreamData|ErrorEvent) {\n    console.debug('LiveFeed.onEvent()');\n    if (value && value instanceof ErrorEvent) {\n      console.warn('LiveFeed.onEvent(): got an error:', value);\n      this.onError(value);\n      return;\n    }\n\n    const streamData = value as StreamData;\n\n    this.lastUpdateTime = Date.now();\n    console.debug('LiveFeed.onEvent(): lastUpdateTime=', this.lastUpdateTime);\n    setTimeout(() => {\n      this.errors = 0;\n      this.checkStale();\n    }, 1000);\n\n    for (const key of Object.keys(streamData.data)) {\n      this.streamData.data[key] = streamData.data[key];\n    }\n\n    console.debug('LiveFeed.onEvent(): current data:', this.streamData);\n\n    this.onUpdate();\n  }\n\n  onError(evt: Event) {\n    console.debug('LiveFeed.onError():', evt);\n    this.onUpdate();\n    // wait a couple of seconds before actually marking it as an error\n    setTimeout(() => {\n      this.errors++;\n      this.checkStale();\n    }, 1000);\n  }\n\n  async onUpdate() {\n    this.checkDisableSleep();\n    this.refreshUI();\n\n    const uiState = {\n      seasonHeader: undefined,\n      notice: undefined,\n      countdownNotice: undefined,\n      winners: undefined,\n    };\n\n    if (!this.streamData && !this.streamData.sim) {\n      return;\n    }\n\n    const day = this.streamData?.games?.sim?.day;\n    const round = this.streamData?.sim?.playOffRound;\n    const phase = this.streamData?.sim?.phase;\n\n    switch (phase) {\n      case PHASES.REST:\n      case PHASES.PRESEASON:\n      case PHASES.POSTSEASON_END:\n      case PHASES.ELECTION:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = 'Games have finished for the season.';\n        uiState.countdownNotice = 'Next season starts in:';\n        uiState.winners = this.getWinners();\n        break;\n      }\n\n      case PHASES.EARLY_SIESTA:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = `Earlseason is complete.`;\n        uiState.countdownNotice = `Midseason starts in:`;\n        break;\n      }\n\n      case PHASES.LATE_SIESTA:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = `Midseason is complete.`;\n        uiState.countdownNotice = `Lateseason starts in:`;\n        break;\n      }\n\n      case PHASES.SEASON_END:\n      case PHASES.PRE_POSTSEASON:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = `Regular Season ${this.streamData.seasonNumber} is over.`;\n        uiState.countdownNotice = `Earlpostseason starts in:`;\n        break;\n      }\n\n      case PHASES.EARLY_POSTSEASON_END:\n      {\n        this.doCountdown('countdownToNextPhase');\n        uiState.notice = 'Earlpostseason is over.';\n        uiState.countdownNotice = 'Latepostseason starts in:';\n        break;\n      }\n      case PHASES.EARLY_POSTSEASON:\n      {\n        uiState.seasonHeader = `Earlpostseason, Day ${day}`;\n        break;\n      }\n      case PHASES.POSTSEASON:\n      {\n        uiState.seasonHeader = `Postseason Round ${this.streamData.games.postseasons[0].playoffs.round}, Day ${day}`;\n        break;\n      }\n      case PHASES.EARLSEASON:\n      case PHASES.MIDSEASON:\n      default:\n        uiState.seasonHeader = `Season ${this.streamData?.games?.season?.seasonNumber}, Day ${day}`;\n        break;\n    }\n\n    if (!this.uiState.notice && this.clockUpdater) {\n      clearInterval(this.clockUpdater);\n      this.clockUpdater = undefined;\n      this.countdown = undefined;\n    }\n\n    this.phase = phase;\n    Object.assign(this.uiState, uiState);\n\n    this.hideLoading();\n  }\n\n  async startListening() {\n    console.debug('LiveFeed.startListening(): opening event stream to blaseball.com');\n    this.showLoading();\n\n    this.subscription?.unsubscribe();\n    this.subscription = await this.stream.subscribe((evt) => {\n      this.onEvent(evt);\n    }, (err) => {\n      this.onError(err);\n    });\n\n    this.database.globalEvents().then((events: GlobalEvent[]) => {\n      this.globalEvents = events.filter((event: GlobalEvent) => event.expire === null);\n\n      setTimeout(() => {\n        const elem = document.getElementById('marquee');\n        if (elem) {\n          const marquee = new Marquee(elem);\n          setTimeout(() => {\n            elem.setAttribute('style', 'visibility: visible');\n          }, 200);\n        }\n      }, 1000);\n    });\n  }\n\n  gameId(index: number, item: any): string {\n    if (item && item.id) {\n      return item.id;\n    }\n    return String(index);\n  }\n}\n","import { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { LiveFeedPage } from './live-feed.page';\nimport { DiamondComponentModule } from '../diamond/diamond.module';\nimport { LiveFeedPageRoutingModule } from './live-feed-routing.module';\nimport { TeamComponentModule } from '../team/team.module';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    LiveFeedPageRoutingModule,\n    DiamondComponentModule,\n    TeamComponentModule,\n  ],\n  declarations: [LiveFeedPage]\n})\nexport class LiveFeedPageModule {}\n"]}