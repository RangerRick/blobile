{"version":3,"sources":["webpack:///node_modules/@capacitor/storage/dist/esm/web.js"],"names":["StorageWeb","constructor","super","arguments","group","this","options","value","impl","getItem","applyPrefix","key","setItem","removeItem","keys","rawKeys","map","k","substring","prefix","length","migrated","existing","Object","filter","indexOf","oldkey","_a","get","push","set","window","localStorage","WebPlugin"],"mappings":"8jFACaA,E,oRACTC,aAAa,wBACTC,eAASC,YACJC,MAAQ,mBAFJ,E,mEAIE,mGACU,iBADPA,EAAH,EAAC,SAERC,KAAKD,MAAQA,GAFN,8C,4FAKN,WAACE,GAAD,wGAEE,CAAEC,MADKF,KAAKG,KAAKC,QAAQJ,KAAKK,YAAYJ,EAAQK,QADpD,8C,4FAIA,WAACL,GAAD,+EACLD,KAAKG,KAAKI,QAAQP,KAAKK,YAAYJ,EAAQK,KAAML,EAAQC,OADpD,8C,+FAGG,WAACD,GAAD,+EACRD,KAAKG,KAAKK,WAAWR,KAAKK,YAAYJ,EAAQK,MADtC,8C,6FAGF,gIAEC,CAAEG,KADIT,KAAKU,UAAUC,IAAIC,YAAC,OAAIA,EAAEC,UAAUb,EAAKc,OAAOC,YADvD,8C,6FAIC,0GACWf,KAAKU,WADhB,IACP,2BAAWJ,EAAX,QACIN,KAAKG,KAAKK,WAAWF,GAFlB,4E,+FAKE,kHAEHU,EAAW,GACXC,EAAW,GAEXR,EAAOS,OAAOT,KAAKT,KAAKG,MAAMgB,OAAOP,YAAC,OAA6B,IAAzBA,EAAEQ,QADhC,WAJT,IAMYX,GANZ,gEAMEY,EANF,QAOCf,EAAMe,EAAOR,UAHL,QAGyBE,QACjCb,EAA6C,QAApCoB,EAAKtB,KAAKG,KAAKC,QAAQiB,cAAqBC,EAAgBA,EAAK,GAR3E,UASiCtB,KAAKuB,IAAI,CAAEjB,QAT5C,WAUuB,iBAVvB,OASGJ,MATH,iBAWDe,EAASO,KAAKlB,GAXb,yCAcKN,KAAKyB,IAAI,CAAEnB,MAAKJ,UAdrB,QAeDc,EAASQ,KAAKlB,GAfb,wKAkBF,CAAEU,WAAUC,aAlBV,8D,6DAoBL,WACJ,OAAOS,OAAOC,e,kBAER,WACN,MAAsB,kBAAf3B,KAAKD,MAA4B,GAAlB,UAA0BC,KAAKD,MAA/B,O,qBAE1BW,WAAS,WACL,OAAOQ,OAAOT,KAAKT,KAAKG,MAAMgB,OAAOP,YAAC,OAA+B,IAA3BA,EAAEQ,QAAQpB,EAAKc,Y,yBAE7DT,SAAYC,GACR,OAAON,KAAKc,OAASR,O,uCA3DGsB,Q","file":"x","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.group = 'CapacitorStorage';\n    }\n    async configure({ group }) {\n        if (typeof group === 'string') {\n            this.group = group;\n        }\n    }\n    async get(options) {\n        const value = this.impl.getItem(this.applyPrefix(options.key));\n        return { value };\n    }\n    async set(options) {\n        this.impl.setItem(this.applyPrefix(options.key), options.value);\n    }\n    async remove(options) {\n        this.impl.removeItem(this.applyPrefix(options.key));\n    }\n    async keys() {\n        const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n        return { keys };\n    }\n    async clear() {\n        for (const key of this.rawKeys()) {\n            this.impl.removeItem(key);\n        }\n    }\n    async migrate() {\n        var _a;\n        const migrated = [];\n        const existing = [];\n        const oldprefix = '_cap_';\n        const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n        for (const oldkey of keys) {\n            const key = oldkey.substring(oldprefix.length);\n            const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n            const { value: currentValue } = await this.get({ key });\n            if (typeof currentValue === 'string') {\n                existing.push(key);\n            }\n            else {\n                await this.set({ key, value });\n                migrated.push(key);\n            }\n        }\n        return { migrated, existing };\n    }\n    get impl() {\n        return window.localStorage;\n    }\n    get prefix() {\n        return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n    }\n    rawKeys() {\n        return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n    }\n    applyPrefix(key) {\n        return this.prefix + key;\n    }\n}\n//# sourceMappingURL=web.js.map"]}